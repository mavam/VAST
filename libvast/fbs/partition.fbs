include "partition_synopsis.fbs";
include "uuid.fbs";
include "value_index.fbs";
include "segmented_file.fbs";

namespace vast.fbs.partition.detail;

/// Stores the ids of a given type in the current partition.
/// Used to answer queries like `#type == "foo"`.
table LegacyTypeIDs {
  /// The type name.
  name: string;

  /// The serialized `vast::ids`.
  ids: [ubyte];
}

/// Stores an id for the store implmentation and a block of bytes that
/// passed to the initalization function.
table StoreHeader {
  /// The identifier of the store implementation that can read the data.        
  id: string;

  /// The store metadata.
  data: [ubyte];
}

namespace vast.fbs.partition;

/// A partition is a collection of indices and column synopses for some
/// id range.
table LegacyPartition {
  /// The UUID of this partition.
  uuid: LegacyUUID;

  /// The first ID in the partition.
  offset: uint64;

  /// The number of contained events.
  events: uint64;

  /// The available layouts in this partition, flattened with the layout name
  /// embedded in the field names, pruned of attributes, and serialized using
  /// CAF 0.17's binary serializer.
  /// NOTE: This can be marked (deprecated) once the minimum partition version is 3.
  combined_layout_caf_0_17: [ubyte];

  /// A map storing the mapping from type name -> ids
  /// Serialized using CAF's binary serializer.
  type_ids: [detail.LegacyTypeIDs];

  /// Various synopsis structures for partition-wide synopses of certain
  /// columns. (eg. global min and max timestamp)
  partition_synopsis: partition_synopsis.LegacyPartitionSynopsis;

  /// The contained value indexes.
  indexes: [value_index.LegacyQualifiedValueIndex];

  /// A store identifier and header information.
  store: detail.StoreHeader;

  /// The schema of a partition.
  schema: [ubyte] (nested_flatbuffer: "vast.fbs.Type");
}

union Partition {
  legacy: partition.LegacyPartition,
}

namespace vast.fbs;

// Up to VAST 2.3 the partition files on disk contained a `Partition`
// as root type, after 2.3 a `SegmentedFileHeader` is the root type
// and the total file has the following layout:
//
// [SegmentedFileHeader | vast::fbs::Partition | data0 | data1 | ... ]
//
// where the `data` fields are referenced by the
// `LegacyValueIndex::external_container_index` fields in the partition.
// The change was made in order to allow indices to exceed 2GiB in size.

table Partition {
  partition: partition.Partition;
}

root_type Partition;

file_identifier "VSTp";
