//    _   _____   __________
//   | | / / _ | / __/_  __/     Visibility
//   | |/ / __ |_\ \  / /          Across
//   |___/_/ |_/___/ /_/       Space and Time
//
// SPDX-FileCopyrightText: (c) 2021 The VAST Contributors
// SPDX-License-Identifier: BSD-3-Clause

#include "vast/config.hpp"
#include "vast/die.hpp"

#include <array>

namespace vast::version {

const char* version = "@VAST_VERSION_TAG@";
const char* major = "@VAST_VERSION_MAJOR@";
const char* minor = "@VAST_VERSION_MINOR@";
const char* patch = "@VAST_VERSION_PATCH@";
const char* tweak = "@VAST_VERSION_TWEAK@";
const uint64_t current_partition_version = @VAST_PARTITION_VERSION@;

supported_versions
support_for_partition_version(uint64_t partition_version) noexcept {
  static constexpr auto table
    = std::array<supported_versions, @VAST_PARTITION_VERSION@ +1>{
      // Partition version 0 was introduced implicitly; it's used when no
      // partition version was specified.
      supported_versions{"VAST v1.0", "VAST v2.4"},
      // Alongside partition version 1 we introduced homogeneous partitions and
      // the rebuilder, and required table slices to be of the arrow.v2 encoding
      // in their FlatBuffers table.
      supported_versions{"VAST v2.2", std::nullopt},
      // Partition version 2 was introduced along the removal of the ability to
      // write new segment stores, switching all stores to be Feather or
      // Parquet.
      supported_versions{"VAST v2.4", std::nullopt},
    };
  if (partition_version >= table.size())
    die("unsupported partition version");
  return table[partition_version];
}

namespace build {

const char* type = "@VAST_BUILD_TYPE@";
const char* tree_hash = "@VAST_BUILD_TREE_HASH@";

#undef VAST_ENABLE_ASSERTIONS
#cmakedefine01 VAST_ENABLE_ASSERTIONS
#if VAST_ENABLE_ASSERTIONS
bool has_assertions = true;
#else
bool has_assertions = false;
#endif

#undef VAST_ENABLE_ASAN
#cmakedefine01 VAST_ENABLE_ASAN
#if VAST_ENABLE_ASAN
bool has_address_santiizer = true;
#else
bool has_address_santiizer = false;
#endif

#undef VAST_ENABLE_UBSAN
#cmakedefine01 VAST_ENABLE_UBSAN
#if VAST_ENABLE_UBSAN
bool has_undefined_behavior_sanitizer = true;
#else
bool has_undefined_behavior_sanitizer = false;
#endif

} // namespace build

} // namespace vast::version
