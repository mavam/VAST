#pragma once

#include <cstdint>
#include <optional>
#include <string_view>
#include <utility>

#cmakedefine01 VAST_ENABLE_ASAN
#cmakedefine01 VAST_ENABLE_ASSERTIONS
#cmakedefine01 VAST_ENABLE_ASSERTIONS_CHEAP
#cmakedefine01 VAST_ENABLE_BACKTRACE
#cmakedefine01 VAST_ENABLE_BUILDID
#cmakedefine01 VAST_ENABLE_BUNDLED_CAF
#cmakedefine01 VAST_ENABLE_DEVELOPER_MODE
#cmakedefine01 VAST_ENABLE_EXCEPTIONS
#cmakedefine01 VAST_ENABLE_JEMALLOC
#cmakedefine01 VAST_ENABLE_JOURNALD_LOGGING
#cmakedefine01 VAST_ENABLE_RELOCATABLE_INSTALLATIONS
#cmakedefine01 VAST_ENABLE_SDT
#cmakedefine01 VAST_ENABLE_STATIC_EXECUTABLE
#cmakedefine01 VAST_ENABLE_UBSAN
#cmakedefine01 VAST_ENABLE_UNIT_TESTS
#cmakedefine01 VAST_ENABLE_LIBUNWIND
#cmakedefine01 VAST_ENABLE_LIBBACKTRACE
#cmakedefine01 VAST_ENABLE_LIBEXECINFO

namespace vast::version {

/// Contains the full version string.
extern const char* version;

/// The individual version components.
extern const char* major;
extern const char* minor;
extern const char* patch;
extern const char* tweak;

/// The version number of the VAST partition format. Bump this whenever making
/// changes that require partitions to be rebuilt.
extern const uint64_t current_partition_version;

/// Determines the supported VAST version range as [introduced, end_of_life] for
/// a given partition version. The partition_version is still supported if
/// end_of_life is not set.
struct supported_versions {
  std::string_view introduced;
  std::optional<std::string_view> end_of_life;
};

/// Returns the supported VAST version range for the given partition version.
supported_versions
support_for_partition_version(uint64_t partition_version) noexcept;

namespace build {

/// The CMake build type used to build VAST.
extern const char* type;

/// Contains a hash of VAST's build tree.
extern const char* tree_hash;

/// Whether assertions, ASan, and UBSan are enabled respectively.
extern bool has_assertions;
extern bool has_address_santiizer;
extern bool has_undefined_behavior_sanitizer;

} // namespace build

} // namespace vast::version

#include <caf/config.hpp>

#define VAST_LOG_LEVEL_QUIET CAF_LOG_LEVEL_QUIET
#define VAST_LOG_LEVEL_CRITICAL 1
#define VAST_LOG_LEVEL_ERROR CAF_LOG_LEVEL_ERROR
#define VAST_LOG_LEVEL_WARNING CAF_LOG_LEVEL_WARNING
#define VAST_LOG_LEVEL_INFO CAF_LOG_LEVEL_INFO
#define VAST_LOG_LEVEL_VERBOSE 11
#define VAST_LOG_LEVEL_DEBUG CAF_LOG_LEVEL_DEBUG
#define VAST_LOG_LEVEL_TRACE CAF_LOG_LEVEL_TRACE

// clang-format off
// clang-format tries to seperate the @ with a space, hence we disable it here.
#define VAST_LOG_LEVEL VAST_LOG_LEVEL_@VAST_LOG_LEVEL@
// clang-format on

// TODO: Move everything below to a more appropriate place.

#if defined(CAF_CLANG)
#  define VAST_CLANG 1
#else
#  define VAST_CLANG 0
#endif

#if defined(CAF_GCC)
#  define VAST_GCC 1
#else
#  define VAST_GCC 0
#endif

#if VAST_CLANG
#  define VAST_DIAGNOSTIC_PUSH _Pragma("clang diagnostic push")
#  define VAST_DIAGNOSTIC_POP _Pragma("clang diagnostic pop")
#  define VAST_DIAGNOSTIC_IGNORE_DEPRECATED                                    \
    _Pragma("clang diagnostic ignored \"-Wdeprecated\"")
#  define VAST_DIAGNOSTIC_IGNORE_VLA_EXTENSION                                 \
    _Pragma("clang diagnostic ignored \"-Wvla-extension\"")                    \
      _Pragma("clang diagnostic ignored \"-Wgnu-folding-constant\"")
#  define VAST_DIAGNOSTIC_IGNORE_ADDRESS             /* nop */
#  define VAST_DIAGNOSTIC_IGNORE_MAYBE_UNINITIALIZED /* nop */
#  define VAST_DIAGNOSTIC_IGNORE_UNUSED_CONST_VARIABLE                         \
    _Pragma("clang diagnostic ignored \"-Wunused-const-variable\"")
#elif VAST_GCC
#  define VAST_DIAGNOSTIC_PUSH _Pragma("GCC diagnostic push")
#  define VAST_DIAGNOSTIC_POP _Pragma("GCC diagnostic pop")
#  define VAST_DIAGNOSTIC_IGNORE_DEPRECATED                                    \
    _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
#  define VAST_DIAGNOSTIC_IGNORE_VLA_EXTENSION                                 \
    _Pragma("GCC diagnostic ignored \"-Wvla\"")
#  define VAST_DIAGNOSTIC_IGNORE_ADDRESS                                       \
    _Pragma("GCC diagnostic ignored \"-Waddress\"")
#  define VAST_DIAGNOSTIC_IGNORE_MAYBE_UNINITIALIZED                           \
    _Pragma("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
#  define VAST_DIAGNOSTIC_IGNORE_UNUSED_CONST_VARIABLE                         \
    _Pragma("GCC diagnostic ignored \"-Wunused-const-variable\"")
#endif

#ifdef CAF_BSD
#  define VAST_BSD 1
#else
#  define VAST_BSD 0
#endif
#ifdef CAF_LINUX
#  define VAST_LINUX 1
#else
#  define VAST_LINUX 0
#endif
#ifdef CAF_MACOS
#  define VAST_MACOS 1
#else
#  define VAST_MACOS 0
#endif
#ifdef CAF_WINDOWS
#  define VAST_WINDOWS 1
#else
#  define VAST_WINDOWS 0
#endif
#if !(VAST_BSD || VAST_LINUX || VAST_MACOS || VAST_WINDOWS)
#  error platform not supported
#endif
#ifdef CAF_POSIX
#  define VAST_POSIX 1
#else
#  define VAST_POSIX 0
#endif

#if !__SIZEOF_INT128__
#  error VAST requires support for __int128.
#endif
