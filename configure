#!/bin/sh
# Convenience wrapper for easily viewing/setting options that
# the project's CMake scripts will recognize

set -e

type cmake > /dev/null 2>&1 || {
  echo "\
This package requires CMake, please install it first, then you may
use this configure script to access CMake equivalent functionality.\
" >&2;
  exit 1;
}

# Save some values for later before parsing the command line.
if [ -n "$*" ]; then
  args=$(printf " \"%s\"" $*)
fi
command="$0$args"
sourcedir="$(cd "$(dirname "$0")" && pwd)"

usage="\
Usage: $0 [OPTION]... [VAR=VALUE]...

  Installation options:
    --prefix=PREFIX         installation directory [/usr/local]
    --without-relocatable   disable relocatable installations
    --package-name          sets the name of the produced package

  Convenience options:
    --debug                 sets --build-type=Debug, --log-level=trace,
                            and --with-asan
    --release               sets --build-type=Release
    --ci-build              sets --build-type=CI, --log-level=trace,
                            --with-assertions and --with-asan

  Build options:
    --generator=GENERATOR   CMake generator to use (see cmake --help)
    --build-dir=DIR         directory where to perform build [build]
    --build-type=DIR        CMake build type [RelWithDebInfo]
    --extra-flags=STRING    additional compiler flags
    --show-time-report      show where the compiler spends its time
    --no-auto-libc++        do not automatically use libc++ with Clang
    --more-warnings         enables most warnings on GCC and Clang
    --without-tests         build without unit tests
    --without-zeek-to-vast  build without zeek-to-vast

  Debugging:
    --log-level=LEVEL       maximum compile-time log level
                            (quiet,error,warning,info,verbose,debug,trace)
    --without-assertions    disable assertions
    --without-exceptions    disable C++ exceptions
    --with-asan             enable AddressSanitizer
    --with-gcov             enable GCOV

  Required packages:
    --with-arrow=PATH       path to Apache Arrow install root
    --without-arrow         explicitly disable Apache Arrow integration
    --with-caf=PATH         path to CAF install root or build directory
    --with-flatbuffers=PATH path to flatbuffers install root

  Optional packages:
    --with-broker=PATH      path to Broker install root (required for
                            zeek-to-vast)
    --with-doxygen=PATH     path to Doxygen install root
    --with-openssl=PATH     path to OpenSSL install root
    --with-pcap=PATH        path to libpcap install root
    --with-perftools=PATH   path to gperftools install root
    --with-tcmalloc         link against tcmalloc (requires gperftools)

  Influential Environment Variables (only on first invocation):
    CXX                     C++ compiler command
    CXXFLAGS                C++ compiler flags (overrides defaults)
    LDFLAGS                 Additional linker flags
    CMAKE_GENERATOR         Selects a custom generator
"

# Function to append a CMake cache entry definition to the
# CMakeCacheEntries variable
#   $1 is the cache entry variable name
#   $2 is the cache entry variable type
#   $3 is the cache entry variable value
append_cache_entry() {
  CMakeCacheEntries="$CMakeCacheEntries -D \"$1:$2=$3\""
}

# Set defaults
builddir=build
CMakeCacheEntries=""
append_cache_entry CMAKE_INSTALL_PREFIX   PATH      /usr/local
append_cache_entry CMAKE_BUILD_TYPE       STRING    RelWithDebInfo
append_cache_entry VAST_USE_TCMALLOC      BOOL      no

# Parse custom environment variable to initialize CMakeGenerator.
if [ -n "$CMAKE_GENERATOR" ]; then
  CMakeGenerator="$CMAKE_GENERATOR"
fi

# Parse command line arguments.
while [ $# -ne 0 ]; do
  case "$1" in
    -*=*)
      optarg="$(echo "$1" | sed 's/[-_a-zA-Z0-9]*=//')"
      ;;
    *)
      optarg=
      ;;
  esac
  case "$1" in
    --help|-h)
      echo "${usage}" 1>&2
      exit 1
      ;;
# -- Installation options ------------------------------------------------------
    --prefix=*)
      append_cache_entry VAST_PREFIX PATH "$optarg"
      append_cache_entry CMAKE_INSTALL_PREFIX PATH "$optarg"
      ;;
    --without-relocatable)
      append_cache_entry VAST_RELOCATABLE_INSTALL BOOL no
      ;;
    --package-name=*)
      append_cache_entry CPACK_PACKAGE_FILE_NAME STRING "$optarg"
      append_cache_entry CPACK_SET_DEST_DIR BOOL yes
      append_cache_entry CPACK_GENERATOR STRING TGZ
      ;;
# -- Convenience options -------------------------------------------------------
    --debug)
      append_cache_entry CMAKE_BUILD_TYPE STRING Debug
      append_cache_entry ENABLE_ADDRESS_SANITIZER BOOL yes
      # TODO: eventually, we also want to enable MORE_WARNINGS
      ;;
    --release)
      append_cache_entry CMAKE_BUILD_TYPE STRING Release
      ;;
    --ci-build)
      append_cache_entry CMAKE_BUILD_TYPE STRING CI
      append_cache_entry VAST_LOG_LEVEL STRING TRACE
      append_cache_entry CMAKE_CXX_FLAGS_CI STRING "-O2 -DNDEBUG -g1 -Wall -Wextra -pedantic"
      append_cache_entry ENABLE_ADDRESS_SANITIZER BOOL yes
      append_cache_entry VAST_ENABLE_ASSERTIONS BOOL yes
      ;;
# -- Build options -------------------------------------------------------------
    --generator=*)
      CMakeGenerator="$optarg"
      ;;
    --build-dir=*)
      builddir="$optarg"
      ;;
    --build-type=*)
      append_cache_entry CMAKE_BUILD_TYPE STRING "$optarg"
      ;;
    --extra-flags=*)
      append_cache_entry EXTRA_FLAGS STRING "$optarg"
      ;;
    --show-time-report)
      append_cache_entry SHOW_TIME_REPORT BOOL yes
      ;;
    --no-auto-libc++)
      append_cache_entry NO_AUTO_LIBCPP BOOL yes
      ;;
    --more-warnings)
      append_cache_entry MORE_WARNINGS BOOL yes
      ;;
    --without-tests)
      append_cache_entry BUILD_UNIT_TESTS BOOL no
      ;;
    --without-zeek-to-vast)
      append_cache_entry ENABLE_ZEEK_TO_VAST BOOL no
      ;;
# -- Debugging -----------------------------------------------------------------
    --log-level=*)
      append_cache_entry VAST_LOG_LEVEL STRING "$optarg"
      ;;
    --without-assertions)
      append_cache_entry VAST_ENABLE_ASSERTIONS BOOL no
      ;;
    --without-exceptions)
      append_cache_entry NO_EXCEPTIONS BOOL yes
      ;;
    --with-asan)
      append_cache_entry ENABLE_ADDRESS_SANITIZER BOOL yes
      ;;
    --with-gcov)
      append_cache_entry ENABLE_GCOV BOOL yes
      ;;
# -- Required packages ---------------------------------------------------------
    --with-arrow=*)
      append_cache_entry ARROW_ROOT_DIR PATH "$optarg"
      ;;
    --without-arrow)
      append_cache_entry VAST_NO_ARROW BOOL yes
      ;;
    --with-caf=*)
      append_cache_entry CAF_ROOT_DIR PATH "$optarg"
      ;;
    --with-flatbuffers=*)
      append_cache_entry FLATBUFFERS_ROOT_DIR PATH "$optarg"
      ;;
# -- Optional packages ---------------------------------------------------------
    --with-broker=*)
      append_cache_entry BROKER_ROOT_DIR PATH "$optarg"
      ;;
    --with-doxygen=*)
      append_cache_entry Doxygen_ROOT_DIR PATH "$optarg"
      ;;
    --with-openssl=*)
      append_cache_entry OPENSSL_ROOT_DIR PATH "$optarg"
      ;;
    --with-pcap=*)
      append_cache_entry PCAP_ROOT_DIR PATH "$optarg"
      ;;
    --with-perftools=*)
      append_cache_entry Gperftools_ROOT_DIR PATH "$optarg"
      ;;
    --with-tcmalloc)
      append_cache_entry VAST_USE_TCMALLOC BOOL yes
      ;;
    *)
      echo "Invalid option '$1'.  Try $0 --help to see available options."
      exit 1
      ;;
  esac
  shift
done

if [ -d "$builddir" ]; then
  # If build directory exists, check if it has a CMake cache
  if [ -f "$builddir/CMakeCache.txt" ]; then
    # If the CMake cache exists, delete it so that this configuration
    # is not tainted by a previous one
    rm -f "$builddir/CMakeCache.txt"
  fi
else
  mkdir -p "$builddir"
fi

cd "$builddir"

# In order to support spaces in paths, we use eval to re-evaluate the command
# line before passing it to CMake.
cmake=cmake
if [ -n "$CMakeGenerator" ]; then
  cmake="$cmake -G \"$CMakeGenerator\""
fi
cmake="$cmake $CMakeCacheEntries \"$sourcedir\""
eval $cmake

printf "#!/bin/sh\n\n" > config.status
printf "# Switch to the source of this build directory.\n" >> config.status
printf "cd \"$sourcedir\"\n\n" >> config.status
printf "# Invoke the command to configure this build.\n" >> config.status
if [ -n "$CC" ]; then
  printf 'CC="%s" ' "$CC" >> config.status
fi
if [ -n "$CXX" ]; then
  printf 'CXX="%s" ' "$CXX" >> config.status
fi
if [ -n "$CXXFLAGS" ]; then
  printf 'CXXFLAGS="%s" ' "$CXXFLAGS" >> config.status
fi
printf "$command\n" $@ >> config.status
chmod u+x config.status
