"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[62680],{15680:(e,n,a)=>{a.d(n,{xA:()=>g,yg:()=>m});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function p(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?p(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):p(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},p=Object.keys(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)a=p[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=t.createContext({}),s=function(e){var n=t.useContext(l),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},g=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},y="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,p=e.originalType,l=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),y=s(a),u=i,m=y["".concat(l,".").concat(u)]||y[u]||c[u]||p;return a?t.createElement(m,r(r({ref:n},g),{},{components:a})):t.createElement(m,r({ref:n},g))}));function m(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var p=a.length,r=new Array(p);r[0]=u;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[y]="string"==typeof e?e:i,r[1]=o;for(var s=2;s<p;s++)r[s]=a[s];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},93335:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>N,contentTitle:()=>d,default:()=>E,frontMatter:()=>m,metadata:()=>h,toc:()=>f});var t=a(15680),i=Object.defineProperty,p=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,g=(e,n,a)=>n in e?i(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,y=(e,n)=>{for(var a in n||(n={}))l.call(n,a)&&g(e,a,n[a]);if(o)for(var a of o(n))s.call(n,a)&&g(e,a,n[a]);return e},c=(e,n)=>p(e,r(n)),u=(e,n)=>{var a={};for(var t in e)l.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&o)for(var t of o(e))n.indexOf(t)<0&&s.call(e,t)&&(a[t]=e[t]);return a};const m={},d="Write a Plugin",h={unversionedId:"development/write-a-plugin",id:"version-v4.22/development/write-a-plugin",title:"Write a Plugin",description:"Implementing a new plugin requires the following steps:",source:"@site/versioned_docs/version-v4.22/development/write-a-plugin.md",sourceDirName:"development",slug:"/development/write-a-plugin",permalink:"/v4.22/development/write-a-plugin",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.22/development/write-a-plugin.md",tags:[],version:"v4.22",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Build the Docker image",permalink:"/v4.22/development/build-the-docker-image"},next:{title:"Troubleshooting",permalink:"/v4.22/troubleshooting"}},N={},f=[{value:"Setup the scaffolding",id:"setup-the-scaffolding",level:2},{value:"Choose a plugin type",id:"choose-a-plugin-type",level:2},{value:"Implement the plugin interface",id:"implement-the-plugin-interface",level:2},{value:"Process configuration options",id:"process-configuration-options",level:2},{value:"Compile the source code",id:"compile-the-source-code",level:2},{value:"Building alongside Tenzir",id:"building-alongside-tenzir",level:3},{value:"Building against an installed Tenzir",id:"building-against-an-installed-tenzir",level:3},{value:"Add unit and integration tests",id:"add-unit-and-integration-tests",level:2},{value:"Unit tests",id:"unit-tests",level:3},{value:"Integration tests",id:"integration-tests",level:3},{value:"Package it",id:"package-it",level:2}],F={toc:f},b="wrapper";function E(e){var n=e,{components:a}=n,i=u(n,["components"]);return(0,t.yg)(b,c(y(y({},F),i),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",y({},{id:"write-a-plugin"}),"Write a Plugin"),(0,t.yg)("p",null,"Implementing a new plugin requires the following steps:"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#setup-the-scaffolding"}),"Setup the scaffolding")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#choose-a-plugin-type"}),"Choose a plugin type")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#implement-the-plugin-interface"}),"Implement the plugin interface")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#process-configuration-options"}),"Process configuration options")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#compile-the-source-code"}),"Compile the source code")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#add-unit-and-integration-tests"}),"Add unit and integration tests")),(0,t.yg)("li",{parentName:"ol"},(0,t.yg)("a",y({parentName:"li"},{href:"#package-it"}),"Package it"))),(0,t.yg)("p",null,"Next, we'll discuss each step in more detail."),(0,t.yg)("h2",y({},{id:"setup-the-scaffolding"}),"Setup the scaffolding"),(0,t.yg)("p",null,"The scaffolding of a plugin includes the CMake glue that makes it possible to\nuse as static or dynamic plugin."),(0,t.yg)("p",null,"Pass ",(0,t.yg)("inlineCode",{parentName:"p"},"-DTENZIR_ENABLE_STATIC_PLUGINS:BOOL=ON")," to ",(0,t.yg)("inlineCode",{parentName:"p"},"cmake")," to build plugins\nalongside Tenzir as static plugins. This option is always on for static binary\nbuilds."),(0,t.yg)("p",null,"Tenzir ships with many plugins that showcase what a typical scaffold looks like.\nHave a look at the the\n",(0,t.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/tenzir/tree/main/plugins"}),"plugins")," directory, and an\n",(0,t.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/tenzir/blob/main/plugins/amqp/CMakeLists.txt"}),"example ",(0,t.yg)("inlineCode",{parentName:"a"},"CMakeLists.txt")," file from the AMQP\nplugin"),"."),(0,t.yg)("p",null,"We highly urge calling the provided ",(0,t.yg)("inlineCode",{parentName:"p"},"TenzirRegisterPlugin")," CMake in your plugin's\n",(0,t.yg)("inlineCode",{parentName:"p"},"CMakeLists.txt")," file instead of handrolling your CMake build scaffolding\ncode. This ensures that your plugin always uses the recommended defaults.\nNon-static installations of Tenzir contain the ",(0,t.yg)("inlineCode",{parentName:"p"},"TenzirRegisterPlugin.cmake"),"\nmodules."),(0,t.yg)("p",null,"The typical structure of a plugin directory includes the following\nfiles/directories:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"README.md"),": An overview of the plugin and how to use it.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"CHANGELOG.md"),": A trail of user-facing changes.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"schema/"),": new schemas that ship with this plugin.")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>.yaml.example"),": the configuration knobs of the plugin. We comment out\nall options by default so that the file serves as reference. Users can\nuncomment specific settings they would like to adapt."),(0,t.yg)("p",{parentName:"li"},"The CMake build scaffolding installs all of the above files/directories, if\npresent."))),(0,t.yg)("h2",y({},{id:"choose-a-plugin-type"}),"Choose a plugin type"),(0,t.yg)("p",null,"Tenzir offers ",(0,t.yg)("a",y({parentName:"p"},{href:"/v4.22/architecture/plugins#plugin-types"}),"a variety of customization\npoints"),", each of which defines its\nown API by inheriting from the plugin base class ",(0,t.yg)("inlineCode",{parentName:"p"},"tenzir::plugin"),". When writing\na new plugin, you can choose a subset of available types by inheriting from the\nrespective plugin classes."),(0,t.yg)("admonition",y({},{title:"Dreaded Diamond",type:"caution"}),(0,t.yg)("p",{parentName:"admonition"},"To avoid common issues with multiple inheritance, all intermediate plugin\nclasses that inherit from ",(0,t.yg)("inlineCode",{parentName:"p"},"tenzir::plugin")," use ",(0,t.yg)("em",{parentName:"p"},"virtual inheritance")," to avoid\nissues with the ",(0,t.yg)("a",y({parentName:"p"},{href:"https://isocpp.org/wiki/faq/multiple-inheritance#mi-diamond"}),"dreaded\ndiamond"),".")),(0,t.yg)("h2",y({},{id:"implement-the-plugin-interface"}),"Implement the plugin interface"),(0,t.yg)("p",null,"After having the necessary CMake in place, you can now derive from one or more\nplugin base classes to define your own plugin. Based on the chosen plugin\ntypes, you must override one or more virtual functions with an implementation\nof your own."),(0,t.yg)("p",null,"The basic anatomy of a plugin class looks as follows:"),(0,t.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"cpp","data-theme":"github-dark-default"}),(0,t.yg)("code",y({parentName:"pre"},{"data-language":"cpp","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"class"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," example_plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," final"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"public"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," virtual"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," component_plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"                             public"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," virtual"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," command_plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," {")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"public:")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// Loading logic.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"  example_plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"();")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// Teardown logic.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"  ~example_plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"() "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"override"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),";")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// Initializes a plugin with its respective entries from the YAML config")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// file, i.e., `plugin.<NAME>`.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"@param"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," plugin_config"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}})," The relevant subsection of the configuration.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"@param"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," global_config"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}})," The entire Tenzir configuration for potential access")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// to global options.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"  caf"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::error "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"initialize"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"("),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"const"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," record"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"&"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," plugin_config,")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"                        const"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," record"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"&"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," global_config) "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"override"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),";")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  /// Returns the unique name of the plugin.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"  std"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"string"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}})," name"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"() "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"const"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," override"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),";")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  // TODO: override pure virtual functions from the base classes.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  // ...")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"};"))))),(0,t.yg)("p",null,"The plugin constructor should only perform minimal actions to instantiate a\nwell-defined plugin instance. In particular, it should not throw or perform any\noperations that may potentially fail. For the actual plugin ramp up, please use\nthe ",(0,t.yg)("inlineCode",{parentName:"p"},"initialize")," function that processes the user configuration. The purpose of\nthe destructor is to free any used resources owned by the plugin."),(0,t.yg)("p",null,"Each plugin must have a unique name. This returned string should consicely\nidentify the plugin internally."),(0,t.yg)("p",null,"Please consult the documentation specific to each plugin type above to figure\nout what virtual function need overriding. In the above example, we have a\n",(0,t.yg)("inlineCode",{parentName:"p"},"command_plugin")," and a ",(0,t.yg)("inlineCode",{parentName:"p"},"component_plugin"),". This requires implementing the\nfollowing two interfaces:"),(0,t.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"cpp","data-theme":"github-dark-default"}),(0,t.yg)("code",y({parentName:"pre"},{"data-language":"cpp","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"component_plugin_actor"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}})," make_component"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"(")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"  node_actor"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"stateful_pointer"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"<"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"node_state"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"> "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"node"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),") "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"const"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," override"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),";")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"std"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::pair"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"<"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"std"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::unique_ptr"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"<"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"command"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),">"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),", "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"command"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::factory"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),">")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"make_command"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"() "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"const"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," override"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),";"))))),(0,t.yg)("p",null,"After completing the implementation, you must now register the plugin. For\nexample, to register the ",(0,t.yg)("inlineCode",{parentName:"p"},"example")," plugin, include the following line after the\nplugin class definition:"),(0,t.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"cpp","data-theme":"github-dark-default"}),(0,t.yg)("code",y({parentName:"pre"},{"data-language":"cpp","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"// This line must not be in a namespace.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"TENZIR_REGISTER_PLUGIN"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"("),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"tenzir"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"plugins"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"::example_plugin)"))))),(0,t.yg)("admonition",y({},{title:"Registering Type IDs",type:"tip"}),(0,t.yg)("p",{parentName:"admonition"},"The example plugin also shows how to register additional type IDs with the actor\nsystem configuration, which is a requirement for sending custom types from the\nplugin between actors. For more information, please refer to the CAF\ndocumentation page ",(0,t.yg)("a",y({parentName:"p"},{href:"https://actor-framework.readthedocs.io/en/stable/ConfiguringActorApplications.html#adding-custom-message-types"}),"Configuring Actor Applications: Adding Custom Message\nTypes"),".")),(0,t.yg)("h2",y({},{id:"process-configuration-options"}),"Process configuration options"),(0,t.yg)("p",null,"To configure a plugin at runtime, Tenzir first looks whether the YAML\nconfiguration contains a key with the plugin name under the top-level key\n",(0,t.yg)("inlineCode",{parentName:"p"},"plugins"),". Consider our example plugin with the name ",(0,t.yg)("inlineCode",{parentName:"p"},"example"),":"),(0,t.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,t.yg)("code",y({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"plugins"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  example"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    option"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"42"))))),(0,t.yg)("p",null,"Here, the plugin receives the record ",(0,t.yg)("inlineCode",{parentName:"p"},"{option: 42}")," at load time. A plugin can\nprocess the configuration snippet by overriding the following function of\n",(0,t.yg)("inlineCode",{parentName:"p"},"tenzir::plugin"),":"),(0,t.yg)("pre",null,(0,t.yg)("code",y({parentName:"pre"},{}),"caf::error initialize(const record& plugin_config,\n                      const record& global_config) override;\n")),(0,t.yg)("p",null,"Tenzir expects the plugin to be fully operational after calling ",(0,t.yg)("inlineCode",{parentName:"p"},"initialize"),".\nSubsequent calls to the implemented customization points must have a\nwell-defined behavior."),(0,t.yg)("h2",y({},{id:"compile-the-source-code"}),"Compile the source code"),(0,t.yg)("h3",y({},{id:"building-alongside-tenzir"}),"Building alongside Tenzir"),(0,t.yg)("p",null,"When configuring the Tenzir build, you need to tell CMake the path to the plugin\nsource directory. The CMake variable ",(0,t.yg)("inlineCode",{parentName:"p"},"TENZIR_PLUGINS")," holds a comma-separated\nlist of paths to plugin directories."),(0,t.yg)("p",null,"To test that Tenzir loads the plugin properly, you can use ",(0,t.yg)("inlineCode",{parentName:"p"},"tenzir\n--plugins=example version")," and look into the ",(0,t.yg)("inlineCode",{parentName:"p"},"plugins"),". A key-value pair with\nyour plugin name and version should exist in the output."),(0,t.yg)("p",null,"Refer to the ",(0,t.yg)("a",y({parentName:"p"},{href:"/v4.22/configuration#load-plugins"}),"plugin loading")," section of\nthe documentation to find out how to explicitly de-/activate plugins."),(0,t.yg)("h3",y({},{id:"building-against-an-installed-tenzir"}),"Building against an installed Tenzir"),(0,t.yg)("p",null,"It is also possible to build plugins against an installed Tenzir. The\n",(0,t.yg)("inlineCode",{parentName:"p"},"TenzirRegisterPlugin")," CMake function contains the required scaffolding to set\nup ",(0,t.yg)("inlineCode",{parentName:"p"},"test")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"integration")," targets that mimic Tenzir's targets. Here's how you\ncan use it:"),(0,t.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"bash","data-theme":"github-dark-default"}),(0,t.yg)("code",y({parentName:"pre"},{"data-language":"bash","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Configure the build. Requires Tenzir to be installed in the CMake Module Path.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"cmake"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," -S"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," path/to/plugin"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," -B"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," build")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Optionally you can manually specify a non-standard Tenzir install root:")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"#   TENZIR_DIR=/opt/tenzir cmake -S path/to/plugin -B build")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"cmake"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --build"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," build")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Run plugin-specific unit tests.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"ctest"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --test-dir"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," build")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Install to where Tenzir is also installed.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"cmake"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --install"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," build")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Optionally you can manually specify a non-standard Tenzir install root:")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"#   cmake --install build --prefix /opt/tenzir")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# Run plugin-specific integration tests against the installed Tenzir.")),"\n",(0,t.yg)("span",y({parentName:"code"},{"data-line":""}),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"cmake"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --build"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," build"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --target"),(0,t.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," integration"))))),(0,t.yg)("h2",y({},{id:"add-unit-and-integration-tests"}),"Add unit and integration tests"),(0,t.yg)("p",null,"Tenzir comes with unit and integration tests. So does a robust plugin\nimplementation. We now look at how you can hook into the testing frameworks."),(0,t.yg)("h3",y({},{id:"unit-tests"}),"Unit tests"),(0,t.yg)("p",null,"Every plugin ideally comes with unit tests. The ",(0,t.yg)("inlineCode",{parentName:"p"},"TenzirRegisterPlugin")," CMake\nfunction takes an optional ",(0,t.yg)("inlineCode",{parentName:"p"},"TEST_SOURCES")," argument that creates a test binary\n",(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>-test")," with ",(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>")," being the plugin name. The test binary links\nagainst the ",(0,t.yg)("inlineCode",{parentName:"p"},"tenzir::test")," target. ou can find the test binary in ",(0,t.yg)("inlineCode",{parentName:"p"},"bin")," within\nyour build directory."),(0,t.yg)("p",null,"To execute registered unit tests, you can also simply run the test binary\n",(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>-test"),", where ",(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>")," is the name of your plugin. The build target\n",(0,t.yg)("inlineCode",{parentName:"p"},"test")," sequentially runs tests for all plugins and Tenzir itself."),(0,t.yg)("h3",y({},{id:"integration-tests"}),"Integration tests"),(0,t.yg)("p",null,"Every plugin ideally comes with integration tests as well. Our convention is\nthat integration tests reside in an ",(0,t.yg)("inlineCode",{parentName:"p"},"integration")," subdirectory. If you add a\nfile called ",(0,t.yg)("inlineCode",{parentName:"p"},"integration/*.bats"),", Tenzir runs them alongside the regular\nintegration tests."),(0,t.yg)("p",null,"Note that plugins may affect the overall behavior of Tenzir. Therefore we\nrecommend to to run all integrations regularly by running the build target\n",(0,t.yg)("inlineCode",{parentName:"p"},"integration"),"."),(0,t.yg)("p",null,"To execute plugin-specific integration tests only, run the build target\n",(0,t.yg)("inlineCode",{parentName:"p"},"integration-<plugin>"),", where ",(0,t.yg)("inlineCode",{parentName:"p"},"<plugin>")," is the name of your plugin."),(0,t.yg)("h2",y({},{id:"package-it"}),"Package it"),(0,t.yg)("p",null,"If you plan to publish your plugin, you may want to create a GitHub repository.\nPlease let us know if you do so, we can then link to community plugins from the\ndocumentation."),(0,t.yg)("admonition",y({},{title:"Contribute Upstream",type:"tip"}),(0,t.yg)("p",{parentName:"admonition"},"If you think your plugin provides key functionality beneficial to all Tenzir\nusers, feel free to ",(0,t.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/tenzir/pulls"}),"submit a pull\nrequest")," to the main repository. But\nplease consider swinging by our ",(0,t.yg)("a",y({parentName:"p"},{href:"/discord"}),"community chat")," or\nstarting a ",(0,t.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/tenzir/discussions"}),"GitHub Discussion")," to\nensure that your contribution becomes a fruitful addition. \ud83d\ude4f")))}E.isMDXComponent=!0}}]);