"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83619],{15680:(e,n,a)=>{a.d(n,{xA:()=>d,yg:()=>u});var t=a(96540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},d=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(a),g=i,u=m["".concat(p,".").concat(g)]||m[g]||y[g]||r;return a?t.createElement(u,o(o({ref:n},d),{},{components:a})):t.createElement(u,o({ref:n},d))}));function u(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=g;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},9605:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>f,contentTitle:()=>c,default:()=>v,frontMatter:()=>u,metadata:()=>h,toc:()=>N});var t=a(15680),i=Object.defineProperty,r=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,d=(e,n,a)=>n in e?i(e,n,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[n]=a,m=(e,n)=>{for(var a in n||(n={}))p.call(n,a)&&d(e,a,n[a]);if(l)for(var a of l(n))s.call(n,a)&&d(e,a,n[a]);return e},y=(e,n)=>r(e,o(n)),g=(e,n)=>{var a={};for(var t in e)p.call(e,t)&&n.indexOf(t)<0&&(a[t]=e[t]);if(null!=e&&l)for(var t of l(e))n.indexOf(t)<0&&s.call(e,t)&&(a[t]=e[t]);return a};const u={sidebar_position:2},c="Expressions",h={unversionedId:"tql2/language/expressions",id:"version-v4.24/tql2/language/expressions",title:"Expressions",description:"This page outlines the expressions available in the Tenzir Programming Language.",source:"@site/versioned_docs/version-v4.24/tql2/language/expressions.md",sourceDirName:"tql2/language",slug:"/tql2/language/expressions",permalink:"/tql2/language/expressions",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.24/tql2/language/expressions.md",tags:[],version:"v4.24",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Statements",permalink:"/tql2/language/statements"},next:{title:"Modules",permalink:"/tql2/language/modules"}},f={},N=[{value:"Expression Kinds",id:"expression-kinds",level:2},{value:"Literals",id:"literals",level:3},{value:"Fields",id:"fields",level:3},{value:"<code>this</code>",id:"this",level:3},{value:"Metadata",id:"metadata",level:3},{value:"Unary Expression",id:"unary-expression",level:3},{value:"Binary Expression",id:"binary-expression",level:3},{value:"Indexing",id:"indexing",level:3},{value:"Records",id:"records",level:3},{value:"Lists",id:"lists",level:3},{value:"Functions and Methods",id:"functions-and-methods",level:3},{value:"Pipeline Expression",id:"pipeline-expression",level:3},{value:"Let Substitution",id:"let-substitution",level:3},{value:"<code>if</code> Expression",id:"if-expression",level:3},{value:"<code>match</code> Expression",id:"match-expression",level:3},{value:"Precedence",id:"precedence",level:2},{value:"Constant Expressions",id:"constant-expressions",level:2}],C={toc:N},b="wrapper";function v(e){var n=e,{components:a}=n,i=g(n,["components"]);return(0,t.yg)(b,y(m(m({},C),i),{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"expressions"}),"Expressions"),(0,t.yg)("p",null,"This page outlines the expressions available in the Tenzir Programming Language."),(0,t.yg)("h2",m({},{id:"expression-kinds"}),"Expression Kinds"),(0,t.yg)("h3",m({},{id:"literals"}),"Literals"),(0,t.yg)("p",null,"Literals serve as the foundational building blocks for constructing data. They\nare simple, self-contained constants."),(0,t.yg)("pre",null,(0,t.yg)("code",m({parentName:"pre"},{}),'true\nfalse\nnull\n42\n123.45\n2.5k\n2s\n"Hello!"\nr"C:\\tmp"\n2024-10-03\n2001-02-03T04:05:06Z\n192.168.0.1\n::ab12:253\n192.0.0.0/8\n')),(0,t.yg)("p",null,"Literals such as ",(0,t.yg)("inlineCode",{parentName:"p"},"42"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"123.45"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"2.5k")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"2s")," are called scalars. Numeric\nscalars may have power-of-ten suffixes, such as ",(0,t.yg)("inlineCode",{parentName:"p"},"k")," (=1,000), ",(0,t.yg)("inlineCode",{parentName:"p"},"M")," (=1,000,000),\n",(0,t.yg)("inlineCode",{parentName:"p"},"G"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"T"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"P")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"E"),". Power-of-two suffixes, such as ",(0,t.yg)("inlineCode",{parentName:"p"},"Ki")," (=1,024), ",(0,t.yg)("inlineCode",{parentName:"p"},"Mi"),"\n(=1,048,576), ",(0,t.yg)("inlineCode",{parentName:"p"},"Gi"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Ti"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"Pi")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"Ei"),", may also be used. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"2k")," is\nequivalent to ",(0,t.yg)("inlineCode",{parentName:"p"},"2000"),". Duration scalars use ",(0,t.yg)("inlineCode",{parentName:"p"},"ns"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"us"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"ms"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"s"),",\n",(0,t.yg)("inlineCode",{parentName:"p"},"min"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"h"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"d"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"w")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"y"),"."),(0,t.yg)("p",null,"String literals support escape sequences. For instance, ",(0,t.yg)("inlineCode",{parentName:"p"},'"\\n"')," is a single\nnewline character. To opt out of this behavior, you can use raw strings: ",(0,t.yg)("inlineCode",{parentName:"p"},'r"\\n"'),'\nis a backslash followed by the letter "n". Raw strings can also be enclosed with\nthe ',(0,t.yg)("inlineCode",{parentName:"p"},"#")," symbol. This is helpful if you want to include quotes in your string:\n",(0,t.yg)("inlineCode",{parentName:"p"},'r#"They said "hello"."#')),(0,t.yg)("p",null,"Date literals follow the ISO 8601 standard. IP literals can be written using the\nIPv4 or IPv6 notation. Subnet literals are IP literals followed by a slash and\nthe number of active bits."),(0,t.yg)("h3",m({},{id:"fields"}),"Fields"),(0,t.yg)("p",null,"A single identifier can be used to refer to a top-level field. For example,\n",(0,t.yg)("inlineCode",{parentName:"p"},"my_field")," references the top-level field of that name. To reference a field\nthat is not on the top-level, use ",(0,t.yg)("inlineCode",{parentName:"p"},".<name>")," on an expression that returns a\nrecord. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"my_field.my_subfield")," references the field ",(0,t.yg)("inlineCode",{parentName:"p"},"my_subfield"),"\nin ",(0,t.yg)("inlineCode",{parentName:"p"},"my_field"),", assuming ",(0,t.yg)("inlineCode",{parentName:"p"},"my_field")," is a record."),(0,t.yg)("h3",m({},{id:"this"}),(0,t.yg)("inlineCode",{parentName:"h3"},"this")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"this")," keyword allows you to reference the entire top-level event. For\ninstance, ",(0,t.yg)("inlineCode",{parentName:"p"},"from {x: 1, y: 2} | z = this")," has the output\n",(0,t.yg)("inlineCode",{parentName:"p"},"{x: 1, y: 2, z: {x: 1, y: 2}}"),". This keyword can also be used to overwrite the\nwhole event, as demonstrated by ",(0,t.yg)("inlineCode",{parentName:"p"},"this = {a: x, y: b}"),"."),(0,t.yg)("h3",m({},{id:"metadata"}),"Metadata"),(0,t.yg)("p",null,"Events carry not only data, but also metadata. To refer to the metadata, use the\n",(0,t.yg)("inlineCode",{parentName:"p"},"@")," prefix. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"@name")," carries the name of the event. Currently, the\nset of metadata fields is limited to just  ",(0,t.yg)("inlineCode",{parentName:"p"},"@name"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"@import_time")," and\n",(0,t.yg)("inlineCode",{parentName:"p"},"@internal"),", but will potentially be expanded later to allow arbitrary\nuser-defined metadata fields."),(0,t.yg)("h3",m({},{id:"unary-expression"}),"Unary Expression"),(0,t.yg)("p",null,"The unary expression operators are ",(0,t.yg)("inlineCode",{parentName:"p"},"+"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"-")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"not"),". ",(0,t.yg)("inlineCode",{parentName:"p"},"+")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"-")," expect a\nnumber or duration. ",(0,t.yg)("inlineCode",{parentName:"p"},"not")," expects a boolean value."),(0,t.yg)("h3",m({},{id:"binary-expression"}),"Binary Expression"),(0,t.yg)("p",null,"The binary expressions operators are ",(0,t.yg)("inlineCode",{parentName:"p"},"+"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"-"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"*"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"/"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"=="),", ",(0,t.yg)("inlineCode",{parentName:"p"},"!="),", ",(0,t.yg)("inlineCode",{parentName:"p"},">"),", ",(0,t.yg)("inlineCode",{parentName:"p"},">="),",\n",(0,t.yg)("inlineCode",{parentName:"p"},"<"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"<="),", ",(0,t.yg)("inlineCode",{parentName:"p"},"and"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"or"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"in"),"."),(0,t.yg)("h3",m({},{id:"indexing"}),"Indexing"),(0,t.yg)("p",null,"The syntax ",(0,t.yg)("inlineCode",{parentName:"p"},"expr[index]")," can be used to access items of both lists and records.\nIf ",(0,t.yg)("inlineCode",{parentName:"p"},"expr")," a list, then ",(0,t.yg)("inlineCode",{parentName:"p"},"index")," must be an integer, where ",(0,t.yg)("inlineCode",{parentName:"p"},"0")," refers to the first\nelement of the list. If ",(0,t.yg)("inlineCode",{parentName:"p"},"expr")," is a record, then ",(0,t.yg)("inlineCode",{parentName:"p"},"index")," must be a string which\nis interpreted as the name of a field. This can be used to refer to fields which\nare not valid identifiers, for example ",(0,t.yg)("inlineCode",{parentName:"p"},'foo["not a valid identifier!"]'),". At the\nmoment, the string is required to be a constant expression."),(0,t.yg)("h3",m({},{id:"records"}),"Records"),(0,t.yg)("p",null,"Records are created with a pair of braces. ",(0,t.yg)("inlineCode",{parentName:"p"},"{}")," denotes the empty record. Fields\nare normally specified  by using simple identifiers, followed by a colon and\nthen an expression, for example: ",(0,t.yg)("inlineCode",{parentName:"p"},"{foo: 1, bar: 2}"),". If the field name would not\nbe valid identifier, use a string literal instead:\n",(0,t.yg)("inlineCode",{parentName:"p"},'{"not a valid identifier!": 3}'),". The individual fields are separated with\ncommas. The final field may have a trailing comma: ",(0,t.yg)("inlineCode",{parentName:"p"},"{foo: 42,}"),". Records can be\nexpanded into other records by using ",(0,t.yg)("inlineCode",{parentName:"p"},"..."),". For example, if ",(0,t.yg)("inlineCode",{parentName:"p"},"foo")," is\n",(0,t.yg)("inlineCode",{parentName:"p"},"{a: 1, b: 2}"),", then ",(0,t.yg)("inlineCode",{parentName:"p"},"{...foo, c: 3}")," is ",(0,t.yg)("inlineCode",{parentName:"p"},"{a: 1, b: 2, c: 3}"),". As fields must be\nunique, having the same fields multiple times will only keep the last value."),(0,t.yg)("h3",m({},{id:"lists"}),"Lists"),(0,t.yg)("p",null,"Lists are created with a pair of brackets. ",(0,t.yg)("inlineCode",{parentName:"p"},"[]")," denotes the empty list. The\nitems of the list are specified with a comma-delimited list of expressions, such\nas ",(0,t.yg)("inlineCode",{parentName:"p"},"[1, 2+3, foo()]"),". As with records, the final item may have a trailing comma:\n",(0,t.yg)("inlineCode",{parentName:"p"},"[foo, bar,]"),". Lists can be expanded into other lists by using ",(0,t.yg)("inlineCode",{parentName:"p"},"..."),". For\nexample, if ",(0,t.yg)("inlineCode",{parentName:"p"},"foo")," is ",(0,t.yg)("inlineCode",{parentName:"p"},"[1, 2]"),", then ",(0,t.yg)("inlineCode",{parentName:"p"},"[...foo, 3]")," is ",(0,t.yg)("inlineCode",{parentName:"p"},"[1, 2, 3]"),"."),(0,t.yg)("h3",m({},{id:"functions-and-methods"}),"Functions and Methods"),(0,t.yg)("p",null,"Functions are invoked by following name with parenthesis and a comma-delimited\nsequence of arguments, for example: ",(0,t.yg)("inlineCode",{parentName:"p"},"now()"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"sqrt(42)"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"round(391s, 1min)"),".\nMethods are like functions, but also have additional method subject followed by\na dot, such as ",(0,t.yg)("inlineCode",{parentName:"p"},"expr.trim()"),". The final argument may have a trailing comma."),(0,t.yg)("h3",m({},{id:"pipeline-expression"}),"Pipeline Expression"),(0,t.yg)("p",null,"Some operators expect a pipeline expression as an argument. Pipeline expressions\nare written with a pair of braces, for example: ",(0,t.yg)("inlineCode",{parentName:"p"},"{ head 5 }"),". If the final\nargument to an operator is a pipeline expression, then the preceding comma may\nbe omitted, as in ",(0,t.yg)("inlineCode",{parentName:"p"},"every 10s { head 5 }"),". The braces can contain multiple\nstatements. The same statement separation rules apply as usual. For example,\nnewlines can be used to separate statements."),(0,t.yg)("h3",m({},{id:"let-substitution"}),"Let Substitution"),(0,t.yg)("p",null,"A previously defined ",(0,t.yg)("inlineCode",{parentName:"p"},"let")," binding can be referenced in an expression by using\nthe same ",(0,t.yg)("inlineCode",{parentName:"p"},"$"),"-prefixed name. For example, if ",(0,t.yg)("inlineCode",{parentName:"p"},"let $foo = 42")," is defined, then\n",(0,t.yg)("inlineCode",{parentName:"p"},"where some_field == $foo")," is equivalent to ",(0,t.yg)("inlineCode",{parentName:"p"},"where some_field == 42"),"."),(0,t.yg)("h3",m({},{id:"if-expression"}),(0,t.yg)("inlineCode",{parentName:"h3"},"if")," Expression"),(0,t.yg)("admonition",m({},{type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"This functionality is not implemented yet.")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"if")," keyword can also be used in an expression context. For example:\n",(0,t.yg)("inlineCode",{parentName:"p"},'if foo == 42 { "yes" } else { "no" }'),"."),(0,t.yg)("h3",m({},{id:"match-expression"}),(0,t.yg)("inlineCode",{parentName:"h3"},"match")," Expression"),(0,t.yg)("admonition",m({},{type:"note"}),(0,t.yg)("p",{parentName:"admonition"},"This functionality is not implemented yet.")),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"match")," keyword can also be used in an expression context to perform pattern\nmatching. For example, the expression\n",(0,t.yg)("inlineCode",{parentName:"p"},'match num { 1 => "one", 2 => "two", _ => "neither one nor two"}')," inspects the\nvalue of ",(0,t.yg)("inlineCode",{parentName:"p"},"num")," and returns the corresponding description. ",(0,t.yg)("inlineCode",{parentName:"p"},"_")," can be used as a\nfinal catch-all. Without a ",(0,t.yg)("inlineCode",{parentName:"p"},"_")," case, it can happen that there is no match for\nthe value. In that case, the ",(0,t.yg)("inlineCode",{parentName:"p"},"match")," expression will evaluate to ",(0,t.yg)("inlineCode",{parentName:"p"},"null")," and a\nwarning will be emitted."),(0,t.yg)("h2",m({},{id:"precedence"}),"Precedence"),(0,t.yg)("p",null,"Expressions such as ",(0,t.yg)("inlineCode",{parentName:"p"},"1 - 2 * 3 + 4")," follow additional precedence and\nassociativity rules, making the previous expression equivalent to\n",(0,t.yg)("inlineCode",{parentName:"p"},"(1 - (2 * 3)) + 4"),". The following table details the disambiguation process,\nordered from highest to lowest precedence."),(0,t.yg)("table",null,(0,t.yg)("thead",{parentName:"table"},(0,t.yg)("tr",{parentName:"thead"},(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Expression"),(0,t.yg)("th",m({parentName:"tr"},{align:null}),"Associativity"))),(0,t.yg)("tbody",{parentName:"table"},(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"method call"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"field access"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"[]"),"-indexing"),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"unary ",(0,t.yg)("inlineCode",{parentName:"td"},"+")," ",(0,t.yg)("inlineCode",{parentName:"td"},"-")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"*")," ",(0,t.yg)("inlineCode",{parentName:"td"},"/")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"left")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),"binary ",(0,t.yg)("inlineCode",{parentName:"td"},"+")," ",(0,t.yg)("inlineCode",{parentName:"td"},"-")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"left")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"==")," ",(0,t.yg)("inlineCode",{parentName:"td"},"!=")," ",(0,t.yg)("inlineCode",{parentName:"td"},">")," ",(0,t.yg)("inlineCode",{parentName:"td"},">=")," ",(0,t.yg)("inlineCode",{parentName:"td"},"<")," ",(0,t.yg)("inlineCode",{parentName:"td"},"<=")," ",(0,t.yg)("inlineCode",{parentName:"td"},"in")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"left (will be changed to none)")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"not")),(0,t.yg)("td",m({parentName:"tr"},{align:null}))),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"and")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"left")),(0,t.yg)("tr",{parentName:"tbody"},(0,t.yg)("td",m({parentName:"tr"},{align:null}),(0,t.yg)("inlineCode",{parentName:"td"},"or")),(0,t.yg)("td",m({parentName:"tr"},{align:null}),"left")))),(0,t.yg)("h2",m({},{id:"constant-expressions"}),"Constant Expressions"),(0,t.yg)("p",null,"A constant expression is an expression that can be evaluated to a constant when\nthe pipeline that contains it is started. Many pipeline operators require certain\narguments to be constants. For example, ",(0,t.yg)("inlineCode",{parentName:"p"},"head 5")," is valid because the integer\nliteral is constant. On the other hand, ",(0,t.yg)("inlineCode",{parentName:"p"},"head x")," is invalid, because the value\nof the field ",(0,t.yg)("inlineCode",{parentName:"p"},"x")," depends on the events flowing through the ",(0,t.yg)("inlineCode",{parentName:"p"},"head")," operator.\nFunctions such as ",(0,t.yg)("inlineCode",{parentName:"p"},"now()")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"random()")," can also be constant evaluated, even\nthough their results vary. In such cases, the function call is evaluated once\nwhen the pipeline starts, and the resulting value is treated as a constant."))}v.isMDXComponent=!0}}]);