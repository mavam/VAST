"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[25961],{15680:(e,r,n)=>{n.d(r,{xA:()=>c,yg:()=>m});var t=n(96540);function i(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){i(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function o(e,r){if(null==e)return{};var n,t,i=function(e,r){if(null==e)return{};var n,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(i[n]=e[n]);return i}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},c=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),d=i,m=u["".concat(s,".").concat(d)]||u[d]||y[d]||a;return n?t.createElement(m,l(l({ref:r},c),{},{components:n})):t.createElement(m,l({ref:r},c))}));function m(e,r){var n=arguments,i=r&&r.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=d;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o[u]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=n[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},83434:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>v,contentTitle:()=>f,default:()=>w,frontMatter:()=>m,metadata:()=>g,toc:()=>b});var t=n(15680),i=Object.defineProperty,a=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,r,n)=>r in e?i(e,r,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[r]=n,u=(e,r)=>{for(var n in r||(r={}))s.call(r,n)&&c(e,n,r[n]);if(o)for(var n of o(r))p.call(r,n)&&c(e,n,r[n]);return e},y=(e,r)=>a(e,l(r)),d=(e,r)=>{var n={};for(var t in e)s.call(e,t)&&r.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&o)for(var t of o(e))r.indexOf(t)<0&&p.call(e,t)&&(n[t]=e[t]);return n};const m={sidebar_custom_props:{format:{parser:!0,printer:!0}}},f="lines",g={unversionedId:"formats/lines",id:"version-v4.19/formats/lines",title:"lines",description:"Parses and prints events as lines.",source:"@site/versioned_docs/version-v4.19/formats/lines.md",sourceDirName:"formats",slug:"/formats/lines",permalink:"/v4.19/formats/lines",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.19/formats/lines.md",tags:[],version:"v4.19",frontMatter:{sidebar_custom_props:{format:{parser:!0,printer:!0}}},sidebar:"docsSidebar",previous:{title:"leef",permalink:"/v4.19/formats/leef"},next:{title:"parquet",permalink:"/v4.19/formats/parquet"}},v={},b=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>-s|--skip-empty</code> (Parser)",id:"-s--skip-empty-parser",level:3},{value:"Examples",id:"examples",level:2}],O={toc:b},h="wrapper";function w(e){var r=e,{components:n}=r,i=d(r,["components"]);return(0,t.yg)(h,y(u(u({},O),i),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",u({},{id:"lines"}),"lines"),(0,t.yg)("p",null,"Parses and prints events as lines."),(0,t.yg)("h2",u({},{id:"synopsis"}),"Synopsis"),(0,t.yg)("p",null,"Parser:"),(0,t.yg)("pre",null,(0,t.yg)("code",u({parentName:"pre"},{}),"lines [-s|--skip-empty]\n")),(0,t.yg)("p",null,"Printer:"),(0,t.yg)("pre",null,(0,t.yg)("code",u({parentName:"pre"},{}),"lines\n")),(0,t.yg)("h2",u({},{id:"description"}),"Description"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"lines")," parser takes its input bytes and splits it at a newline character."),(0,t.yg)("p",null,"Newline characters include:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"\\n")),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},"\\r\\n"))),(0,t.yg)("p",null,"The resulting events have a single field called ",(0,t.yg)("inlineCode",{parentName:"p"},"line"),"."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"lines")," printer is an alias to ",(0,t.yg)("inlineCode",{parentName:"p"},"ssv --no-header"),".\nEach event is printed on a new line, with fields separated by spaces,\nand nulls marked with dashes (",(0,t.yg)("inlineCode",{parentName:"p"},"-"),").\nUse the ",(0,t.yg)("inlineCode",{parentName:"p"},"put"),"-operator before the ",(0,t.yg)("inlineCode",{parentName:"p"},"lines")," printer to only print a single field."),(0,t.yg)("h3",u({},{id:"-s--skip-empty-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"-s|--skip-empty")," (Parser)"),(0,t.yg)("p",null,"Ignores empty lines in the input."),(0,t.yg)("p",null,"Defaults to ",(0,t.yg)("inlineCode",{parentName:"p"},"false"),"."),(0,t.yg)("h2",u({},{id:"examples"}),"Examples"),(0,t.yg)("p",null,"Read a text file line-by-line:"),(0,t.yg)("pre",null,(0,t.yg)("code",u({parentName:"pre"},{}),"from file /tmp/file.txt read lines\n")),(0,t.yg)("p",null,"Write the version number to stdout:"),(0,t.yg)("pre",null,(0,t.yg)("code",u({parentName:"pre"},{}),"version | put version | to - write lines\n")))}w.isMDXComponent=!0}}]);