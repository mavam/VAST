"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1388],{15680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>y});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=a,y=d["".concat(p,".").concat(u)]||d[u]||c[u]||o;return n?r.createElement(y,i(i({ref:t},m),{},{components:n})):r.createElement(y,i({ref:t},m))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19174:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>g,default:()=>x,frontMatter:()=>y,metadata:()=>f,toc:()=>h});var r=n(15680),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,m=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&m(e,n,t[n]);if(l)for(var n of l(t))s.call(t,n)&&m(e,n,t[n]);return e},c=(e,t)=>o(e,i(t)),u=(e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n};const y={sidebar_custom_props:{operator:{transformation:!0}}},g="sample",f={unversionedId:"operators/sample",id:"operators/sample",title:"sample",description:"Dynamically samples events from a event stream.",source:"@site/docs/operators/sample.md",sourceDirName:"operators",slug:"/operators/sample",permalink:"/next/operators/sample",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/operators/sample.md",tags:[],version:"current",frontMatter:{sidebar_custom_props:{operator:{transformation:!0}}},sidebar:"docsSidebar",previous:{title:"reverse",permalink:"/next/operators/reverse"},next:{title:"save",permalink:"/next/operators/save"}},v={},h=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>--period &lt;period&gt;</code>",id:"--period-period",level:3},{value:"<code>--mode=&lt;mode&gt;</code>",id:"--modemode",level:3},{value:"<code>--min-events=&lt;uint&gt;</code>",id:"--min-eventsuint",level:3},{value:"<code>--max-rate=&lt;uint&gt;</code>",id:"--max-rateuint",level:3},{value:"Examples",id:"examples",level:2}],b={toc:h},O="wrapper";function x(e){var t=e,{components:n}=t,a=u(t,["components"]);return(0,r.yg)(O,c(d(d({},b),a),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",d({},{id:"sample"}),"sample"),(0,r.yg)("p",null,"Dynamically samples events from a event stream."),(0,r.yg)("h2",d({},{id:"synopsis"}),"Synopsis"),(0,r.yg)("pre",null,(0,r.yg)("code",d({parentName:"pre"},{}),"sample --period <period> --mode=<mode> --min-events=<uint> --max-rate=<uint>\n")),(0,r.yg)("h2",d({},{id:"description"}),"Description"),(0,r.yg)("p",null,"Dynamically samples input data from a stream based on the frequency of\nreceiving events for streams with varying load."),(0,r.yg)("p",null,"The operator counts the number of events received in the ",(0,r.yg)("inlineCode",{parentName:"p"},"period")," and applies\nthe specified function on the count to calculate the sampling rate for the next\nperiod."),(0,r.yg)("h3",d({},{id:"--period-period"}),(0,r.yg)("inlineCode",{parentName:"h3"},"--period <period>")),(0,r.yg)("p",null,"The duration to count events in, i.e., how often the sample rate is computed."),(0,r.yg)("p",null,"The sampling rate for the first window is ",(0,r.yg)("inlineCode",{parentName:"p"},"1:1"),"."),(0,r.yg)("p",null,"Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"30 seconds"),"."),(0,r.yg)("h3",d({},{id:"--modemode"}),(0,r.yg)("inlineCode",{parentName:"h3"},"--mode=<mode>")),(0,r.yg)("p",null,"The function used to compute the sampling rate:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"ln"')," (default)"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"log2"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"log10"')),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},'"sqrt"'))),(0,r.yg)("h3",d({},{id:"--min-eventsuint"}),(0,r.yg)("inlineCode",{parentName:"h3"},"--min-events=<uint>")),(0,r.yg)("p",null,"The minimum number of events that must be received during the previous sampling\nperiod for the sampling mode to be applied in the current period. If the number\nof events in a sample group falls below this threshold, a ",(0,r.yg)("inlineCode",{parentName:"p"},"1:1")," sample rate is\nused instead."),(0,r.yg)("p",null,"Defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"30"),"."),(0,r.yg)("h3",d({},{id:"--max-rateuint"}),(0,r.yg)("inlineCode",{parentName:"h3"},"--max-rate=<uint>")),(0,r.yg)("p",null,"The maximum number of events to emit per ",(0,r.yg)("inlineCode",{parentName:"p"},"period"),". The sampling rate is capped to\nthis value if the computed rate is higher than this."),(0,r.yg)("h2",d({},{id:"examples"}),"Examples"),(0,r.yg)("p",null,"Sample a feed ",(0,r.yg)("inlineCode",{parentName:"p"},"log-stream")," every 30s dynamically, only changing rate when more\nthan 30 events (",(0,r.yg)("inlineCode",{parentName:"p"},"min-events"),") are received. Additionally, cap the ",(0,r.yg)("inlineCode",{parentName:"p"},"max-rate")," to 500 events\nper 30s."),(0,r.yg)("pre",null,(0,r.yg)("code",d({parentName:"pre"},{}),'subscribe "log-stream" \n| sample --period 30s --min-events=30 --max-rate=500\n')))}x.isMDXComponent=!0}}]);