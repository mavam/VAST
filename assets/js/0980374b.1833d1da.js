"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[94114],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=i,m=d["".concat(l,".").concat(u)]||d[u]||g[u]||r;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>y,contentTitle:()=>h,default:()=>k,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var a=t(15680),i=Object.defineProperty,r=Object.defineProperties,o=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,n,t)=>n in e?i(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,d=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&c(e,t,n[t]);if(s)for(var t of s(n))p.call(n,t)&&c(e,t,n[t]);return e},g=(e,n)=>r(e,o(n)),u=(e,n)=>{var t={};for(var a in e)l.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&s)for(var a of s(e))n.indexOf(a)<0&&p.call(e,a)&&(t[a]=e[a]);return t};const m={title:"VAST v2.0",description:"VAST v2.0 - Smarter Query Scheduling & Tunable Filters",authors:"dominiklohmann",date:new Date("2022-05-16T00:00:00.000Z"),tags:["release","compaction","performance","pcap"]},h=void 0,f={permalink:"/blog/vast-v2.0",source:"@site/blog/vast-v2.0/index.md",title:"VAST v2.0",description:"VAST v2.0 - Smarter Query Scheduling & Tunable Filters",date:"2022-05-16T00:00:00.000Z",formattedDate:"May 16, 2022",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"compaction",permalink:"/blog/tags/compaction"},{label:"performance",permalink:"/blog/tags/performance"},{label:"pcap",permalink:"/blog/tags/pcap"}],readingTime:6.335,hasTruncateMarker:!0,authors:[{name:"Dominik Lohmann",title:"Engineering Manager",url:"https://github.com/dominiklohmann",email:"dominik@tenzir.com",imageURL:"https://github.com/dominiklohmann.png",key:"dominiklohmann"}],frontMatter:{title:"VAST v2.0",description:"VAST v2.0 - Smarter Query Scheduling & Tunable Filters",authors:"dominiklohmann",date:"2022-05-16T00:00:00.000Z",tags:["release","compaction","performance","pcap"]},prevItem:{title:"Apache Arrow as Platform for Security Data Engineering",permalink:"/blog/apache-arrow-as-platform-for-security-data-engineering"},nextItem:{title:"VAST v1.1.2",permalink:"/blog/vast-v1.1.2"}},y={authorsImageUrls:[void 0]},v=[{value:"Query Scheduling",id:"query-scheduling",level:2},{value:"Updates to Aging, Compaction, and the Disk Monitor",id:"updates-to-aging-compaction-and-the-disk-monitor",level:2},{value:"Fine-tuned Catalog Configuration",id:"fine-tuned-catalog-configuration",level:2},{value:"Configuring VAST with Environment Variables",id:"configuring-vast-with-environment-variables",level:2},{value:"VLAN Tag Extraction and Better Packet Decapsulation",id:"vlan-tag-extraction-and-better-packet-decapsulation",level:2},{value:"Breaking Changes",id:"breaking-changes",level:2},{value:"Changes for Developers",id:"changes-for-developers",level:2},{value:"Smaller Things",id:"smaller-things",level:2}],b={toc:v},w="wrapper";function k(e){var n=e,{components:i}=n,r=u(n,["components"]);return(0,a.yg)(w,g(d(d({},b),r),{components:i,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"Dear community, we are excited to announce ",(0,a.yg)("a",d({parentName:"p"},{href:"https://github.com/tenzir/vast/releases/tag/v2.0.0"}),"VAST v2.0"),",\nbringing faster execution of bulk-submitted queries, improved tunability of\nindex structures, and new configurability through environment variables."),(0,a.yg)("h2",d({},{id:"query-scheduling"}),"Query Scheduling"),(0,a.yg)("p",null,"VAST is now more intelligent in how it schedules queries."),(0,a.yg)("p",null,"When a query arrives at the VAST server, VAST first goes to the catalog which\nreturns a set of on-disk candidate partitions that the query may be applicable\nto. Previous versions of VAST simply iterated through the available queries as\nthey came in, loading partition by partition to extract events. Due to memory\nconstraints, VAST is only able to keep some partitions in memory, which causes\nfrequent loading and unloading of the same partitions for queries that access\nthe same data. Now, VAST loads partitions depending on how many queries they are\nrelevant for and evaluates all ongoing queries for one partition at a time."),(0,a.yg)("p",null,"Additionally, VAST now partitions the data for each schema separately, moving\naway from partitions that contain events of multiple schemas. This helps with\ncommon access patterns and speeds up queries restricted to a single schema."),(0,a.yg)("p",null,"The numbers speak for themselves:"),(0,a.yg)("p",null,(0,a.yg)("img",{alt:"Benchmarks",src:t(46590).A+"#gh-light-mode-only",width:"3000",height:"2100"}),"\n",(0,a.yg)("img",{alt:"Benchmarks",src:t(11604).A+"#gh-dark-mode-only",width:"3000",height:"2100"})),(0,a.yg)("h2",d({},{id:"updates-to-aging-compaction-and-the-disk-monitor"}),"Updates to Aging, Compaction, and the Disk Monitor"),(0,a.yg)("p",null,"VAST v1.0 deprecated the experimental aging feature. Given popular demand we've\ndecided to un-deprecate it and to actually implement it on top of the same\nbuilding blocks the new compaction mechanism uses, which means that it is now\nfully working and no longer considered experimental."),(0,a.yg)("p",null,'The compaction plugin is now able to apply general time-based compactions that\nare not restricted to a specific set of types. This makes it possible for\noperators to implement rules like "delete all data after 1 week", without having\nto list all possible data types that may occur.'),(0,a.yg)("p",null,"Some smaller interface changes improve the observability of the compactor for\noperators: The  ",(0,a.yg)("inlineCode",{parentName:"p"},"vast compaction status")," command prints the current compaction\nstatus, and the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast compaction list")," command now lists all configured\ncompaction rules of the VAST node."),(0,a.yg)("p",null,"Additionally, we've improved overall stability and fault tolerance improvements\nsurrounding the disk monitor and compaction features."),(0,a.yg)("h2",d({},{id:"fine-tuned-catalog-configuration"}),"Fine-tuned Catalog Configuration"),(0,a.yg)("admonition",d({},{title:"Advanced Users",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"This section is for advanced users only.")),(0,a.yg)("p",null,"The catalog manages partition metadata and is responsible for deciding whether a\npartition qualifies for a certain query. It does so by maintaining sketch data\nstructures (e.g., Bloom filters, summary statistics) for each partition.\nSketches are highly space-efficient at the cost of being probabilistic and\nyielding false positives."),(0,a.yg)("p",null,"Due to this characteristic, sketches can grow sublinear: doubling the number of\nevents in a sketch does not lead to a doubling of the memory requirement.\nBecause the catalog must be traversed in full for a given query it needs to be\nmaintained in active memory to provide high responsiveness."),(0,a.yg)("p",null,"A false positive can have substantial impact on the query latency by\nmaterializing irrelevant partitions, which involves unnecessary I/O. Based on\nthe cost of I/O, this penalty may be substantial. Conversely, reducing the false\npositive rate increases the memory consumption, leading to a higher resident set\nsize and larger RAM requirements."),(0,a.yg)("p",null,"You can control this space-time trade-off in the configuration section\n",(0,a.yg)("inlineCode",{parentName:"p"},"vast.index")," by specifying index rules. Each rule corresponds to one sketch and\nconsists of the following components:"),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"targets"),": a list of extractors to describe the set of fields whose values to\nadd to the sketch. ",(0,a.yg)("inlineCode",{parentName:"p"},"fp-rate"),": an optional value to control the false-positive\nrate of the sketch."),(0,a.yg)("p",null,"VAST does not create field-level sketches unless a dedicated rule with a\nmatching target configuration exists. Here's an example:"),(0,a.yg)("pre",null,(0,a.yg)("code",d({parentName:"pre"},{className:"language-yaml"}),"vast:\n  index:\n    rules:\n      - targets:\n          # field synopses: need to specify fully qualified field name\n          - suricata.http.http.url\n        fp-rate: 0.005\n      - targets:\n          - :ip\n        fp-rate: 0.1\n")),(0,a.yg)("p",null,"This configuration includes two rules (= two sketches), where the first rule\nincludes a field extractor and the second a type extractor. The first rule\napplies to a single field, ",(0,a.yg)("inlineCode",{parentName:"p"},"suricata.http.http.url"),", and has a false-positive\nrate of 0.5%. The second rule creates one sketch for all fields of type ",(0,a.yg)("inlineCode",{parentName:"p"},"addr"),"\nthat has a false-positive rate of 10%."),(0,a.yg)("h2",d({},{id:"configuring-vast-with-environment-variables"}),"Configuring VAST with Environment Variables"),(0,a.yg)("p",null,"VAST now offers an additional configuration path besides editing YAML\nconfiguration files and providing command line arguments: ",(0,a.yg)("em",{parentName:"p"},"setting environment\nvariables"),". This enables a convenient configuration experience when using\ncontainer runtimes, such as Docker, where the other two configuration paths have\na mediocre UX at best:"),(0,a.yg)("p",null,"The container entry point is limited to adding command line arguments, where not\nall options may be set. For Docker Compose and Kubernetes, it is often not\ntrivially possible to even add command line arguments."),(0,a.yg)("p",null,"Providing a manual configuration file is a heavy-weight action, because it\nrequires (1) generating a potentially templated configuration file, and (2)\nmounting that file into a location where VAST would read it."),(0,a.yg)("p",null,"An environment variable has the form ",(0,a.yg)("inlineCode",{parentName:"p"},"KEY=VALUE"),". VAST processes only\nenvironment variables having the form ",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_{KEY}=VALUE"),". For example,\n",(0,a.yg)("inlineCode",{parentName:"p"},"VAST_ENDPOINT=1.2.3.4")," translates to the command line option\n",(0,a.yg)("inlineCode",{parentName:"p"},"--endpoint=1.2.3.4")," and YAML configuration ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.endpoint: 1.2.3.4"),"."),(0,a.yg)("p",null,"Regarding precedence, environment variables override configuration file\nsettings, and command line arguments override environment variables. Please\nconsult the documentation for a more detailed explanation of how to specify keys\nand values."),(0,a.yg)("h2",d({},{id:"vlan-tag-extraction-and-better-packet-decapsulation"}),"VLAN Tag Extraction and Better Packet Decapsulation"),(0,a.yg)("p",null,"VAST now extracts ",(0,a.yg)("a",d({parentName:"p"},{href:"https://en.wikipedia.org/wiki/IEEE_802.1Q"}),"802.1Q VLAN tags"),"\nfrom packets, making it possible to filter packets based on VLAN ID. The packet\nschema includes a new nested record ",(0,a.yg)("inlineCode",{parentName:"p"},"vlan")," with two fields: ",(0,a.yg)("inlineCode",{parentName:"p"},"outer")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"inner"),"\nto represent the respective VLAN ID. For example, you can generate PCAP traces\nof packets based on VLAN IDs as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",d({parentName:"pre"},{className:"language-bash"}),"vast export pcap 'vlan.outer > 0 || vlan.inner in [1, 2, 3]' | tcpdump -r - -nl\n")),(0,a.yg)("p",null,"VLAN tags occur in many variations, and VAST extracts them in case of\nsingle-tagging and  ",(0,a.yg)("a",d({parentName:"p"},{href:"https://en.wikipedia.org/wiki/IEEE_802.1ad"}),"QinQ\ndouble-tagging"),". Consult the PCAP\ndocumentation for details on this feature."),(0,a.yg)("p",null,"Internally, the packet decapsulation logic has been rewritten to follow a\nlayered approach: frames, packets, and segments are the building blocks. The\nplan is to reuse this architecture when switching to kernel-bypass packet\nacquisition using DPDK. If you would like to see more work on the front of\nhigh-performance packet recording, please reach out."),(0,a.yg)("h2",d({},{id:"breaking-changes"}),"Breaking Changes"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--verbosity")," command-line option is now called ",(0,a.yg)("inlineCode",{parentName:"p"},"--console-verbosity"),". The\nshorthand options ",(0,a.yg)("inlineCode",{parentName:"p"},"-v"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-vv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-vvv"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-q"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"-qq"),", and  ",(0,a.yg)("inlineCode",{parentName:"p"},"-qqq"),"  are unchanged.\nThis aligns the command-line option with the configuration option\n",(0,a.yg)("inlineCode",{parentName:"p"},"vast.console-verbosity"),", and disambiguates from the ",(0,a.yg)("inlineCode",{parentName:"p"},"vast.file-verbosity"),"\noption."),(0,a.yg)("p",null,"The ",(0,a.yg)("em",{parentName:"p"},"Meta Index")," is now called the ",(0,a.yg)("em",{parentName:"p"},"Catalog"),". This affects multiple status and\nmetrics keys. We plan to extend the functionality of the Catalog in a future\nrelease, turning it into a more powerful first instance for lookups."),(0,a.yg)("p",null,"Transform steps that add or modify columns now add or modify the columns\nin-place rather than at the end, preserving the nesting structure of the\noriginal data."),(0,a.yg)("h2",d({},{id:"changes-for-developers"}),"Changes for Developers"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"vast get")," command no longer exists. The command allowed for retrieving\nevents by their internal unique ID, which we are looking to remove entirely in\nthe future."),(0,a.yg)("p",null,"Changes to the internal data representation of VAST require all transform step\nplugins to be updated. The output format of the vast export arrow command\nchanged for the address, subnet, pattern, and enumeration types, which are now\nmodeled as ",(0,a.yg)("a",d({parentName:"p"},{href:"https://arrow.apache.org/docs/format/Columnar.html#extension-types"}),"Arrow Extension\nTypes"),". The\nrecord type is no longer flattened. The mapping of VAST types to Apache Arrow\ndata types  is now considered stable."),(0,a.yg)("h2",d({},{id:"smaller-things"}),"Smaller Things"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"VAST client commands now start much faster and use less memory."),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("inlineCode",{parentName:"li"},"vast count --estimate '<query>'")," feature no longer unnecessarily causes\nstores to load from disk, resulting in major speedups for larger databases and\nbroad queries."),(0,a.yg)("li",{parentName:"ul"},"The ",(0,a.yg)("a",d({parentName:"li"},{href:"https://github.com/tenzir/vast"}),"tenzir/vast")," repository now contains\nexperimental Terraform scripts for deploying VAST to AWS Fargate and Lambda.")))}k.isMDXComponent=!0},11604:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/scheduler-dark-494294caab31783eaf51c54055597463.png"},46590:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/scheduler-light-a41d3be0b89de1169e9d96fd5d927da1.png"}}]);