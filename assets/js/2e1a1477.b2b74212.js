"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22035],{15680:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>m});var r=n(96540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=r.createContext({}),l=function(e){var a=r.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},y=function(e){var a=l(e.components);return r.createElement(i.Provider,{value:a},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},g=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,y=p(e,["components","mdxType","originalType","parentName"]),d=l(n),g=t,m=d["".concat(i,".").concat(g)]||d[g]||c[g]||o;return n?r.createElement(m,s(s({ref:a},y),{},{components:n})):r.createElement(m,s({ref:a},y))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,s=new Array(o);s[0]=g;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[d]="string"==typeof e?e:t,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},64243:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>b,contentTitle:()=>u,default:()=>O,frontMatter:()=>m,metadata:()=>f,toc:()=>N});var r=n(15680),t=Object.defineProperty,o=Object.defineProperties,s=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,y=(e,a,n)=>a in e?t(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,d=(e,a)=>{for(var n in a||(a={}))i.call(a,n)&&y(e,n,a[n]);if(p)for(var n of p(a))l.call(a,n)&&y(e,n,a[n]);return e},c=(e,a)=>o(e,s(a)),g=(e,a)=>{var n={};for(var r in e)i.call(e,r)&&a.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))a.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const m={sidebar_position:4},u="User-Defined Operators",f={unversionedId:"language/user-defined-operators",id:"version-v4.23/language/user-defined-operators",title:"User-Defined Operators",description:"Operator Aliases",source:"@site/versioned_docs/version-v4.23/language/user-defined-operators.md",sourceDirName:"language",slug:"/language/user-defined-operators",permalink:"/language/user-defined-operators",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.23/language/user-defined-operators.md",tags:[],version:"v4.23",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"Expressions",permalink:"/language/expressions"},next:{title:"Operator Modifiers",permalink:"/language/operator-modifiers"}},b={},N=[{value:"Operator Aliases",id:"operator-aliases",level:2},{value:"Operator Plugins",id:"operator-plugins",level:2}],v={toc:N},h="wrapper";function O(e){var a=e,{components:n}=a,t=g(a,["components"]);return(0,r.yg)(h,c(d(d({},v),t),{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",d({},{id:"user-defined-operators"}),"User-Defined Operators"),(0,r.yg)("h2",d({},{id:"operator-aliases"}),"Operator Aliases"),(0,r.yg)("p",null,"User-defined operator aliases make pipelines easier to use by enabling users to\nencapsulate pipelines into a new operator."),(0,r.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,r.yg)("figcaption",d({parentName:"figure"},{"data-rehype-pretty-code-title":"","data-language":"yaml","data-theme":"github-dark-default"}),"tenzir.yaml"),(0,r.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,r.yg)("code",d({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),"tenzir"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),"  operators"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#8B949E"}}),"    # Aggregate suricata.flow events with matching source and destination IP")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#8B949E"}}),"    # addresses.")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),"    summarize-flows"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"      where"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#8B949E"}}),' #schema == "suricata.flow"')),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"      |"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FFA198",fontStyle:"italic"}})," summarize")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          pkts_toserver=sum(flow.pkts_toserver),")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          pkts_toclient=sum(flow.pkts_toclient),")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          bytes_toserver=sum(flow.bytes_toserver),")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          bytes_toclient=sum(flow.bytes_toclient),")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          start=min(flow.start),")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          end=max(flow.end)")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"        by")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          src_ip,")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),"          dest_ip"))))),(0,r.yg)("p",null,"This custom ",(0,r.yg)("inlineCode",{parentName:"p"},"summarize-flows")," operator can now be used in all pipeline\ndefinitions. For example:"),(0,r.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,r.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"c","data-theme":"github-dark-default"}),(0,r.yg)("code",d({parentName:"pre"},{"data-language":"c","data-theme":"github-dark-default",style:{display:"grid"}}),(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#8B949E"}}),"/* Write all summarized suricata.flow events to stdout as JSON */")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"from file path"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"/"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"to"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"/"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"eve.json read suricata")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"|"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," summarize"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"-"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"flows")),"\n",(0,r.yg)("span",d({parentName:"code"},{"data-line":""}),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"|"),(0,r.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," write json"))))),(0,r.yg)("admonition",d({},{title:"Avoid Recursion",type:"tip"}),(0,r.yg)("p",{parentName:"admonition"},"User-defined operators may not reference themselves, but may reference other\nuser-defined operators. Attempting to use a recursively defined operator in a\npipeline will fail with an error.")),(0,r.yg)("h2",d({},{id:"operator-plugins"}),"Operator Plugins"),(0,r.yg)("p",null,"In addition to aliases, developers can add additional operators to Tenzir by\nusing the ",(0,r.yg)("a",d({parentName:"p"},{href:"/architecture/plugins#operator"}),"operator plugin API"),".\nThis allows for writing arbitrarily complex operators in C++ by developing\nagainst ",(0,r.yg)("inlineCode",{parentName:"p"},"libtenzir"),"."),(0,r.yg)("p",null,"If you want to learn more about building your own operators, we recommend\nstudying ",(0,r.yg)("a",d({parentName:"p"},{href:"https://github.com/tenzir/tenzir/tree/main/libtenzir/builtins/operators"}),"Tenzir's built-in operators"),", which are developed\nagainst the same API."))}O.isMDXComponent=!0}}]);