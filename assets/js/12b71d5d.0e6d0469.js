"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3603],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(t),c=a,m=u["".concat(l,".").concat(c)]||u[c]||y[c]||o;return t?r.createElement(m,i(i({ref:n},d),{},{components:t})):r.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=c;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},60949:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>g,default:()=>C,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var r=t(15680),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))l.call(n,t)&&d(e,t,n[t]);if(s)for(var t of s(n))p.call(n,t)&&d(e,t,n[t]);return e},y=(e,n)=>o(e,i(n)),c=(e,n)=>{var t={};for(var r in e)l.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&s)for(var r of s(e))n.indexOf(r)<0&&p.call(e,r)&&(t[r]=e[r]);return t};const m={sidebar_custom_props:{format:{parser:!0}}},g="kv",f={unversionedId:"formats/kv",id:"version-v4.21/formats/kv",title:"kv",description:"Reads key-value pairs by splitting strings based on regular expressions.",source:"@site/versioned_docs/version-v4.21/formats/kv.md",sourceDirName:"formats",slug:"/formats/kv",permalink:"/formats/kv",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.21/formats/kv.md",tags:[],version:"v4.21",frontMatter:{sidebar_custom_props:{format:{parser:!0}}},sidebar:"docsSidebar",previous:{title:"json",permalink:"/formats/json"},next:{title:"leef",permalink:"/formats/leef"}},h={},v=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Quoted Values",id:"quoted-values",level:3},{value:"<code>&lt;field_split&gt;</code>",id:"field_split",level:3},{value:"<code>&lt;value_split&gt;</code>",id:"value_split",level:3},{value:"Common Options (Parser)",id:"common-options-parser",level:3},{value:"Examples",id:"examples",level:2}],b={toc:v},N="wrapper";function C(e){var n=e,{components:t}=n,a=c(n,["components"]);return(0,r.yg)(N,y(u(u({},b),a),{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",u({},{id:"kv"}),"kv"),(0,r.yg)("p",null,"Reads key-value pairs by splitting strings based on regular expressions."),(0,r.yg)("h2",u({},{id:"synopsis"}),"Synopsis"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{}),"kv [<field_split>] [<value_split>]\n   [--schema <schema>] [--selector <selector>] [--schema-only]\n   [--merge] [--raw] [--unnest-separator <nested-key-separator>]\n")),(0,r.yg)("h2",u({},{id:"description"}),"Description"),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"kv")," parser is usually used with the ",(0,r.yg)("a",u({parentName:"p"},{href:"/operators/parse"}),(0,r.yg)("inlineCode",{parentName:"a"},"parse")),"\noperator to extract key-value pairs from a given string, in particular if the\nkeys are not known before."),(0,r.yg)("p",null,"Incoming strings are first split into fields according to ",(0,r.yg)("inlineCode",{parentName:"p"},"<field_split>"),". This\ncan be a regular expression. For example, the input ",(0,r.yg)("inlineCode",{parentName:"p"},"foo: bar, baz: 42")," can be\nsplit into ",(0,r.yg)("inlineCode",{parentName:"p"},"foo: bar")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"baz: 42")," with the ",(0,r.yg)("inlineCode",{parentName:"p"},'",\\s*"')," (a comma, followed by any\namount of whitespace) as the field splitter. Note that the matched separators\nare removed when splitting a string."),(0,r.yg)("p",null,"Afterwards, the extracted fields are split into their key and value by\n",(0,r.yg)("inlineCode",{parentName:"p"},"<value_split>"),", which can again be a regular expression. In our example,\n",(0,r.yg)("inlineCode",{parentName:"p"},'":\\s*"')," could be used to split ",(0,r.yg)("inlineCode",{parentName:"p"},"foo: bar")," into the key ",(0,r.yg)("inlineCode",{parentName:"p"},"foo")," and its value\n",(0,r.yg)("inlineCode",{parentName:"p"},"bar"),", and similarly ",(0,r.yg)("inlineCode",{parentName:"p"},"baz: 42")," into ",(0,r.yg)("inlineCode",{parentName:"p"},"baz")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"42"),". The result would thus be\n",(0,r.yg)("inlineCode",{parentName:"p"},'{"foo": "bar", "baz": 42}'),". If the regex matches multiple substrings, only the\nfirst match is used."),(0,r.yg)("p",null,"The supported regular expression syntax is\n",(0,r.yg)("a",u({parentName:"p"},{href:"https://github.com/google/re2/wiki/Syntax"}),"RE2"),". In particular, this means that\nlookahead ",(0,r.yg)("inlineCode",{parentName:"p"},"(?=...)")," and lookbehind ",(0,r.yg)("inlineCode",{parentName:"p"},"(?<=...)")," are not supported by ",(0,r.yg)("inlineCode",{parentName:"p"},"kv")," at\nthe moment. However, if the regular expression has a capture group, it is assumed\nthat only the content of the capture group shall be used as the separator. This\nmeans that unsupported regular expressions such as ",(0,r.yg)("inlineCode",{parentName:"p"},"(?=foo)bar(?<=baz)")," can be\neffectively expressed as ",(0,r.yg)("inlineCode",{parentName:"p"},"foo(bar)baz")," instead."),(0,r.yg)("h3",u({},{id:"quoted-values"}),"Quoted Values"),(0,r.yg)("p",null,"The parser is aware of double-quotes (",(0,r.yg)("inlineCode",{parentName:"p"},'"'),"). If the ",(0,r.yg)("inlineCode",{parentName:"p"},"<field_split>")," or\n",(0,r.yg)("inlineCode",{parentName:"p"},"<value_split>")," are found within enclosing quotes, they are not considered matches."),(0,r.yg)("p",null,"This means that both the key and the value may be enclosed in double-quotes."),(0,r.yg)("p",null,"For example, given ",(0,r.yg)("inlineCode",{parentName:"p"},"\\s*,\\s*")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"="),", the input"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{}),'"key"="nested = value",key2="value, and more"\n')),(0,r.yg)("p",null,"will parse as"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{className:"language-json"}),'{\n  "key" : "nested = value"\n}\n{\n  "key2" : "value, and more"\n}\n')),(0,r.yg)("h3",u({},{id:"field_split"}),(0,r.yg)("inlineCode",{parentName:"h3"},"<field_split>")),(0,r.yg)("p",null,"The regular expression used to separate individual fields. The default is ",(0,r.yg)("inlineCode",{parentName:"p"},"\\s"),"."),(0,r.yg)("h3",u({},{id:"value_split"}),(0,r.yg)("inlineCode",{parentName:"h3"},"<value_split>")),(0,r.yg)("p",null,"The regular expression used to separate a key from its value. The default is ",(0,r.yg)("inlineCode",{parentName:"p"},"="),"."),(0,r.yg)("h3",u({},{id:"common-options-parser"}),"Common Options (Parser)"),(0,r.yg)("p",null,"The XSV parser supports the common ",(0,r.yg)("a",u({parentName:"p"},{href:"/formats#parser-schema-inference"}),"schema inference options"),"."),(0,r.yg)("h2",u({},{id:"examples"}),"Examples"),(0,r.yg)("p",null,"Extract comma-separated key-value pairs from ",(0,r.yg)("inlineCode",{parentName:"p"},"foo:1, bar:2,baz:3 , qux:4"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{}),'kv "\\s*,\\s*" ":"\n')),(0,r.yg)("p",null,"Extract key-value pairs from strings such as ",(0,r.yg)("inlineCode",{parentName:"p"},"FOO: C:\\foo BAR_BAZ: hello world"),".\nThis requires lookahead because the fields are separated by whitespace, but not\nevery whitespace acts as a field separator. Instead, we only want to split if\nthe whitespace is followed by ",(0,r.yg)("inlineCode",{parentName:"p"},"[A-Z][A-Z_]+:"),", i.e., at least two uppercase\ncharacters followed by a colon. We can express this as ",(0,r.yg)("inlineCode",{parentName:"p"},'"(\\s+)[A-Z][A-Z_]+:"'),",\nwhich yields ",(0,r.yg)("inlineCode",{parentName:"p"},"FOO: C:\\foo")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"BAR_BAZ: hello world"),". We then split the key\nfrom its value with ",(0,r.yg)("inlineCode",{parentName:"p"},'":\\s*"')," (only the first match is used to split them). The\nfinal result is thus ",(0,r.yg)("inlineCode",{parentName:"p"},'{"FOO": "C:\\foo", "BAR_BAZ": "hello world"}'),"."),(0,r.yg)("pre",null,(0,r.yg)("code",u({parentName:"pre"},{}),'kv "(\\s+)[A-Z][A-Z_]+:" ":\\s*"\n')))}C.isMDXComponent=!0}}]);