"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[58577],{15680:(e,r,t)=>{t.d(r,{xA:()=>d,yg:()=>m});var n=t(96540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),l=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(p.Provider,{value:r},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},y=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(t),y=o,m=c["".concat(p,".").concat(y)]||c[y]||u[y]||i;return t?n.createElement(m,a(a({ref:r},d),{},{components:t})):n.createElement(m,a({ref:r},d))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=y;var s={};for(var p in r)hasOwnProperty.call(r,p)&&(s[p]=r[p]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},97266:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>h,contentTitle:()=>f,default:()=>w,frontMatter:()=>m,metadata:()=>g,toc:()=>v});var n=t(15680),o=Object.defineProperty,i=Object.defineProperties,a=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,r,t)=>r in e?o(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,c=(e,r)=>{for(var t in r||(r={}))p.call(r,t)&&d(e,t,r[t]);if(s)for(var t of s(r))l.call(r,t)&&d(e,t,r[t]);return e},u=(e,r)=>i(e,a(r)),y=(e,r)=>{var t={};for(var n in e)p.call(e,n)&&r.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&s)for(var n of s(e))r.indexOf(n)<0&&l.call(e,n)&&(t[n]=e[n]);return t};const m={sidebar_custom_props:{operator:{transformation:!0}}},f="pseudonymize",g={unversionedId:"operators/pseudonymize",id:"version-v4.24/operators/pseudonymize",title:"pseudonymize",description:"Pseudonymizes fields according to a given method.",source:"@site/versioned_docs/version-v4.24/operators/pseudonymize.md",sourceDirName:"operators",slug:"/operators/pseudonymize",permalink:"/operators/pseudonymize",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.24/operators/pseudonymize.md",tags:[],version:"v4.24",frontMatter:{sidebar_custom_props:{operator:{transformation:!0}}},sidebar:"docsSidebar",previous:{title:"processes",permalink:"/operators/processes"},next:{title:"publish",permalink:"/operators/publish"}},h={},v=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>-m|--method=&lt;string&gt;</code>",id:"-m--methodstring",level:3},{value:"<code>-s|--seed=&lt;seed&gt;</code>",id:"-s--seedseed",level:3},{value:"<code>&lt;extractor&gt;...</code>",id:"extractor",level:3},{value:"Example",id:"example",level:2}],b={toc:v},O="wrapper";function w(e){var r=e,{components:t}=r,o=y(r,["components"]);return(0,n.yg)(O,u(c(c({},b),o),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",c({},{id:"pseudonymize"}),"pseudonymize"),(0,n.yg)("p",null,"Pseudonymizes fields according to a given method."),(0,n.yg)("admonition",c({},{title:"Deprecated",type:"warning"}),(0,n.yg)("p",{parentName:"admonition"},"This operator will soon be removed in favor of first-class support for functions\nthat can be used in a variety of different operators and contexts.")),(0,n.yg)("h2",c({},{id:"synopsis"}),"Synopsis"),(0,n.yg)("pre",null,(0,n.yg)("code",c({parentName:"pre"},{}),"pseudonymize -m|--method=<string> -s|--seed=<seed> <extractor>...\n")),(0,n.yg)("h2",c({},{id:"description"}),"Description"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"pseudonimize")," operator replaces IP address using the\n",(0,n.yg)("a",c({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Crypto-PAn"}),"Crypto-PAn")," algorithm."),(0,n.yg)("p",null,"Currently, ",(0,n.yg)("inlineCode",{parentName:"p"},"pseudonimize")," exclusively works for fields of type ",(0,n.yg)("inlineCode",{parentName:"p"},"ip"),"."),(0,n.yg)("h3",c({},{id:"-m--methodstring"}),(0,n.yg)("inlineCode",{parentName:"h3"},"-m|--method=<string>")),(0,n.yg)("p",null,"The algorithm for pseudonimization"),(0,n.yg)("h3",c({},{id:"-s--seedseed"}),(0,n.yg)("inlineCode",{parentName:"h3"},"-s|--seed=<seed>")),(0,n.yg)("p",null,"A 64-byte seed that describes a hexadecimal value. When the seed is shorter than\n64 bytes, the operator will append zeros to match the size; when it is longer,\nit will truncate the seed."),(0,n.yg)("h3",c({},{id:"extractor"}),(0,n.yg)("inlineCode",{parentName:"h3"},"<extractor>...")),(0,n.yg)("p",null,"The list of extractors describing fields to pseudonomize. If an extractor\nmatches types other than IP addresses, the operator will ignore them."),(0,n.yg)("h2",c({},{id:"example"}),"Example"),(0,n.yg)("p",null,"Pseudonymize all values of the fields ",(0,n.yg)("inlineCode",{parentName:"p"},"src_ip")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"dest_ip")," using the\n",(0,n.yg)("inlineCode",{parentName:"p"},"crypto-pan")," algorithm and ",(0,n.yg)("inlineCode",{parentName:"p"},"deadbeef")," seed:"),(0,n.yg)("pre",null,(0,n.yg)("code",c({parentName:"pre"},{}),'pseudonymize --method="crypto-pan" --seed="deadbeef" src_ip, dest_ip\n')))}w.isMDXComponent=!0}}]);