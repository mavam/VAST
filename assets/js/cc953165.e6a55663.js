"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[92748],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>m});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(t),c=r,m=u["".concat(s,".").concat(c)]||u[c]||y[c]||i;return t?a.createElement(m,o(o({ref:n},d),{},{components:t})):a.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},12690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>g,default:()=>w,frontMatter:()=>m,metadata:()=>f,toc:()=>v});var a=t(15680),r=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,u=(e,n)=>{for(var t in n||(n={}))s.call(n,t)&&d(e,t,n[t]);if(l)for(var t of l(n))p.call(n,t)&&d(e,t,n[t]);return e},y=(e,n)=>i(e,o(n)),c=(e,n)=>{var t={};for(var a in e)s.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&l)for(var a of l(e))n.indexOf(a)<0&&p.call(e,a)&&(t[a]=e[a]);return t};const m={sidebar_custom_props:{format:{parser:!0}}},g="kv",f={unversionedId:"formats/kv",id:"formats/kv",title:"kv",description:"Reads key-value pairs by splitting strings based on regular expressions.",source:"@site/docs/formats/kv.md",sourceDirName:"formats",slug:"/formats/kv",permalink:"/next/formats/kv",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/formats/kv.md",tags:[],version:"current",frontMatter:{sidebar_custom_props:{format:{parser:!0}}},sidebar:"docsSidebar",previous:{title:"json",permalink:"/next/formats/json"},next:{title:"leef",permalink:"/next/formats/leef"}},h={},v=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"Quoted Values",id:"quoted-values",level:3},{value:"<code>&lt;field_split&gt;</code>",id:"field_split",level:3},{value:"<code>&lt;value_split&gt;</code>",id:"value_split",level:3},{value:"Examples",id:"examples",level:2}],b={toc:v},N="wrapper";function w(e){var n=e,{components:t}=n,r=c(n,["components"]);return(0,a.yg)(N,y(u(u({},b),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",u({},{id:"kv"}),"kv"),(0,a.yg)("p",null,"Reads key-value pairs by splitting strings based on regular expressions."),(0,a.yg)("h2",u({},{id:"synopsis"}),"Synopsis"),(0,a.yg)("pre",null,(0,a.yg)("code",u({parentName:"pre"},{}),"kv <field_split> <value_split>\n")),(0,a.yg)("h2",u({},{id:"description"}),"Description"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"kv")," parser is usually used with the ",(0,a.yg)("a",u({parentName:"p"},{href:"/next/operators/parse"}),(0,a.yg)("inlineCode",{parentName:"a"},"parse")),"\noperator to extract key-value pairs from a given string, in particular if the\nkeys are not known before."),(0,a.yg)("p",null,"Incoming strings are first split into fields according to ",(0,a.yg)("inlineCode",{parentName:"p"},"<field_split>"),". This\ncan be a regular expression. For example, the input ",(0,a.yg)("inlineCode",{parentName:"p"},"foo: bar, baz: 42")," can be\nsplit into ",(0,a.yg)("inlineCode",{parentName:"p"},"foo: bar")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"baz: 42")," with the ",(0,a.yg)("inlineCode",{parentName:"p"},'",\\s*"')," (a comma, followed by any\namount of whitespace) as the field splitter. Note that the matched separators\nare removed when splitting a string."),(0,a.yg)("p",null,"Afterwards, the extracted fields are split into their key and value by\n",(0,a.yg)("inlineCode",{parentName:"p"},"<value_split>"),", which can again be a regular expression. In our example,\n",(0,a.yg)("inlineCode",{parentName:"p"},'":\\s*"')," could be used to split ",(0,a.yg)("inlineCode",{parentName:"p"},"foo: bar")," into the key ",(0,a.yg)("inlineCode",{parentName:"p"},"foo")," and its value\n",(0,a.yg)("inlineCode",{parentName:"p"},"bar"),", and similarly ",(0,a.yg)("inlineCode",{parentName:"p"},"baz: 42")," into ",(0,a.yg)("inlineCode",{parentName:"p"},"baz")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"42"),". The result would thus be\n",(0,a.yg)("inlineCode",{parentName:"p"},'{"foo": "bar", "baz": 42}'),". If the regex matches multiple substrings, only the\nfirst match is used."),(0,a.yg)("p",null,"The supported regular expression syntax is\n",(0,a.yg)("a",u({parentName:"p"},{href:"https://github.com/google/re2/wiki/Syntax"}),"RE2"),". In particular, this means that\nlookahead ",(0,a.yg)("inlineCode",{parentName:"p"},"(?=...)")," and lookbehind ",(0,a.yg)("inlineCode",{parentName:"p"},"(?<=...)")," are not supported by ",(0,a.yg)("inlineCode",{parentName:"p"},"kv")," at\nthe moment. However, if the regular expression has a capture group, it is assumed\nthat only the content of the capture group shall be used as the separator. This\nmeans that unsupported regular expressions such as ",(0,a.yg)("inlineCode",{parentName:"p"},"(?=foo)bar(?<=baz)")," can be\neffectively expressed as ",(0,a.yg)("inlineCode",{parentName:"p"},"foo(bar)baz")," instead."),(0,a.yg)("h3",u({},{id:"quoted-values"}),"Quoted Values"),(0,a.yg)("p",null,"The parser is aware of double-quotes (",(0,a.yg)("inlineCode",{parentName:"p"},'"'),"). If the ",(0,a.yg)("inlineCode",{parentName:"p"},"<field_split>")," or\n",(0,a.yg)("inlineCode",{parentName:"p"},"<value_split>")," are found within enclosing quotes, they are not considered matches."),(0,a.yg)("p",null,"This means that both the key and the value may be enclosed in double-quotes."),(0,a.yg)("p",null,"For example, given ",(0,a.yg)("inlineCode",{parentName:"p"},"\\s*,\\s*")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"="),", the input"),(0,a.yg)("pre",null,(0,a.yg)("code",u({parentName:"pre"},{}),'"key"="nested = value",key2="value, and more"\n')),(0,a.yg)("p",null,"will parse as"),(0,a.yg)("pre",null,(0,a.yg)("code",u({parentName:"pre"},{className:"language-json"}),'{\n  "key" : "nested = value"\n}\n{\n  "key2" : "value, and more"\n}\n')),(0,a.yg)("h3",u({},{id:"field_split"}),(0,a.yg)("inlineCode",{parentName:"h3"},"<field_split>")),(0,a.yg)("p",null,"The regular expression used to separate individual fields."),(0,a.yg)("h3",u({},{id:"value_split"}),(0,a.yg)("inlineCode",{parentName:"h3"},"<value_split>")),(0,a.yg)("p",null,"The regular expression used to separate a key from its value."),(0,a.yg)("h2",u({},{id:"examples"}),"Examples"),(0,a.yg)("p",null,"Extract comma-separated key-value pairs from ",(0,a.yg)("inlineCode",{parentName:"p"},"foo:1, bar:2,baz:3 , qux:4"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",u({parentName:"pre"},{}),'kv "\\s*,\\s*" ":"\n')),(0,a.yg)("p",null,"Extract key-value pairs from strings such as ",(0,a.yg)("inlineCode",{parentName:"p"},"FOO: C:\\foo BAR_BAZ: hello world"),".\nThis requires lookahead because the fields are separated by whitespace, but not\nevery whitespace acts as a field separator. Instead, we only want to split if\nthe whitespace is followed by ",(0,a.yg)("inlineCode",{parentName:"p"},"[A-Z][A-Z_]+:"),", i.e., at least two uppercase\ncharacters followed by a colon. We can express this as ",(0,a.yg)("inlineCode",{parentName:"p"},'"(\\s+)[A-Z][A-Z_]+:"'),",\nwhich yields ",(0,a.yg)("inlineCode",{parentName:"p"},"FOO: C:\\foo")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"BAR_BAZ: hello world"),". We then split the key\nfrom its value with ",(0,a.yg)("inlineCode",{parentName:"p"},'":\\s*"')," (only the first match is used to split them). The\nfinal result is thus ",(0,a.yg)("inlineCode",{parentName:"p"},'{"FOO": "C:\\foo", "BAR_BAZ": "hello world"}'),"."),(0,a.yg)("pre",null,(0,a.yg)("code",u({parentName:"pre"},{}),'kv "(\\s+)[A-Z][A-Z_]+:" ":\\s*"\n')))}w.isMDXComponent=!0}}]);