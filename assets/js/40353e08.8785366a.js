"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[54187],{15680:(e,a,n)=>{n.d(a,{xA:()=>y,yg:()=>c});var t=n(96540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function p(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?p(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},p=Object.keys(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(t=0;t<p.length;t++)n=p[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),i=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},y=function(e){var a=i(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,p=e.originalType,l=e.parentName,y=s(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,c=d["".concat(l,".").concat(m)]||d[m]||g[m]||p;return n?t.createElement(c,o(o({ref:a},y),{},{components:n})):t.createElement(c,o({ref:a},y))}));function c(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var p=n.length,o=new Array(p);o[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<p;i++)o[i]=n[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78959:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>h,contentTitle:()=>u,default:()=>v,frontMatter:()=>c,metadata:()=>N,toc:()=>f});var t=n(15680),r=Object.defineProperty,p=Object.defineProperties,o=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,y=(e,a,n)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[a]=n,d=(e,a)=>{for(var n in a||(a={}))l.call(a,n)&&y(e,n,a[n]);if(s)for(var n of s(a))i.call(a,n)&&y(e,n,a[n]);return e},g=(e,a)=>p(e,o(a)),m=(e,a)=>{var n={};for(var t in e)l.call(e,t)&&a.indexOf(t)<0&&(n[t]=e[t]);if(null!=e&&s)for(var t of s(e))a.indexOf(t)<0&&i.call(e,t)&&(n[t]=e[t]);return n};const c={sidebar_custom_props:{format:{parser:!0,printer:!0}}},u="json",N={unversionedId:"formats/json",id:"version-v4.19/formats/json",title:"json",description:"Reads and writes JSON.",source:"@site/versioned_docs/version-v4.19/formats/json.md",sourceDirName:"formats",slug:"/formats/json",permalink:"/v4.19/formats/json",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.19/formats/json.md",tags:[],version:"v4.19",frontMatter:{sidebar_custom_props:{format:{parser:!0,printer:!0}}},sidebar:"docsSidebar",previous:{title:"grok",permalink:"/v4.19/formats/grok"},next:{title:"kv",permalink:"/v4.19/formats/kv"}},h={},f=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>--schema=&lt;schema&gt;</code> (Parser)",id:"--schemaschema-parser",level:3},{value:"<code>--selector=&lt;field[:prefix]&gt;</code> (Parser)",id:"--selectorfieldprefix-parser",level:3},{value:"<code>--no-infer</code> (Parser)",id:"--no-infer-parser",level:3},{value:"<code>--unnest-separator=&lt;string&gt;</code> (Parser)",id:"--unnest-separatorstring-parser",level:3},{value:"<code>--ndjson</code> (Parser)",id:"--ndjson-parser",level:3},{value:"<code>--precise</code> (Parser)",id:"--precise-parser",level:3},{value:"<code>--raw</code> (Parser)",id:"--raw-parser",level:3},{value:"<code>--arrays-of-objects</code> (Parser)",id:"--arrays-of-objects-parser",level:3},{value:"<code>--c|--compact-output</code> (Printer)",id:"--c--compact-output-printer",level:3},{value:"<code>--C|--color-output</code> (Printer)",id:"--c--color-output-printer",level:3},{value:"<code>--M|--monochrome-output</code> (Printer)",id:"--m--monochrome-output-printer",level:3},{value:"<code>--omit-nulls</code> (Printer)",id:"--omit-nulls-printer",level:3},{value:"<code>--omit-empty-objects</code> (Printer)",id:"--omit-empty-objects-printer",level:3},{value:"<code>--omit-empty-lists</code> (Printer)",id:"--omit-empty-lists-printer",level:3},{value:"<code>--omit-empty</code> (Printer)",id:"--omit-empty-printer",level:3},{value:"<code>--arrays-of-objects</code> (Printer)",id:"--arrays-of-objects-printer",level:3},{value:"Examples",id:"examples",level:2}],E={toc:f},b="wrapper";function v(e){var a=e,{components:n}=a,r=m(a,["components"]);return(0,t.yg)(b,g(d(d({},E),r),{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",d({},{id:"json"}),"json"),(0,t.yg)("p",null,"Reads and writes JSON."),(0,t.yg)("h2",d({},{id:"synopsis"}),"Synopsis"),(0,t.yg)("p",null,"Parser:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),"json [--schema <schema>] [--selector <field[:prefix]>] [--unnest-separator <string>]\n     [--no-infer] [--ndjson] [--precise] [--raw]\n     [--arrays-of-objects]\n")),(0,t.yg)("p",null,"Printer:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),"json [-c|--compact-output] [-C|--color-output] [-M|--monochrome-output]\n     [--omit-nulls] [--omit-empty-objects] [--omit-empty-lists] [--omit-empty]\n     [--arrays-of-objects]\n")),(0,t.yg)("h2",d({},{id:"description"}),"Description"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"json")," format provides a parser and printer for JSON and ",(0,t.yg)("a",d({parentName:"p"},{href:"https://en.wikipedia.org/wiki/JSON_streaming#Line-delimited_JSON"}),"line-delimited\nJSON")," objects."),(0,t.yg)("h3",d({},{id:"--schemaschema-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--schema=<schema>")," (Parser)"),(0,t.yg)("p",null,"Provide the name of a ",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/data-model/schemas"}),"schema")," to be used by the\nparser. If the schema uses the ",(0,t.yg)("inlineCode",{parentName:"p"},"blob")," type, then the JSON parser expects\nbase64-encoded strings."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"--schema")," option is incompatible with the ",(0,t.yg)("inlineCode",{parentName:"p"},"--selector")," option."),(0,t.yg)("h3",d({},{id:"--selectorfieldprefix-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--selector=<field[:prefix]>")," (Parser)"),(0,t.yg)("p",null,"Designates a field value as schema name with an optional dot-separated prefix."),(0,t.yg)("p",null,"For example, the ",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/formats/suricata"}),"Suricata EVE JSON")," format includes a field\n",(0,t.yg)("inlineCode",{parentName:"p"},"event_type")," that contains the event type. Setting the selector to\n",(0,t.yg)("inlineCode",{parentName:"p"},"event_type:suricata")," causes an event with the value ",(0,t.yg)("inlineCode",{parentName:"p"},"flow")," for the field\n",(0,t.yg)("inlineCode",{parentName:"p"},"event_type")," to map onto the schema ",(0,t.yg)("inlineCode",{parentName:"p"},"suricata.flow"),"."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"--selector")," option is incompatible with the ",(0,t.yg)("inlineCode",{parentName:"p"},"--schema")," option."),(0,t.yg)("h3",d({},{id:"--no-infer-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--no-infer")," (Parser)"),(0,t.yg)("p",null,"The JSON parser automatically infers types in the input JSON."),(0,t.yg)("p",null,"The flag ",(0,t.yg)("inlineCode",{parentName:"p"},"--no-infer")," toggles this behavior, and requires the user to provide an\ninput schema for the JSON to explicitly parse into, e.g., using the ",(0,t.yg)("inlineCode",{parentName:"p"},"--selector"),"\noption."),(0,t.yg)("p",null,"Schema inference happens on a best-effort basis, and is constantly being\nimproved to match Tenzir's type system."),(0,t.yg)("h3",d({},{id:"--unnest-separatorstring-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--unnest-separator=<string>")," (Parser)"),(0,t.yg)("p",null,"A delimiter that, if present in keys, causes values to be treated as values of\nnested records."),(0,t.yg)("p",null,"A popular example of this is the ",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/formats/zeek-json"}),"Zeek JSON")," format. It includes\nthe fields ",(0,t.yg)("inlineCode",{parentName:"p"},"id.orig_h"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"id.orig_p"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"id.resp_h"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"id.resp_p")," at the\ntop-level. The data is best modeled as an ",(0,t.yg)("inlineCode",{parentName:"p"},"id")," record with four nested fields\n",(0,t.yg)("inlineCode",{parentName:"p"},"orig_h"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"orig_p"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"resp_h"),", and ",(0,t.yg)("inlineCode",{parentName:"p"},"resp_p"),"."),(0,t.yg)("p",null,"Without an unnest separator, the data looks like this:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "id.orig_h"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"1.1.1.1"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "id.orig_p"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"10"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "id.resp_h"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"1.1.1.2"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "id.resp_p"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"5")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("p",null,"With the unnest separator set to ",(0,t.yg)("inlineCode",{parentName:"p"},"."),", Tenzir reads the events like this:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "id"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : {")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "orig_h"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"1.1.1.1"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "orig_p"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"10"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "resp_h"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"1.1.1.2"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "resp_p"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," : "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"5")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"  }")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("h3",d({},{id:"--ndjson-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--ndjson")," (Parser)"),(0,t.yg)("p",null,"Treat the input as newline-delimited JSON (NDJSON)."),(0,t.yg)("p",null,"NDJSON requires that exactly one event exists per line. This allows for better\nerror recovery in cases of malformed input, as unlike for the regular JSON\nparser malformed lines can be skipped."),(0,t.yg)("p",null,"Popular examples of NDJSON include the Suricata Eve JSON and the Zeek Streaming\nJSON formats. Tenzir supports ",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/formats/suricata"}),(0,t.yg)("inlineCode",{parentName:"a"},"suricata"))," and\n",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/formats/zeek-json"}),(0,t.yg)("inlineCode",{parentName:"a"},"zeek-json"))," parsers out of the box that utilize this mechanism."),(0,t.yg)("h3",d({},{id:"--precise-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--precise")," (Parser)"),(0,t.yg)("p",null,"Ensure that only fields that are actually present in the input are contained in\nthe returned events. Without this option, the input consisting of ",(0,t.yg)("inlineCode",{parentName:"p"},'{"a": 1}')," and\n",(0,t.yg)("inlineCode",{parentName:"p"},'{"b": 2}')," can be result in the events ",(0,t.yg)("inlineCode",{parentName:"p"},'{"a": 1, "b": null}')," and\n",(0,t.yg)("inlineCode",{parentName:"p"},'{"a": null, "b": 2}'),". With it, the output is ",(0,t.yg)("inlineCode",{parentName:"p"},'{"a": 1}')," and ",(0,t.yg)("inlineCode",{parentName:"p"},'{"b": 2}'),". For\nsome inputs and queries, this can be significantly more expensive."),(0,t.yg)("h3",d({},{id:"--raw-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--raw")," (Parser)"),(0,t.yg)("p",null,"Use only the raw JSON types. This means that all strings are parsed as ",(0,t.yg)("inlineCode",{parentName:"p"},"string"),",\nirrespective of whether they are a valid ",(0,t.yg)("inlineCode",{parentName:"p"},"ip"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"duration"),", etc. Also, since JSON\nonly has one generic number type, all numbers are parsed with the ",(0,t.yg)("inlineCode",{parentName:"p"},"double")," type."),(0,t.yg)("h3",d({},{id:"--arrays-of-objects-parser"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--arrays-of-objects")," (Parser)"),(0,t.yg)("p",null,"Parse arrays of objects, with every object in the outermost arrays resulting in\none event each. This is particularly useful when interfacing with REST APIs,\nwhich often yield large arrays of objects instead of newline-delimited JSON\nobjects."),(0,t.yg)("h3",d({},{id:"--c--compact-output-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--c|--compact-output")," (Printer)"),(0,t.yg)("p",null,"Switch to line-delimited JSON output (JSONL/NDJSON)."),(0,t.yg)("h3",d({},{id:"--c--color-output-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--C|--color-output")," (Printer)"),(0,t.yg)("p",null,"Colorize the output."),(0,t.yg)("p",null,"The option enables colorizing the output similar to ",(0,t.yg)("inlineCode",{parentName:"p"},"jq")," by emitting terminal\nescape sequences that represent colors."),(0,t.yg)("p",null,"Unlike ",(0,t.yg)("inlineCode",{parentName:"p"},"jq"),", coloring is currently opt-in. In the future, we will perform TTY\ndetection and colorize the output when write to stdout."),(0,t.yg)("p",null,"Tenzir honors the ",(0,t.yg)("a",d({parentName:"p"},{href:"https://no-color.org/"}),(0,t.yg)("inlineCode",{parentName:"a"},"NO_COLOR"))," environment variable and\nwon't colorize the output when the variable is present."),(0,t.yg)("h3",d({},{id:"--m--monochrome-output-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--M|--monochrome-output")," (Printer)"),(0,t.yg)("p",null,"Disables colored output."),(0,t.yg)("p",null,"This is currently the default. In the future, we will perform TTY detection and\ncolorize the output when write to stdout. Use this option today if you want to\navoid an implicit upgrade to colors in the future."),(0,t.yg)("h3",d({},{id:"--omit-nulls-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--omit-nulls")," (Printer)"),(0,t.yg)("p",null,"Strips ",(0,t.yg)("inlineCode",{parentName:"p"},"null")," fields from the output."),(0,t.yg)("p",null,"Example:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "a"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"null"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "b"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": ["),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"42"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),", "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"null"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),", "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"43"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"],")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "c"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "d"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"null"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "e"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"42")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"  }")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"--omit-nulls"),", this example becomes:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "b"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": ["),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"42"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),", "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"43"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"],")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "c"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "e"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"42")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"  }")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("h3",d({},{id:"--omit-empty-objects-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--omit-empty-objects")," (Printer)"),(0,t.yg)("p",null,"Strips empty objects from the output."),(0,t.yg)("p",null,"Example:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "w"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"null"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "x"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {},")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "y"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "z"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {}")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"  }")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"--omit-empty-objects"),", this example becomes:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "w"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"42"),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),",")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("h3",d({},{id:"--omit-empty-lists-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--omit-empty-lists")," (Printer)"),(0,t.yg)("p",null,"Strips empty lists from the output."),(0,t.yg)("p",null,"Example:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "m"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": [],")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "n"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {},")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "o"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'    "p"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": []")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"  }")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"--omit-empty-lists"),", this example becomes:"),(0,t.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,t.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"json","data-theme":"github-dark-default"}),(0,t.yg)("code",d({parentName:"pre"},{"data-language":"json","data-theme":"github-dark-default",style:{display:"grid"}}),(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"{")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "m"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {},")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#7EE787"}}),'  "o"'),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),": {}")),"\n",(0,t.yg)("span",d({parentName:"code"},{"data-line":""}),(0,t.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"}"))))),(0,t.yg)("h3",d({},{id:"--omit-empty-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--omit-empty")," (Printer)"),(0,t.yg)("p",null,"This options combines all other ",(0,t.yg)("inlineCode",{parentName:"p"},"--omit-*")," options."),(0,t.yg)("h3",d({},{id:"--arrays-of-objects-printer"}),(0,t.yg)("inlineCode",{parentName:"h3"},"--arrays-of-objects")," (Printer)"),(0,t.yg)("p",null,"Prints one array of objects per batch of events arriving at the printer as\nopposed to printing one object per event."),(0,t.yg)("p",null,"This is particularly useful when interfacing with REST APIs, which often require\nsets of events grouped into one JSON object."),(0,t.yg)("p",null,"Use the ",(0,t.yg)("a",d({parentName:"p"},{href:"/v4.19/operators/batch"}),(0,t.yg)("inlineCode",{parentName:"a"},"batch"))," operator to explicitly control how many\nevents get grouped together in the same array."),(0,t.yg)("p",null,"Example:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),'{\n  "foo": 1\n}\n{\n  "foo": 2\n}\n')),(0,t.yg)("p",null,"With ",(0,t.yg)("inlineCode",{parentName:"p"},"--arrays-of-objects"),", this example becomes:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),'[{\n  "foo": 1\n},\n{\n  "foo": 2\n}]\n')),(0,t.yg)("h2",d({},{id:"examples"}),"Examples"),(0,t.yg)("p",null,"Read JSON from stdin, either NDJSON or tree-structured:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),"read json\n")),(0,t.yg)("p",null,"Write JSON without empty fields to a file:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),"to file /tmp/result.json write json --omit-empty\n")),(0,t.yg)("p",null,"Print NDJSON to stdout:"),(0,t.yg)("pre",null,(0,t.yg)("code",d({parentName:"pre"},{}),"write json -c\n")))}v.isMDXComponent=!0}}]);