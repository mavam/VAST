"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10992],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>y});var t=r(96540);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,y=m["".concat(s,".").concat(d)]||m[d]||f[d]||a;return r?t.createElement(y,i(i({ref:n},c),{},{components:r})):t.createElement(y,i({ref:n},c))}));function y(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[m]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},87296:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>j,frontMatter:()=>y,metadata:()=>g,toc:()=>b});var t=r(15680),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,n,r)=>n in e?o(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r,m=(e,n)=>{for(var r in n||(n={}))s.call(n,r)&&c(e,r,n[r]);if(p)for(var r of p(n))l.call(n,r)&&c(e,r,n[r]);return e},f=(e,n)=>a(e,i(n)),d=(e,n)=>{var r={};for(var t in e)s.call(e,t)&&n.indexOf(t)<0&&(r[t]=e[t]);if(null!=e&&p)for(var t of p(e))n.indexOf(t)<0&&l.call(e,t)&&(r[t]=e[t]);return r};const y={sidebar_custom_props:{operator:{source:!0}}},u="from",g={unversionedId:"operators/from",id:"operators/from",title:"from",description:"Produces events by combining a connector and a format.",source:"@site/docs/operators/from.md",sourceDirName:"operators",slug:"/operators/from",permalink:"/next/operators/from",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/operators/from.md",tags:[],version:"current",frontMatter:{sidebar_custom_props:{operator:{source:!0}}},sidebar:"docsSidebar",previous:{title:"fluent-bit",permalink:"/next/operators/fluent-bit"},next:{title:"hash",permalink:"/next/operators/hash"}},h={},b=[{value:"Synopsis",id:"synopsis",level:2},{value:"Description",id:"description",level:2},{value:"<code>&lt;connector&gt;</code>",id:"connector",level:3},{value:"<code>&lt;format&gt;</code>",id:"format",level:3},{value:"Examples",id:"examples",level:2}],v={toc:b},N="wrapper";function j(e){var n=e,{components:r}=n,o=d(n,["components"]);return(0,t.yg)(N,f(m(m({},v),o),{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",m({},{id:"from"}),"from"),(0,t.yg)("p",null,"Produces events by combining a ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/connectors"}),"connector")," and a ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/formats"}),"format"),"."),(0,t.yg)("h2",m({},{id:"synopsis"}),"Synopsis"),(0,t.yg)("pre",null,(0,t.yg)("code",m({parentName:"pre"},{}),"from <url> [read <format>]\nfrom <path> [read <format>]\nfrom <connector> [read <format>]\n")),(0,t.yg)("h2",m({},{id:"description"}),"Description"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"from")," operator produces events at the beginning of a pipeline by bringing\ntogether a ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/connectors"}),"connector")," and a ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/formats"}),"format"),"."),(0,t.yg)("p",null,"If given something that looks like a path to a file, the connector can pick\nout a format automatically based on the file extension or the file name.\nThis enables a shorter syntax, e.g., ",(0,t.yg)("inlineCode",{parentName:"p"},"from https://example.com/file.yml"),"\nuses the ",(0,t.yg)("inlineCode",{parentName:"p"},"yaml")," format. All connectors also have a default format,\nwhich will be used if the format can't be determined by the path.\nFor most connectors, this default format is ",(0,t.yg)("inlineCode",{parentName:"p"},"json"),". So, for example,\n",(0,t.yg)("inlineCode",{parentName:"p"},"from stdin")," uses the ",(0,t.yg)("inlineCode",{parentName:"p"},"json")," format."),(0,t.yg)("p",null,"Additionally, if a file extension indicating compression can be found,\n",(0,t.yg)("a",m({parentName:"p"},{href:"/next/operators/decompress"}),(0,t.yg)("inlineCode",{parentName:"a"},"decompress"))," is automatically used.\nFor example, ",(0,t.yg)("inlineCode",{parentName:"p"},"from myfile.json.gz")," is automatically gzip-decompressed\nand parsed as json, i.e., ",(0,t.yg)("inlineCode",{parentName:"p"},"load myfile.json.gz | decompress gzip | read json"),"."),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"from")," operator is a pipeline under the hood. For most cases, it is equal to\n",(0,t.yg)("inlineCode",{parentName:"p"},"load <connector> | read <format>"),". However, for some combinations of\nconnectors and formats the underlying pipeline is a lot more complex. We\nrecommend always using ",(0,t.yg)("inlineCode",{parentName:"p"},"from ... read ...")," over the ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/operators/load"}),(0,t.yg)("inlineCode",{parentName:"a"},"load"))," and\n",(0,t.yg)("a",m({parentName:"p"},{href:"/next/operators/read"}),(0,t.yg)("inlineCode",{parentName:"a"},"read"))," operators."),(0,t.yg)("h3",m({},{id:"connector"}),(0,t.yg)("inlineCode",{parentName:"h3"},"<connector>")),(0,t.yg)("p",null,"The ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/connectors"}),"connector")," used to load bytes."),(0,t.yg)("p",null,"Some connectors have connector-specific options. Please refer to the\ndocumentation of the individual connectors for more information."),(0,t.yg)("h3",m({},{id:"format"}),(0,t.yg)("inlineCode",{parentName:"h3"},"<format>")),(0,t.yg)("p",null,"The ",(0,t.yg)("a",m({parentName:"p"},{href:"/next/formats"}),"format")," used to parse events from the loaded bytes."),(0,t.yg)("p",null,"Some formats have format-specific options. Please refer to the documentation of\nthe individual formats for more information."),(0,t.yg)("h2",m({},{id:"examples"}),"Examples"),(0,t.yg)("p",null,"Read bytes from stdin and parse them as JSON."),(0,t.yg)("pre",null,(0,t.yg)("code",m({parentName:"pre"},{}),"from stdin read json\nfrom file stdin read json\nfrom file - read json\nfrom - read json\n")),(0,t.yg)("p",null,"Read bytes from the file ",(0,t.yg)("inlineCode",{parentName:"p"},"path/to/eve.json")," and parse them as Suricata.\nNote that the ",(0,t.yg)("inlineCode",{parentName:"p"},"file")," connector automatically assigns the Suricata parser for\n",(0,t.yg)("inlineCode",{parentName:"p"},"eve.json")," files when no other parser is specified.\nAlso, when directly passed a filesystem path, the ",(0,t.yg)("inlineCode",{parentName:"p"},"file")," connector is automatically used."),(0,t.yg)("pre",null,(0,t.yg)("code",m({parentName:"pre"},{}),"from path/to/eve.json\nfrom file path/to/eve.json\nfrom file path/to/eve.json read suricata\n")),(0,t.yg)("p",null,"Read bytes from the URL ",(0,t.yg)("inlineCode",{parentName:"p"},"https://example.com/data.json")," over HTTPS and parse them as JSON.\nNote that when ",(0,t.yg)("inlineCode",{parentName:"p"},"from")," is passed a URL directly, the ",(0,t.yg)("inlineCode",{parentName:"p"},"https")," connector is automatically used."),(0,t.yg)("pre",null,(0,t.yg)("code",m({parentName:"pre"},{}),"from https://example.com/data.json read json\nfrom https example.com/data.json read json\n")))}j.isMDXComponent=!0}}]);