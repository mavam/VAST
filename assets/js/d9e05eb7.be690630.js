"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3698],{15680:(e,a,t)=>{t.d(a,{xA:()=>c,yg:()=>d});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=n.createContext({}),l=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},c=function(e){var a=l(e.components);return n.createElement(s.Provider,{value:a},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),y=l(t),u=r,d=y["".concat(s,".").concat(u)]||y[u]||g[u]||o;return t?n.createElement(d,i(i({ref:a},c),{},{components:t})):n.createElement(d,i({ref:a},c))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[y]="string"==typeof e?e:r,i[1]=p;for(var l=2;l<o;l++)i[l]=t[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},28588:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>m,default:()=>E,frontMatter:()=>d,metadata:()=>f,toc:()=>v});var n=t(15680),r=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,y=(e,a)=>{for(var t in a||(a={}))s.call(a,t)&&c(e,t,a[t]);if(p)for(var t of p(a))l.call(a,t)&&c(e,t,a[t]);return e},g=(e,a)=>o(e,i(a)),u=(e,a)=>{var t={};for(var n in e)s.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&l.call(e,n)&&(t[n]=e[n]);return t};const d={},m="Suricata",f={unversionedId:"integrations/suricata",id:"version-v4.24/integrations/suricata",title:"Suricata",description:"Suricata is network monitor with a rule matching engine",source:"@site/versioned_docs/version-v4.24/integrations/suricata.md",sourceDirName:"integrations",slug:"/integrations/suricata",permalink:"/integrations/suricata",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.24/integrations/suricata.md",tags:[],version:"v4.24",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Splunk",permalink:"/integrations/splunk"},next:{title:"Velociraptor",permalink:"/integrations/velociraptor"}},h={},v=[{value:"Ingest EVE JSON logs into a node",id:"ingest-eve-json-logs-into-a-node",level:2},{value:"Import from a file",id:"import-from-a-file",level:3},{value:"Import from a Unix domain socket",id:"import-from-a-unix-domain-socket",level:3}],b={toc:v},N="wrapper";function E(e){var a=e,{components:t}=a,r=u(a,["components"]);return(0,n.yg)(N,g(y(y({},b),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",y({},{id:"suricata"}),"Suricata"),(0,n.yg)("p",null,(0,n.yg)("a",y({parentName:"p"},{href:"https://suricata.io/"}),"Suricata")," is network monitor with a rule matching engine\nto detect threats."),(0,n.yg)("p",null,"Use Tenzir to acquire, process, and store Suricata logs."),(0,n.yg)("h2",y({},{id:"ingest-eve-json-logs-into-a-node"}),"Ingest EVE JSON logs into a node"),(0,n.yg)("p",null,(0,n.yg)("a",y({parentName:"p"},{href:"https://docs.suricata.io/en/latest/output/eve/eve-json-output.html"}),"EVE JSON"),"\nis the log format in which Suricata generates events."),(0,n.yg)("p",null,"A typical Suricata configuration looks like this:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"outputs"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # Extensible Event Format (nicknamed EVE) event log in JSON format")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"  - "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"eve-log"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"      enabled"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"yes")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"      filetype"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"regular"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}})," #regular|syslog|unix_dgram|unix_stream|redis")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"      filename"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"eve.json"))))),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"filetype")," setting determines how you'd process the log file."),(0,n.yg)("h3",y({},{id:"import-from-a-file"}),"Import from a file"),(0,n.yg)("p",null,"By default, Suricata uses the file type ",(0,n.yg)("inlineCode",{parentName:"p"},"regular"),". Ingest into a node as\nfollows:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_file"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),' "/path/to/eve.json"')),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"read_suricata")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"import"))))),(0,n.yg)("h3",y({},{id:"import-from-a-unix-domain-socket"}),"Import from a Unix domain socket"),(0,n.yg)("p",null,"If your ",(0,n.yg)("inlineCode",{parentName:"p"},"filetype")," setting is ",(0,n.yg)("inlineCode",{parentName:"p"},"unix_stream"),", you need to create a Unix domain\nsocket first, e.g., like this:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"bash","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"bash","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"nc"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," -U"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," -l"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," /tmp/eve.socket"))))),(0,n.yg)("p",null,"Then you can use the same pipeline as above, since Tenzir automatically detects\nthe file type."))}E.isMDXComponent=!0}}]);