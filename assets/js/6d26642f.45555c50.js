"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53839],{15680:(e,a,t)=>{t.d(a,{xA:()=>c,yg:()=>f});var n=t(96540);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},c=function(e){var a=s(e.components);return n.createElement(p.Provider,{value:a},e.children)},d="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(t),y=o,f=d["".concat(p,".").concat(y)]||d[y]||g[y]||r;return t?n.createElement(f,l(l({ref:a},c),{},{components:t})):n.createElement(f,l({ref:a},c))}));function f(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=y;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},65401:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>u,default:()=>v,frontMatter:()=>f,metadata:()=>m,toc:()=>N});var n=t(15680),o=Object.defineProperty,r=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,c=(e,a,t)=>a in e?o(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,d=(e,a)=>{for(var t in a||(a={}))p.call(a,t)&&c(e,t,a[t]);if(i)for(var t of i(a))s.call(a,t)&&c(e,t,a[t]);return e},g=(e,a)=>r(e,l(a)),y=(e,a)=>{var t={};for(var n in e)p.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))a.indexOf(n)<0&&s.call(e,n)&&(t[n]=e[n]);return t};const f={},u="load_kafka",m={unversionedId:"tql2/operators/load_kafka",id:"tql2/operators/load_kafka",title:"load_kafka",description:"Loads a byte stream from a Apache Kafka topic.",source:"@site/docs/tql2/operators/load_kafka.md",sourceDirName:"tql2/operators",slug:"/tql2/operators/load_kafka",permalink:"/next/tql2/operators/load_kafka",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/tql2/operators/load_kafka.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"load_http",permalink:"/next/tql2/operators/load_http"},next:{title:"load_tcp",permalink:"/next/tql2/operators/load_tcp"}},h={},N=[{value:"Description",id:"description",level:2},{value:"<code>topic = str (optional)</code>",id:"topic--str-optional",level:3},{value:"<code>count = int (optional)</code>",id:"count--int-optional",level:3},{value:"<code>exit = bool (optional)</code>",id:"exit--bool-optional",level:3},{value:"<code>offset = int|str (optional)</code>",id:"offset--intstr-optional",level:3},{value:"<code>options = record (optional)</code>",id:"options--record-optional",level:3},{value:"Examples",id:"examples",level:2},{value:"Read 100 JSON messages from the topic <code>tenzir</code>",id:"read-100-json-messages-from-the-topic-tenzir",level:3},{value:"Read Zeek Streaming JSON logs starting at the beginning",id:"read-zeek-streaming-json-logs-starting-at-the-beginning",level:3}],b={toc:N},k="wrapper";function v(e){var a=e,{components:t}=a,o=y(a,["components"]);return(0,n.yg)(k,g(d(d({},b),o),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",d({},{id:"load_kafka"}),"load_kafka"),(0,n.yg)("p",null,"Loads a byte stream from a Apache Kafka topic."),(0,n.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",d({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",d({parentName:"code"},{"data-line":""}),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_kafka"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," [topic"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"str, count"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"int, exit"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"bool, offset"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"int"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"|"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"str, options"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),"record]"))))),(0,n.yg)("h2",d({},{id:"description"}),"Description"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"load_kafka")," operator reads bytes from a Kafka topic."),(0,n.yg)("p",null,"The implementation uses the official ",(0,n.yg)("a",d({parentName:"p"},{href:"https://github.com/confluentinc/librdkafka"}),"librdkafka")," from Confluent and\nsupports all ",(0,n.yg)("a",d({parentName:"p"},{href:"https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md"}),"configuration options"),". You can specify them\nvia ",(0,n.yg)("inlineCode",{parentName:"p"},"options")," parameter as ",(0,n.yg)("inlineCode",{parentName:"p"},"{key: value, ...}"),"."),(0,n.yg)("p",null,"We recommend putting your Kafka options into the dedicated ",(0,n.yg)("inlineCode",{parentName:"p"},"kafka.yaml")," ",(0,n.yg)("a",d({parentName:"p"},{href:"/next/configuration#load-plugins"}),"plugin\nconfig file"),". This way you can configure\nyour all your environment-specific options once, independent of the\nper-connector invocations."),(0,n.yg)("p",null,"The operator injects the following default librdkafka configuration values in\ncase no configuration file is present, or when the configuration does not\ninclude them:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"bootstrap.servers"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"localhost")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"client.id"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"tenzir")),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"group.id"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"tenzir"))),(0,n.yg)("h3",d({},{id:"topic--str-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"topic = str (optional)")),(0,n.yg)("p",null,"The Kafka topic to use."),(0,n.yg)("p",null,"Defaults to ",(0,n.yg)("inlineCode",{parentName:"p"},'"tenzir"'),"."),(0,n.yg)("h3",d({},{id:"count--int-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"count = int (optional)")),(0,n.yg)("p",null,"Exit successfully after having consumed ",(0,n.yg)("inlineCode",{parentName:"p"},"count")," messages."),(0,n.yg)("h3",d({},{id:"exit--bool-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"exit = bool (optional)")),(0,n.yg)("p",null,"Exit successfully after having received the last message."),(0,n.yg)("p",null,"Without this option, the operator waits for new messages after having consumed the\nlast one."),(0,n.yg)("h3",d({},{id:"offset--intstr-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"offset = int|str (optional)")),(0,n.yg)("p",null,"The offset to start consuming from. Possible values are:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},'"beginning"'),": first offset"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},'"end"'),": last offset"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},'"stored"'),": stored offset"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"<value>"),": absolute offset"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"-<value>"),": relative offset from end")),(0,n.yg)("h3",d({},{id:"options--record-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"options = record (optional)")),(0,n.yg)("p",null,"A record of key-value configuration options for\n",(0,n.yg)("a",d({parentName:"p"},{href:"https://github.com/confluentinc/librdkafka"}),"librdkafka"),", e.g., ",(0,n.yg)("inlineCode",{parentName:"p"},'{"auto.offset.reset" : "earliest",\n"enable.partition.eof": true}'),"."),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"load_kafka")," operator passes the key-value pairs directly to\n",(0,n.yg)("a",d({parentName:"p"},{href:"https://github.com/confluentinc/librdkafka"}),"librdkafka"),". Consult the list of available ",(0,n.yg)("a",d({parentName:"p"},{href:"https://github.com/confluentinc/librdkafka/blob/master/CONFIGURATION.md"}),"configuration\noptions")," to configure Kafka according to your needs."),(0,n.yg)("p",null,"We recommand factoring these options into the plugin-specific ",(0,n.yg)("inlineCode",{parentName:"p"},"kafka.yaml")," so\nthat they are indpendent of the ",(0,n.yg)("inlineCode",{parentName:"p"},"load_kafka")," arguments."),(0,n.yg)("h2",d({},{id:"examples"}),"Examples"),(0,n.yg)("h3",d({},{id:"read-100-json-messages-from-the-topic-tenzir"}),"Read 100 JSON messages from the topic ",(0,n.yg)("inlineCode",{parentName:"h3"},"tenzir")),(0,n.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",d({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",d({parentName:"code"},{"data-line":""}),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_kafka"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," count"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#79C0FF"}}),"100")),"\n",(0,n.yg)("span",d({parentName:"code"},{"data-line":""}),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#D2A8FF"}}),"read_json"))))),(0,n.yg)("h3",d({},{id:"read-zeek-streaming-json-logs-starting-at-the-beginning"}),"Read Zeek Streaming JSON logs starting at the beginning"),(0,n.yg)("figure",d({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",d({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",d({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",d({parentName:"code"},{"data-line":""}),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_kafka"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}})," topic"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"zeek"'),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#E6EDF3"}}),", offset"),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#A5D6FF"}}),'"beginning"')),"\n",(0,n.yg)("span",d({parentName:"code"},{"data-line":""}),(0,n.yg)("span",d({parentName:"span"},{style:{color:"#D2A8FF"}}),"read_zeek_json"))))))}v.isMDXComponent=!0}}]);