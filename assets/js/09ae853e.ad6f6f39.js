"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[56269],{15680:(e,a,t)=>{t.d(a,{xA:()=>m,yg:()=>d});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),i=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},m=function(e){var a=i(e.components);return n.createElement(l.Provider,{value:a},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),y=i(t),c=r,d=y["".concat(l,".").concat(c)]||y[c]||g[c]||s;return t?n.createElement(d,o(o({ref:a},m),{},{components:t})):n.createElement(d,o({ref:a},m))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=c;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=e,p[y]="string"==typeof e?e:r,o[1]=p;for(var i=2;i<s;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},40464:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>f,contentTitle:()=>u,default:()=>E,frontMatter:()=>d,metadata:()=>h,toc:()=>N});var n=t(15680),r=Object.defineProperty,s=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable,m=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,y=(e,a)=>{for(var t in a||(a={}))l.call(a,t)&&m(e,t,a[t]);if(p)for(var t of p(a))i.call(a,t)&&m(e,t,a[t]);return e},g=(e,a)=>s(e,o(a)),c=(e,a)=>{var t={};for(var n in e)l.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&p)for(var n of p(e))a.indexOf(n)<0&&i.call(e,n)&&(t[n]=e[n]);return t};const d={title:"VAST v1.0",description:"VAST v1.0 \u2013 New Year, New Versioning Scheme",authors:"dominiklohmann",date:new Date("2022-01-27T00:00:00.000Z"),last_updated:new Date("2022-07-15T00:00:00.000Z"),tags:["release","transforms","query"]},u=void 0,h={permalink:"/blog/vast-v1.0",source:"@site/blog/vast-v1.0/index.md",title:"VAST v1.0",description:"VAST v1.0 \u2013 New Year, New Versioning Scheme",date:"2022-01-27T00:00:00.000Z",formattedDate:"January 27, 2022",tags:[{label:"release",permalink:"/blog/tags/release"},{label:"transforms",permalink:"/blog/tags/transforms"},{label:"query",permalink:"/blog/tags/query"}],readingTime:3.175,hasTruncateMarker:!0,authors:[{name:"Dominik Lohmann",title:"Engineering Manager",url:"https://github.com/dominiklohmann",email:"dominik@tenzir.com",imageURL:"https://github.com/dominiklohmann.png",key:"dominiklohmann"}],frontMatter:{title:"VAST v1.0",description:"VAST v1.0 \u2013 New Year, New Versioning Scheme",authors:"dominiklohmann",date:"2022-01-27T00:00:00.000Z",last_updated:"2022-07-15T00:00:00.000Z",tags:["release","transforms","query"]},prevItem:{title:"VAST v1.1",permalink:"/blog/vast-v1.1"}},f={authorsImageUrls:[void 0]},N=[{value:"Query events based on their import time",id:"query-events-based-on-their-import-time",level:2},{value:"Omit <code>null</code> fields in the JSON export",id:"omit-null-fields-in-the-json-export",level:2},{value:"Selection and Projection Transform Steps",id:"selection-and-projection-transform-steps",level:2},{value:"Threat Bus 2022.01.27",id:"threat-bus-20220127",level:2}],v={toc:N},b="wrapper";function E(e){var a=e,{components:t}=a,r=c(a,["components"]);return(0,n.yg)(b,g(y(y({},v),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("p",null,"We are happy to announce ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/vast/releases/tag/v1.0.0"}),"VAST v1.0"),"!"),(0,n.yg)("p",null,"This release brings a new approach to software versioning for Tenzir. We laid\nout the semantics in detail in a new ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/vast/blob/v1.0.0/VERSIONING.md"}),"VERSIONING"),"\ndocument."),(0,n.yg)("h2",y({},{id:"query-events-based-on-their-import-time"}),"Query events based on their import time"),(0,n.yg)("p",null,"The new ",(0,n.yg)("inlineCode",{parentName:"p"},"#import_time")," extractor allows for exporting\nevents based on the time they arrived at VAST. Most of the time, this timestamp\nis not far away from the timestamp of when the event occurred, but in certain\ncases the two may deviate substantially, e.g., when ingesting historical events\nfrom several years ago."),(0,n.yg)("p",null,"For example, to export all Suricata alerts that arrived at VAST on New Years Eve\nas JSON, run this command:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"bash","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"bash","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"vast"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," export"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," json"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," '#type == \"suricata.alert\" && #import_time >= 2021-12-31 && #import_time < 2022-01-01'"))))),(0,n.yg)("p",null,"This differs from the ",(0,n.yg)("inlineCode",{parentName:"p"},":timestamp")," type extractor that\nqueries all events that contain a type ",(0,n.yg)("inlineCode",{parentName:"p"},"timestamp"),", which is an alias for the\n",(0,n.yg)("inlineCode",{parentName:"p"},"time")," type.  By convention, the ",(0,n.yg)("inlineCode",{parentName:"p"},"timestamp")," type represents the event time\nembedded in the data itself. However, the import time  is not part of the event\ndata itself, but rather part of metadata of every batch of events that VAST\ncreates."),(0,n.yg)("h2",y({},{id:"omit-null-fields-in-the-json-export"}),"Omit ",(0,n.yg)("inlineCode",{parentName:"h2"},"null")," fields in the JSON export"),(0,n.yg)("p",null,"VAST renders all fields defined in the schema when exporting events as JSON. A\ncommon option for many tools that handle JSON is to skip rendering ",(0,n.yg)("inlineCode",{parentName:"p"},"null"),"\nfields, and the new ",(0,n.yg)("inlineCode",{parentName:"p"},"--omit-nulls")," option to the JSON export does exactly that."),(0,n.yg)("p",null,"To use it on a case-by-case basis, add this flag to any JSON export."),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"bash","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"bash","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"vast"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," export"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," json"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --omit-nulls"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," '<query>'")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"# This also works when attaching to a matcher.")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"vast"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," matcher"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," attach"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," json"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --omit-nulls"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," <"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"matche"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"r"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),">"))))),(0,n.yg)("p",null,"To always enable it, add this to your ",(0,n.yg)("inlineCode",{parentName:"p"},"vast.yaml")," configuration file:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"vast"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  import"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    omit-nulls"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"true"))))),(0,n.yg)("h2",y({},{id:"selection-and-projection-transform-steps"}),"Selection and Projection Transform Steps"),(0,n.yg)("admonition",y({},{title:"Transforms \u2192 Pipelines",type:"info"}),(0,n.yg)("p",{parentName:"admonition"},"In ",(0,n.yg)("a",y({parentName:"p"},{href:"/blog/vast-v2.2"}),"VAST v2.2"),", we renamed ",(0,n.yg)("em",{parentName:"p"},"transforms")," to ",(0,n.yg)("em",{parentName:"p"},"pipelines"),", and\n",(0,n.yg)("em",{parentName:"p"},"transform steps")," to ",(0,n.yg)("em",{parentName:"p"},"pipeline operators"),". This caused several configuration key\nchanges. Please keep this in mind when reading the example below and consult the\ndocumentation for the up-to-date syntax.")),(0,n.yg)("p",null,"Reshaping data during import and export is a common use case that VAST now\nsupports. The two new built-in transform steps allow for filtering columns and\nrows. Filtering columns (",(0,n.yg)("em",{parentName:"p"},"projection"),") takes a list of column names as input,\nand filtering rows (",(0,n.yg)("em",{parentName:"p"},"selection"),")  works with an arbitrary query expression."),(0,n.yg)("p",null,"Here\u2019s a usage example that sanitizes data leaving VAST during a query. If any\nstring field in an event contains the value ",(0,n.yg)("inlineCode",{parentName:"p"},"tenzir")," or ",(0,n.yg)("inlineCode",{parentName:"p"},"secret-username"),", VAST\nwill not include the event in the result set. The example below applies this\nsanitization only to the events  ",(0,n.yg)("inlineCode",{parentName:"p"},"suricata.dns")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"suricata.http"),", as defined\nin the section ",(0,n.yg)("inlineCode",{parentName:"p"},"transform-triggers"),"."),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"vast"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # Specify and name our transforms, each of which are a list of configured")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # transform steps. Transform steps are plugins, enabling users to write more")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # complex transformations in native code using C++ and Apache Arrow.")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  transforms"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),'     # Prevent events with certain strings to be exported, e.g., "tenzir" or')),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),'     # "secret-username".')),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"     remove-events-with-secrets"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"       - "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"select"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"           expression"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),'\':string !in ["tenzir", "secret-username"]\'')),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""})," "),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # Specify whether to trigger each transform at server- or client-side, on")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"  # import or export, and restrict them to a list of event types.")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  transform-triggers"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    export"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"      # Apply the remove-events-with-secrets transformation server-side on")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#8B949E"}}),"      # export to the suricata.dns and suricata.http event types.")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"      - "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"transform"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"remove-events-with-secrets")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"        location"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"server")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"        events"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"          - "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"suricata.dns")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"          - "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"suricata.http"))))),(0,n.yg)("h2",y({},{id:"threat-bus-20220127"}),"Threat Bus 2022.01.27"),(0,n.yg)("p",null,"Thanks to a contribution from Sascha Steinbiss\n(",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/satta"}),"@satta"),"), Threat Bus only reports failure when\ntransforming a sighting context if the return code of the transforming program\nindicates failure."),(0,n.yg)("p",null,"A small peek behind the curtain: We\u2019re building the next generation of Threat\nBus as part of VAST. We will continue to develop and maintain Threat Bus and its\napps for the time being."),(0,n.yg)("p",null,"Threat Bus 2022.01.27 is available ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/tenzir/threatbus/releases/tag/2022.01.27"}),"\ud83d\udc49\nhere"),"."))}E.isMDXComponent=!0}}]);