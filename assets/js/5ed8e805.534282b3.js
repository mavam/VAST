"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[28879],{15680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),c=s(t),u=r,y=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return t?a.createElement(y,i(i({ref:n},g),{},{components:t})):a.createElement(y,i({ref:n},g))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},27621:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>f,contentTitle:()=>h,default:()=>N,frontMatter:()=>y,metadata:()=>d,toc:()=>k});var a=t(15680),r=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,g=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,c=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&g(e,t,n[t]);if(l)for(var t of l(n))s.call(n,t)&&g(e,t,n[t]);return e},m=(e,n)=>o(e,i(n)),u=(e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&l)for(var a of l(e))n.indexOf(a)<0&&s.call(e,a)&&(t[a]=e[a]);return t};const y={},h="Zeek",d={unversionedId:"integrations/zeek",id:"integrations/zeek",title:"Zeek",description:"The Zeek network monitor translates raw packets into",source:"@site/docs/integrations/zeek.md",sourceDirName:"integrations",slug:"/integrations/zeek",permalink:"/next/integrations/zeek",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/docs/integrations/zeek.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Windows Event Logs",permalink:"/next/integrations/windows-event-logs"},next:{title:"Contribute",permalink:"/next/contribution"}},f={},k=[{value:"Ingest logs into a node",id:"ingest-logs-into-a-node",level:2},{value:"Easy-button import with the official Zeek package",id:"easy-button-import-with-the-official-zeek-package",level:3},{value:"Run an import pipeline when rotating logs",id:"run-an-import-pipeline-when-rotating-logs",level:3},{value:"Run Zeek on a packet pipeline",id:"run-zeek-on-a-packet-pipeline",level:2},{value:"Process logs with a pipeline on the command line",id:"process-logs-with-a-pipeline-on-the-command-line",level:2},{value:"Generate Zeek TSV from arbitrary data",id:"generate-zeek-tsv-from-arbitrary-data",level:2}],z={toc:k},b="wrapper";function N(e){var n=e,{components:t}=n,r=u(n,["components"]);return(0,a.yg)(b,m(c(c({},z),r),{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",c({},{id:"zeek"}),"Zeek"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",c({parentName:"p"},{href:"https://zeek.org"}),"Zeek")," network monitor translates raw packets into\nstructured logs."),(0,a.yg)("p",null,"Tenzir supports various Zeek use cases, such as continuous ingestion, ad-hoc log\nfile processing, and even generating Zeek logs."),(0,a.yg)("admonition",c({},{title:"Zeek Blog Post Series",type:"info"}),(0,a.yg)("p",{parentName:"admonition"},"We wrote several Zeek blog posts in the past that cover various aspects of the\nZeek integration in much more detail."),(0,a.yg)("ul",{parentName:"admonition"},(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",c({parentName:"li"},{href:"/blog/mobilizing-zeek-logs"}),"Mobilizing Zeek Logs")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",c({parentName:"li"},{href:"/blog/zeek-and-ye-shall-pipe"}),"Zeek and Ye Shall Pipe")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",c({parentName:"li"},{href:"/blog/shell-yeah-supercharging-zeek-and-suricata-with-tenzir"}),"Shell Yeah! Supercharging Zeek and Suricata with Tenzir")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",c({parentName:"li"},{href:"/blog/native-zeek-log-rotation-and-shipping"}),"Native Zeek Log Rotation & Shipping")),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("a",c({parentName:"li"},{href:"/blog/tenzir-for-splunk-users"}),"Tenzir for Splunk Users")))),(0,a.yg)("p",null,"Zeek logs come in ",(0,a.yg)("a",c({parentName:"p"},{href:"/blog/mobilizing-zeek-logs"}),"three forms")," in practice, all of\nwhich Tenzir can parse natively:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("a",c({parentName:"li"},{href:"/next/formats/zeek-tsv"}),(0,a.yg)("inlineCode",{parentName:"a"},"zeek-tsv")),": Tab-Separated Values (TSV) with a\ncustom header."),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("a",c({parentName:"li"},{href:"/next/formats/zeek-tsv"}),(0,a.yg)("inlineCode",{parentName:"a"},"zeek-json")),": One NDJSON file for all log types\n(aka. ",(0,a.yg)("em",{parentName:"li"},"JSON Streaming"),") including an extra ",(0,a.yg)("inlineCode",{parentName:"li"},"_path")," and ",(0,a.yg)("inlineCode",{parentName:"li"},"_write_ts")," field."),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("a",c({parentName:"li"},{href:"/next/formats/json"}),(0,a.yg)("inlineCode",{parentName:"a"},"json")),": One NDJSON file per log type.")),(0,a.yg)("h2",c({},{id:"ingest-logs-into-a-node"}),"Ingest logs into a node"),(0,a.yg)("p",null,"To ingest Zeek logs into a Tenzir node, you have multiple options."),(0,a.yg)("h3",c({},{id:"easy-button-import-with-the-official-zeek-package"}),"Easy-button import with the official Zeek package"),(0,a.yg)("p",null,"Our official ",(0,a.yg)("a",c({parentName:"p"},{href:"https://github.com/tenzir/zeek-tenzir"}),"Zeek package")," makes it easy\nto ship your Zeek logs to a Tenzir node. Install the package first:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"zkg install zeek-tenzir\n")),(0,a.yg)("p",null,"Then add this to your ",(0,a.yg)("inlineCode",{parentName:"p"},"$PREFIX/share/zeek/site/local.zeek")," to send all logs that\nZeek produces to a Tenzir node:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-zeek"}),"@load tenzir/import\n\n# Uncomment to keep the original Zeek logs.\n# redef Tenzir::delete_after_postprocesing=F;\n")),(0,a.yg)("p",null,"For ad-hoc command line processing you can also pass ",(0,a.yg)("inlineCode",{parentName:"p"},"tenzir/import")," to a Zeek\ninvocation:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"# Ship logs to it and delete the original files.\nzeek -r trace.pcap tenzir/import\n\n# Ship logs to it and keep the original files.\nzeek -r trace.pcap tenzir/import Tenzir::delete_after_postprocesing=F\n")),(0,a.yg)("p",null,"For further details on how to use our Zeek package read our blog post ",(0,a.yg)("a",c({parentName:"p"},{href:"/blog/native-zeek-log-rotation-and-shipping"}),"Native\nZeek Log Rotation & Shipping"),"."),(0,a.yg)("h3",c({},{id:"run-an-import-pipeline-when-rotating-logs"}),"Run an import pipeline when rotating logs"),(0,a.yg)("p",null,"If you cannot use our Zeek package, it is still possible to let Zeek trigger an\nimport pipeline upon rotation. Zeek's ",(0,a.yg)("a",c({parentName:"p"},{href:"https://docs.zeek.org/en/master/frameworks/logging.html"}),"logging\nframework")," can execute\na shell script whenever it rotates a log file."),(0,a.yg)("p",null,"This requires setting ",(0,a.yg)("inlineCode",{parentName:"p"},"Log::default_rotation_interval")," to a non-zero value. The\ndefault of ",(0,a.yg)("inlineCode",{parentName:"p"},"0 secs")," means that log rotation is disabled. Add this to\n",(0,a.yg)("inlineCode",{parentName:"p"},"$PREFIX/share/zeek/site/local.zeek"),", which is the place for local configuration\nchanges:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{}),"redef Log::default_rotation_interval = 1 day;\n")),(0,a.yg)("p",null,"Then redefine\n",(0,a.yg)("a",c({parentName:"p"},{href:"https://docs.zeek.org/en/master/scripts/base/frameworks/logging/main.zeek.html#id-Log::default_rotation_postprocessor_cmd"}),(0,a.yg)("inlineCode",{parentName:"a"},"Log::default_rotation_postprocessor_cmd")),"\nto point to your shell script, e.g., ",(0,a.yg)("inlineCode",{parentName:"p"},"/usr/local/bin/ingest"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{}),"redef Log::default_rotation_postprocessor_cmd=/usr/local/bin/ingest;\n")),(0,a.yg)("p",null,"Here is an example ",(0,a.yg)("inlineCode",{parentName:"p"},"ingest")," script that imports all files into a Tenzir node:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash",metastring:'title="ingest"',title:'"ingest"'}),'#!/bin/sh\n\nfile_name="$1"\nbase_name="$2"\nfrom="$3"\nto="$4"\nterminating="$5"\nwriter="$6"\n\nif [ "$writer" = "ascii" ]; then\n  format="zeek-tsv"\nelif [ "$writer" = "json" ]; then\n  format="json --schema zeek.$base_name"\nelse\n  echo "unsupported Zeek writer: $writer"\n  exit 1\nfi\n\npipeline="from file \\"$file_name\\" read $format | import"\n\ntenzir "$pipeline"\n')),(0,a.yg)("p",null,"Our blog post ",(0,a.yg)("a",c({parentName:"p"},{href:"/blog/native-zeek-log-rotation-and-shipping"}),"Native Zeek Log Rotation &\nShipping")," provides further details\non this method."),(0,a.yg)("h2",c({},{id:"run-zeek-on-a-packet-pipeline"}),"Run Zeek on a packet pipeline"),(0,a.yg)("p",null,"You can run Zeek on a pipeline of PCAP packets and continue processing the logs\nin the same pipeline. A stock Tenzir installation comes with a\n",(0,a.yg)("a",c({parentName:"p"},{href:"/next/language/user-defined-operators"}),"user-defined")," ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek")," operator that looks\nas follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-yaml",metastring:"title=tenzir.yaml",title:"tenzir.yaml"}),'tenzir:\n  operators:\n    zeek:\n      shell "eval \\"$(zkg env)\\" &&\n             zeek -r - LogAscii::output_to_stdout=T\n             JSONStreaming::disable_default_logs=T\n             JSONStreaming::enable_log_rotation=F\n             json-streaming-logs"\n      | read zeek-json\n')),(0,a.yg)("p",null,"This allows you run Zeek on a packet trace as follows:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"tenzir 'load /path/to/trace.pcap | zeek'\n")),(0,a.yg)("p",null,"You can also perform more elaborate packet filtering by going through the\n",(0,a.yg)("a",c({parentName:"p"},{href:"/next/formats/pcap"}),(0,a.yg)("inlineCode",{parentName:"a"},"pcap"))," parser:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"tenzir 'from /path/to/trace.pcap\n       | decapsulate\n       | where 10.0.0.0/8 || community == \"1:YXWfTYEyYLKVv5Ge4WqijUnKTrM=\"\n       | write pcap\n       | zeek'\n")),(0,a.yg)("p",null,"Read the ",(0,a.yg)("a",c({parentName:"p"},{href:"/blog/shell-yeah-supercharging-zeek-and-suricata-with-tenzir"}),"in-depth blog\npost")," for more\ndetails about the inner workings of the ",(0,a.yg)("a",c({parentName:"p"},{href:"/next/operators/shell"}),(0,a.yg)("inlineCode",{parentName:"a"},"shell")),"\noperator."),(0,a.yg)("h2",c({},{id:"process-logs-with-a-pipeline-on-the-command-line"}),"Process logs with a pipeline on the command line"),(0,a.yg)("p",null,"Zeek ships with a helper utility ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-cut")," that operators on Zeek's\ntab-separated logs. For example, to extract the host pairs from a conn log:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"zeek-cut id.orig_h id.resp_h < conn.log\n")),(0,a.yg)("p",null,"The list of arguments to ",(0,a.yg)("inlineCode",{parentName:"p"},"zeek-cut")," are the column names of the log. The\n",(0,a.yg)("a",c({parentName:"p"},{href:"/next/operators/select"}),(0,a.yg)("inlineCode",{parentName:"a"},"select"))," operator performs the equivalent in Tenzir\nafter we parse the logs as ",(0,a.yg)("a",c({parentName:"p"},{href:"/next/formats/zeek-tsv"}),(0,a.yg)("inlineCode",{parentName:"a"},"zeek-tsv")),":"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"tenzir 'read zeek-tsv | select zeek-cut id.orig_h id.resp_h' < conn.log\n")),(0,a.yg)("p",null,"Since pipelines are ",(0,a.yg)("em",{parentName:"p"},"multi-schema")," and the Zeek TSV parser is aware of log\nboundaries, you can also concatenate logs of various types:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"cat *.log | tenzir 'read zeek-tsv | select zeek-cut id.orig_h id.resp_h'\n")),(0,a.yg)("h2",c({},{id:"generate-zeek-tsv-from-arbitrary-data"}),"Generate Zeek TSV from arbitrary data"),(0,a.yg)("p",null,"The ",(0,a.yg)("a",c({parentName:"p"},{href:"/next/formats/zeek-tsv"}),(0,a.yg)("inlineCode",{parentName:"a"},"zeek-tsv"))," is not only a parser, but also a\nprinter. This means you can render any data as Zeek TSV log."),(0,a.yg)("p",null,"For example, print the Tenzir version as Zeek TSV log:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{className:"language-bash"}),"tenzir 'show version | write zeek-tsv'\n")),(0,a.yg)("p",null,"This yields the following output:"),(0,a.yg)("pre",null,(0,a.yg)("code",c({parentName:"pre"},{}),"#separator \\x09\n#set_separator  ,\n#empty_field    (empty)\n#unset_field    -\n#path   tenzir.version\n#open   2023-12-16-08-47-12.372511\n#fields version major   minor   patch   tweak\n#types  string  count   count   count   count\nv4.6.4-155-g0b75e93026  4   6   4   155\n#close  2023-12-16-08-47-12.372736\n")))}N.isMDXComponent=!0}}]);