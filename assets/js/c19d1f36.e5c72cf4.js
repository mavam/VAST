"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[31286],{15680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>g});var a=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),l=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},d=function(e){var t=l(e.components);return a.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(r),y=n,g=c["".concat(i,".").concat(y)]||c[y]||m[y]||o;return r?a.createElement(g,p(p({ref:t},d),{},{components:r})):a.createElement(g,p({ref:t},d))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,p=new Array(o);p[0]=y;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:n,p[1]=s;for(var l=2;l<o;l++)p[l]=r[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,r)}y.displayName="MDXCreateElement"},89276:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>O,frontMatter:()=>g,metadata:()=>f,toc:()=>v});var a=r(15680),n=Object.defineProperty,o=Object.defineProperties,p=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))i.call(t,r)&&d(e,r,t[r]);if(s)for(var r of s(t))l.call(t,r)&&d(e,r,t[r]);return e},m=(e,t)=>o(e,p(t)),y=(e,t)=>{var r={};for(var a in e)i.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&s)for(var a of s(e))t.indexOf(a)<0&&l.call(e,a)&&(r[a]=e[a]);return r};const g={},u="decompress",f={unversionedId:"tql2/operators/decompress",id:"version-v4.23/tql2/operators/decompress",title:"decompress",description:"Decompresses a stream of bytes.",source:"@site/versioned_docs/version-v4.23/tql2/operators/decompress.md",sourceDirName:"tql2/operators",slug:"/tql2/operators/decompress",permalink:"/tql2/operators/decompress",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.23/tql2/operators/decompress.md",tags:[],version:"v4.23",frontMatter:{},sidebar:"docsSidebar",previous:{title:"config",permalink:"/tql2/operators/config"},next:{title:"delay",permalink:"/tql2/operators/delay"}},h={},v=[{value:"Description",id:"description",level:2},{value:"<code>codec: str</code>",id:"codec-str",level:3},{value:"Examples",id:"examples",level:2},{value:"Import Suricata events from a Zstd-compressed file",id:"import-suricata-events-from-a-zstd-compressed-file",level:3},{value:"Convert a Zstd-compressed file into an LZ4-compressed file",id:"convert-a-zstd-compressed-file-into-an-lz4-compressed-file",level:3}],b={toc:v},N="wrapper";function O(e){var t=e,{components:r}=t,n=y(t,["components"]);return(0,a.yg)(N,m(c(c({},b),n),{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",c({},{id:"decompress"}),"decompress"),(0,a.yg)("p",null,"Decompresses a stream of bytes."),(0,a.yg)("figure",c({},{"data-rehype-pretty-code-figure":""}),(0,a.yg)("pre",c({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,a.yg)("code",c({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"decompress"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#E6EDF3"}})," codec"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#FF7B72"}}),":"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#E6EDF3"}}),"str"))))),(0,a.yg)("h2",c({},{id:"description"}),"Description"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"decompress")," operator decompresses bytes in a pipeline incrementally with a\nknown codec. The operator supports decompressing multiple concatenated streams\nof the same codec transparently."),(0,a.yg)("admonition",c({},{title:"Streaming Decompression",type:"note"}),(0,a.yg)("p",{parentName:"admonition"},"The operator uses ",(0,a.yg)("a",c({parentName:"p"},{href:"https://arrow.apache.org/docs/cpp/api/utilities.html#compression"}),"Apache Arrow's compression\nutilities")," under the hood, and transparently supports\nall options that Apache Arrow supports for streaming decompression."),(0,a.yg)("p",{parentName:"admonition"},"Besides the supported ",(0,a.yg)("inlineCode",{parentName:"p"},"brotli"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"bz2"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"gzip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lz4"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"zstd"),", Apache Arrow\nalso ships with codecs for ",(0,a.yg)("inlineCode",{parentName:"p"},"lzo"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lz4_raw"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lz4_hadoop")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"snappy"),", which\nonly support oneshot decompression. Support for them is not currently\nimplemented.")),(0,a.yg)("h3",c({},{id:"codec-str"}),(0,a.yg)("inlineCode",{parentName:"h3"},"codec: str")),(0,a.yg)("p",null,"An identifier of the codec to use. Currently supported are ",(0,a.yg)("inlineCode",{parentName:"p"},"brotli"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"bz2"),",\n",(0,a.yg)("inlineCode",{parentName:"p"},"gzip"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"lz4"),", and ",(0,a.yg)("inlineCode",{parentName:"p"},"zstd"),"."),(0,a.yg)("h2",c({},{id:"examples"}),"Examples"),(0,a.yg)("h3",c({},{id:"import-suricata-events-from-a-zstd-compressed-file"}),"Import Suricata events from a Zstd-compressed file"),(0,a.yg)("figure",c({},{"data-rehype-pretty-code-figure":""}),(0,a.yg)("pre",c({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,a.yg)("code",c({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_file"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "eve.json.zst"')),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"decompress"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "zstd"')),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"read_suricata")),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"import"))))),(0,a.yg)("h3",c({},{id:"convert-a-zstd-compressed-file-into-an-lz4-compressed-file"}),"Convert a Zstd-compressed file into an LZ4-compressed file"),(0,a.yg)("figure",c({},{"data-rehype-pretty-code-figure":""}),(0,a.yg)("pre",c({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,a.yg)("code",c({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_file"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "in.zst"')),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"decompress"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "zstd"')),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"compress"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "lz4"')),"\n",(0,a.yg)("span",c({parentName:"code"},{"data-line":""}),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#D2A8FF"}}),"save_file"),(0,a.yg)("span",c({parentName:"span"},{style:{color:"#A5D6FF"}}),' "out.lz4"'))))))}O.isMDXComponent=!0}}]);