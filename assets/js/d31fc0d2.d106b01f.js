"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[10986],{15680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>c});var n=t(96540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),s=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},g=function(e){var a=s(e.components);return n.createElement(o.Provider,{value:a},e.children)},y="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),y=s(t),m=r,c=y["".concat(o,".").concat(m)]||y[m]||d[m]||l;return t?n.createElement(c,p(p({ref:a},g),{},{components:t})):n.createElement(c,p({ref:a},g))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,p=new Array(l);p[0]=m;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[y]="string"==typeof e?e:r,p[1]=i;for(var s=2;s<l;s++)p[s]=t[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6203:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>h,contentTitle:()=>u,default:()=>v,frontMatter:()=>c,metadata:()=>N,toc:()=>f});var n=t(15680),r=Object.defineProperty,l=Object.defineProperties,p=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,g=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,y=(e,a)=>{for(var t in a||(a={}))o.call(a,t)&&g(e,t,a[t]);if(i)for(var t of i(a))s.call(a,t)&&g(e,t,a[t]);return e},d=(e,a)=>l(e,p(a)),m=(e,a)=>{var t={};for(var n in e)o.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))a.indexOf(n)<0&&s.call(e,n)&&(t[n]=e[n]);return t};const c={},u="sigma",N={unversionedId:"tql2/operators/sigma",id:"version-v4.24/tql2/operators/sigma",title:"sigma",description:"Filter the input with Sigma rules and output matching events.",source:"@site/versioned_docs/version-v4.24/tql2/operators/sigma.md",sourceDirName:"tql2/operators",slug:"/tql2/operators/sigma",permalink:"/tql2/operators/sigma",draft:!1,editUrl:"https://github.com/tenzir/tenzir/tree/main/web/versioned_docs/version-v4.24/tql2/operators/sigma.md",tags:[],version:"v4.24",frontMatter:{},sidebar:"docsSidebar",previous:{title:"shell",permalink:"/tql2/operators/shell"},next:{title:"slice",permalink:"/tql2/operators/slice"}},h={},f=[{value:"Description",id:"description",level:2},{value:"<code>path: string</code>",id:"path-string",level:3},{value:"<code>refresh_interval = duration (optional)</code>",id:"refresh_interval--duration-optional",level:3},{value:"Examples",id:"examples",level:2},{value:"Apply a Sigma rule to an EVTX file",id:"apply-a-sigma-rule-to-an-evtx-file",level:3},{value:"Run a Sigma rule on historical data",id:"run-a-sigma-rule-on-historical-data",level:3},{value:"Stream a file and apply a set of Sigma rules to it",id:"stream-a-file-and-apply-a-set-of-sigma-rules-to-it",level:3}],b={toc:f},F="wrapper";function v(e){var a=e,{components:t}=a,r=m(a,["components"]);return(0,n.yg)(F,d(y(y({},b),r),{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",y({},{id:"sigma"}),"sigma"),(0,n.yg)("p",null,"Filter the input with ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/SigmaHQ/sigma"}),"Sigma rules")," and output matching events."),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"sigma"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," path"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),":"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"string, [refresh_interval"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"duration]"))))),(0,n.yg)("h2",y({},{id:"description"}),"Description"),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator executes ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/SigmaHQ/sigma"}),"Sigma rules")," on\nits input. If a rule matches, the operator emits a ",(0,n.yg)("inlineCode",{parentName:"p"},"tenzir.sigma")," event that\nwraps the input record into a new record along with the matching rule. The\noperator discards all events that do not match the provided rules."),(0,n.yg)("details",null,(0,n.yg)("summary",null," Transpilation Process "),(0,n.yg)("p",null,"For each rule, the operator transpiles the YAML into an\n",(0,n.yg)("a",y({parentName:"p"},{href:"/tql2/language/expressions"}),"expression")," and instantiates a\n",(0,n.yg)("a",y({parentName:"p"},{href:"/tql2/operators/where"}),(0,n.yg)("inlineCode",{parentName:"a"},"where"))," operator, followed by assignments to generate an output.\nHere's how the transpilation works. The Sigma rule YAML format requires a\n",(0,n.yg)("inlineCode",{parentName:"p"},"detection")," attribute that includes a map of named sub-expression called ",(0,n.yg)("em",{parentName:"p"},"search\nidentifiers"),". In addition, ",(0,n.yg)("inlineCode",{parentName:"p"},"detection")," must include a final ",(0,n.yg)("inlineCode",{parentName:"p"},"condition")," that\ncombines search identifiers using boolean algebra (AND, OR, and NOT) or\nsyntactic sugar to reference groups of search expressions, e.g., using the\n",(0,n.yg)("inlineCode",{parentName:"p"},"1/all of *")," or plain wildcard syntax. Consider the following ",(0,n.yg)("inlineCode",{parentName:"p"},"detection"),"\nembedded in a rule:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"yaml","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"yaml","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"detection"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  foo"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    a"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"42")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    b"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),'"evil"')),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  bar"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),":")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"    c"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"1.2.3.4")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#7EE787"}}),"  condition"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),": "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),"foo or not bar"))))),(0,n.yg)("p",null,"We translate this rule piece by building a symbol table of all keys (",(0,n.yg)("inlineCode",{parentName:"p"},"foo")," and\n",(0,n.yg)("inlineCode",{parentName:"p"},"bar"),"). Each sub-expression is a valid expression in itself:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("inlineCode",{parentName:"li"},"foo"),": ",(0,n.yg)("inlineCode",{parentName:"li"},'a == 42 && b == "evil"')),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("inlineCode",{parentName:"li"},"bar"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"c == 1.2.3.4"))),(0,n.yg)("p",null,"Finally, we combine the expression according to ",(0,n.yg)("inlineCode",{parentName:"p"},"condition"),":"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"(a "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"=="),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," 42"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," &&"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," b "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"=="),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),' "evil"'),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),") "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"||"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," !"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," (c "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"=="),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," 1.2"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"."),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"3.4"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),")"))))),(0,n.yg)("p",null,"We parse the YAML string values according to Tenzir's richer data model, e.g.,\nthe expression ",(0,n.yg)("inlineCode",{parentName:"p"},"c: 1.2.3.4")," becomes a field named ",(0,n.yg)("inlineCode",{parentName:"p"},"c")," and value ",(0,n.yg)("inlineCode",{parentName:"p"},"1.2.3.4")," of\ntype ",(0,n.yg)("inlineCode",{parentName:"p"},"ip"),", rather than a ",(0,n.yg)("inlineCode",{parentName:"p"},"string"),". Sigma also comes with its own ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/SigmaHQ/sigma-specification/blob/main/Taxonomy_specification.md"}),"event\ntaxonomy"),"\nto standardize field names. The ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator currently does not normalize\nfields according to this taxonomy but rather takes the field names verbatim from\nthe search identifier.")),(0,n.yg)("p",null,"Sigma uses ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/SigmaHQ/sigma-specification/blob/main/Sigma_specification.md#value-modifiers"}),"value\nmodifiers"),"\nto select a concrete relational operator for given search predicate. Without a\nmodifier, Sigma uses equality comparison (",(0,n.yg)("inlineCode",{parentName:"p"},"=="),") of field and value. For example,\nthe ",(0,n.yg)("inlineCode",{parentName:"p"},"contains")," modifier changes the relational operator to substring search, and\nthe ",(0,n.yg)("inlineCode",{parentName:"p"},"re")," modifier switches to a regular expression match. The table below shows\nwhat modifiers the ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator supports, where \u2705 means implemented, \ud83d\udea7 not\nyet implemented but possible, and \u274c not yet supported:"),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",y({parentName:"tr"},{align:null}),"Modifier"),(0,n.yg)("th",y({parentName:"tr"},{align:null}),"Use"),(0,n.yg)("th",y({parentName:"tr"},{align:"center"}),"sigmac"),(0,n.yg)("th",y({parentName:"tr"},{align:"center"}),"Tenzir"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"contains")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"perform a substring search with the value"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"startswith")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"match the value as a prefix"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"endswith")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"match the value as a suffix"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"base64")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"encode the value with Base64"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"base64offset")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"encode value as all three possible Base64 variants"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"utf16le"),"/",(0,n.yg)("inlineCode",{parentName:"td"},"wide")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"transform the value to UTF16 little endian"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\ud83d\udea7")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"utf16be")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"transform the value to UTF16 big endian"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\ud83d\udea7")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"utf16")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"transform the value to UTF16"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\ud83d\udea7")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"re")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"interpret the value as regular expression"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"cidr")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"interpret the value as a IP CIDR"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"all")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"changes the expression logic from OR to AND"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"lt")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"compare less than (",(0,n.yg)("inlineCode",{parentName:"td"},"<"),") the value"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"lte")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"compare less than or equal to (",(0,n.yg)("inlineCode",{parentName:"td"},"<="),") the value"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"gt")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"compare greater than (",(0,n.yg)("inlineCode",{parentName:"td"},">"),") the value"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"gte")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"compare greater than or equal to (",(0,n.yg)("inlineCode",{parentName:"td"},">="),") the value"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u2705")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",y({parentName:"tr"},{align:null}),(0,n.yg)("inlineCode",{parentName:"td"},"expand")),(0,n.yg)("td",y({parentName:"tr"},{align:null}),"expand value to placeholder strings, e.g., ",(0,n.yg)("inlineCode",{parentName:"td"},"%something%")),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c"),(0,n.yg)("td",y({parentName:"tr"},{align:"center"}),"\u274c")))),(0,n.yg)("h3",y({},{id:"path-string"}),(0,n.yg)("inlineCode",{parentName:"h3"},"path: string")),(0,n.yg)("p",null,"The rule to match."),(0,n.yg)("p",null,"If ",(0,n.yg)("inlineCode",{parentName:"p"},"path")," points to a rule, the operator transpiles the rule file at the time of pipeline creation."),(0,n.yg)("p",null,"If this points to a directory, the operator watches it and attempts to parse each contained file as\na Sigma rule. The ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator matches if ",(0,n.yg)("em",{parentName:"p"},"any")," of the contained rules\nmatch, effectively creating a disjunction of all rules inside the directory."),(0,n.yg)("h3",y({},{id:"refresh_interval--duration-optional"}),(0,n.yg)("inlineCode",{parentName:"h3"},"refresh_interval = duration (optional)")),(0,n.yg)("p",null,"How often the ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator looks at the specified rule or directory of rules\nto update its internal state."),(0,n.yg)("p",null,"Defaults to ",(0,n.yg)("inlineCode",{parentName:"p"},"5s"),"."),(0,n.yg)("h2",y({},{id:"examples"}),"Examples"),(0,n.yg)("h3",y({},{id:"apply-a-sigma-rule-to-an-evtx-file"}),"Apply a Sigma rule to an EVTX file"),(0,n.yg)("p",null,"The tool ",(0,n.yg)("a",y({parentName:"p"},{href:"https://github.com/omerbenamram/evtx"}),(0,n.yg)("inlineCode",{parentName:"a"},"evtx_dump"))," turns an EVTX file\ninto a JSON object. On the command line, use the ",(0,n.yg)("inlineCode",{parentName:"p"},"tenzir")," binary to pipe the\n",(0,n.yg)("inlineCode",{parentName:"p"},"evtx_dump")," output to a Tenzir pipeline using the ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"bash","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"bash","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}}),"evtx_dump"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," -o"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," jsonl"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," file.evtx"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}})," |"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FFA657"}})," tenzir"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," --tql2"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}})," 'read_json | sigma \"rule.yaml\"'"))))),(0,n.yg)("h3",y({},{id:"run-a-sigma-rule-on-historical-data"}),"Run a Sigma rule on historical data"),(0,n.yg)("p",null,"Apply a Sigma rule over historical data in a node from the last day:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"export")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"where"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}})," ts "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),">"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}})," now"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),"() "),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"-"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}})," 1d")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"sigma"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),' "rule.yaml"'))))),(0,n.yg)("h3",y({},{id:"stream-a-file-and-apply-a-set-of-sigma-rules-to-it"}),"Stream a file and apply a set of Sigma rules to it"),(0,n.yg)("p",null,"Watch a directory of Sigma rules and apply all of them on a continuous stream of\nSuricata events:"),(0,n.yg)("figure",y({},{"data-rehype-pretty-code-figure":""}),(0,n.yg)("pre",y({parentName:"figure"},{tabIndex:0,"data-language":"tql","data-theme":"github-dark-default"}),(0,n.yg)("code",y({parentName:"pre"},{"data-language":"tql","data-theme":"github-dark-default",style:{display:"grid"}}),(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"load_file"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),' "eve.json"'),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#E6EDF3"}}),", follow"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#FF7B72"}}),"="),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#79C0FF"}}),"true")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"read_suricata")),"\n",(0,n.yg)("span",y({parentName:"code"},{"data-line":""}),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#D2A8FF"}}),"sigma"),(0,n.yg)("span",y({parentName:"span"},{style:{color:"#A5D6FF"}}),' "/tmp/rules/"'))))),(0,n.yg)("p",null,"When you add a new file to ",(0,n.yg)("inlineCode",{parentName:"p"},"/tmp/rules"),", the ",(0,n.yg)("inlineCode",{parentName:"p"},"sigma")," operator transpiles it and\nwill match it on all subsequent inputs."))}v.isMDXComponent=!0}}]);