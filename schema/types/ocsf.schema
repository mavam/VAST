// The Transport Layer Security (TLS) object describes the negotiated TLS
// protocol used for secure communications over an establish network connection.
type ocsf.objects.tls = record{
  version: string,
  alert: int64,
  key_length: int64,
  certificate: ocsf.objects.certificate,
  cipher: string,
  sni: string,
  certificate_chain: list<string>,
  client_ciphers: list<string>,
  extension_list: list<ocsf.objects.tls_extension>,
  handshake_dur: int64,
  ja3_hash: ocsf.objects.fingerprint,
  ja3s_hash: ocsf.objects.fingerprint,
  sans: list<ocsf.objects.san>,
  server_ciphers: list<string>,
  tls_extension_list: list<ocsf.objects.tls_extension>,
}

// The Account object contains details about the account that initiated or
// performed a specific activity within a system or application.
type ocsf.objects.account = record{
  name: string,
  type: string,
  uid: string,
  labels: list<string>,
  type_id: int64,
}

// The Endpoint object describes a physical or virtual device that connects to
// and exchanges information with a computer network. Some examples of endpoints
// are mobile devices, desktop computers, virtual machines, embedded devices,
// and servers. Internet-of-Things devices—like cameras, lighting,
// refrigerators, security systems, smart speakers, and thermostats—are also
// endpoints.
type ocsf.objects.endpoint = record{
  name: string,
  owner: ocsf.objects.user,
  type: string,
  os: ocsf.objects.os,
  domain: string,
  ip: ip,
  location: ocsf.objects.location,
  hostname: string,
  uid: string,
  mac: string,
  type_id: int64,
  agent_list: list<ocsf.objects.agent>,
  hw_info: ocsf.objects.device_hw_info,
  instance_uid: string,
  interface_name: string,
  interface_uid: string,
  subnet_uid: string,
  vlan_uid: string,
  vpc_uid: string,
  zone: string,
}

// The Kill Chain Phase object represents a single phase of a cyber attack,
// including the initial reconnaissance and planning stages up to the final
// objective of the attacker. It provides a detailed description of each phase
// and its associated activities within the broader context of a cyber attack.
// See <a target='_blank' href='https://www.lockheedmartin.com/en-
// us/capabilities/cyber/cyber-kill-chain.html'>Cyber Kill Chain®</a>.
type ocsf.objects.kill_chain_phase = record{
  phase: string,
  phase_id: int64,
}

// The CIS Critical Security Control (CSC) contains information as defined by
// the Center for Internet Security Critical Security Control <a target='_blank'
// href='https://www.cisecurity.org/controls'>(CIS CSC)</a>. Prioritized set of
// actions to protect your organization and data from cyber-attack vectors.
type ocsf.objects.cis_csc = record{
  control: string,
  version: string,
}

// The Policy object describes the policies that are applicable. <p>Policy
// attributes provide traceability to the operational state of the security
// product at the time that the event was captured, facilitating forensics,
// troubleshooting, and policy tuning/adjustments.</p>
type ocsf.objects.policy = record{
  name: string,
  version: string,
  group: ocsf.objects.group,
  desc: string,
  uid: string,
  is_applied: bool,
}

// The MITRE ATT&CK® Technique object describes the technique ID and/or name
// associated to an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK® Matrix</a>.
type ocsf.objects.technique = record{
  name: string,
  uid: string,
  src_url: string,
}

// The Session object describes details about an authenticated session. e.g.
// Session Creation Time, Session Issuer. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Session/'>d3f:Session</a>.
type ocsf.objects.session = record{
  count: int64,
  terminal: string,
  uid: string,
  uuid: string,
  issuer: string,
  created_time: time,
  credential_uid: string,
  expiration_reason: string,
  expiration_time: time,
  is_mfa: bool,
  is_remote: bool,
  is_vpn: bool,
  uid_alt: string,
}

// An autonomous system (AS) is a collection of connected Internet Protocol (IP)
// routing prefixes under the control of one or more network operators on behalf
// of a single administrative entity or domain that presents a common, clearly
// defined routing policy to the internet.
type ocsf.objects.autonomous_system = record{
  name: string,
  number: int64,
}

// The API, or Application Programming Interface, object represents  information
// pertaining to an API request and response.
type ocsf.objects.api = record{
  version: string,
  request: ocsf.objects.request,
  service: ocsf.objects.service,
  group: ocsf.objects.group,
  response: ocsf.objects.response,
  operation: string,
}

// The Security State object describes the security related state of a managed
// entity.
type ocsf.objects.security_state = record{
  state: string,
  state_id: int64,
}

// The network proxy endpoint object describes a proxy server, which acts as an
// intermediary between a client requesting a resource and the server providing
// that resource.  Defined by D3FEND <a target='_blank' href='https://d3fend.mit
// re.org/dao/artifact/d3f:ProxyServer/'>d3f:ProxyServer</a>.
type ocsf.objects.network_proxy = record{
  name: string,
  owner: ocsf.objects.user,
  port: int64,
  type: string,
  os: ocsf.objects.os,
  domain: string,
  ip: ip,
  location: ocsf.objects.location,
  hostname: string,
  uid: string,
  mac: string,
  type_id: int64,
  agent_list: list<ocsf.objects.agent>,
  autonomous_system: ocsf.objects.autonomous_system,
  hw_info: ocsf.objects.device_hw_info,
  instance_uid: string,
  interface_name: string,
  interface_uid: string,
  intermediate_ips: list<ip>,
  subnet_uid: string,
  svc_name: string,
  vlan_uid: string,
  vpc_uid: string,
  zone: string,
}

// The DNS query object represents a specific request made to the Domain Name
// System (DNS) to retrieve information about a domain or perform a DNS
// operation. This object encapsulates the necessary attributes and methods to
// construct and send DNS queries, specify the query type (e.g., A, AAAA, MX).
// Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artif
// act/d3f:DNSLookup/'>d3f:DNSLookup</a>.
type ocsf.objects.dns_query = record{
  type: string,
  hostname: string,
  class: string,
  opcode: string,
  opcode_id: int64,
  packet_uid: int64,
}

// The Email object describes the email metadata such as sender, recipients, and
// direction. Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Email/'>d3f:Email</a>.
type ocsf.objects.email = record{
  size: int64,
  uid: string,
  from: string,
  cc: list<string>,
  to: list<string>,
  subject: string,
  delivered_to: string,
  message_uid: string,
  raw_header: string,
  reply_to: string,
  smtp_from: string,
  smtp_to: list<string>,
  x_originating_ip: list<ip>,
}

// The OCSF Schema Extension object provides detailed information about the
// schema extension used to construct the event. The schema extensions are
// registered in the <a target='_blank' href='https://github.com/ocsf/ocsf-
// schema/blob/main/extensions.md'>extensions.md</a> file.
type ocsf.objects.extension = record{
  name: string,
  version: string,
  uid: string,
}

// The Firewall Rule object represents a specific rule within a firewall policy
// or event. It contains information about a rule's configuration, properties,
// and associated actions that define how network traffic is handled by the
// firewall.
type ocsf.objects.firewall_rule = record{
  name: string,
  type: string,
  version: string,
  desc: string,
  uid: string,
  category: string,
  duration: int64,
  condition: string,
  match_details: list<string>,
  match_location: string,
  rate_limit: int64,
  sensitivity: string,
}

// The Uniform Resource Locator(URL) object describes the characteristics of a
// URL. Defined in <a target='_blank'
// href='https://datatracker.ietf.org/doc/html/rfc1738'>RFC 1738</a> and by
// D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:URL/'>d3f:URL</a>.
type ocsf.objects.url = record{
  port: int64,
  scheme: string,
  path: string,
  domain: string,
  hostname: string,
  query_string: string,
  categories: list<string>,
  category_ids: list<int64>,
  resource_type: string,
  subdomain: string,
  url_string: string,
}

// The additional LDAP attributes that describe a person.
type ocsf.objects.ldap_person = record{
  location: ocsf.objects.location,
  labels: list<string>,
  cost_center: string,
  created_time: time,
  deleted_time: time,
  email_addrs: list<string>,
  employee_uid: string,
  given_name: string,
  hire_time: time,
  job_title: string,
  last_login_time: time,
  ldap_cn: string,
  ldap_dn: string,
  leave_time: time,
  modified_time: time,
  office_location: string,
  surname: string,
}

// The MITRE ATT&CK® Sub Technique object describes the sub technique ID and/or
// name associated to an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK® Matrix</a>.
type ocsf.objects.sub_technique = record{
  name: string,
  uid: string,
  src_url: string,
}

// The Network Endpoint object describes characteristics of a network endpoint.
// These can be a source or destination of a network connection.
type ocsf.objects.network_endpoint = record{
  name: string,
  owner: ocsf.objects.user,
  port: int64,
  type: string,
  os: ocsf.objects.os,
  domain: string,
  ip: ip,
  location: ocsf.objects.location,
  hostname: string,
  uid: string,
  mac: string,
  type_id: int64,
  agent_list: list<ocsf.objects.agent>,
  autonomous_system: ocsf.objects.autonomous_system,
  hw_info: ocsf.objects.device_hw_info,
  instance_uid: string,
  interface_name: string,
  interface_uid: string,
  intermediate_ips: list<ip>,
  proxy_endpoint: ocsf.objects.network_proxy,
  subnet_uid: string,
  svc_name: string,
  vlan_uid: string,
  vpc_uid: string,
  zone: string,
}

// The JA4+ fingerprint object provides detailed fingerprint information about
// various aspects of network traffic which is both machine and human readable.
type ocsf.objects.ja4_fingerprint = record{
  type: string,
  value: string,
  type_id: int64,
  section_a: string,
  section_b: string,
  section_c: string,
  section_d: string,
}

// The Display object contains information about the physical or virtual display
// connected to a computer system.
type ocsf.objects.display = record{
  color_depth: int64,
  physical_height: int64,
  physical_orientation: int64,
  physical_width: int64,
  scale_factor: int64,
}

// The Metric object defines a simple name/value pair entity for a metric.
type ocsf.objects.metric = record{
  name: string,
  value: string,
}

// The <a target='_blank' href='https://attack.mitre.org'>MITRE ATT&CK®</a>
// object describes the tactic, technique & sub-technique associated to an
// attack as defined in <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK® Matrix</a>.
type ocsf.objects.attack = record{
  version: string,
  tactics: list<ocsf.objects.tactic>,
  technique: ocsf.objects.technique,
  sub_technique: ocsf.objects.sub_technique,
  tactic: ocsf.objects.tactic,
}

// An Authentication Factor object describes a category of methods used for
// identity verification in an authentication attempt.
type ocsf.objects.auth_factor = record{
  device: ocsf.objects.device,
  email_addr: string,
  factor_type: string,
  factor_type_id: int64,
  is_hotp: bool,
  is_totp: bool,
  phone_number: string,
  provider: string,
  security_questions: list<string>,
}

// The HTTP Response object contains detailed information about the response
// sent from a web server to the requester. It encompasses attributes and
// metadata that describe the response status, headers, body content, and other
// relevant information.
type ocsf.objects.http_response = record{
  code: int64,
  message: string,
  status: string,
  length: int64,
  content_type: string,
  http_headers: list<ocsf.objects.http_header>,
  latency: int64,
}

// The Network Traffic object describes characteristics of network traffic.
// Network traffic refers to data moving across a network at a given point of
// time. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao
// /artifact/d3f:NetworkTraffic/'>d3f:NetworkTraffic</a>.
type ocsf.objects.network_traffic = record{
  bytes_in: int64,
  bytes_out: int64,
  chunks: int64,
  bytes: int64,
  chunks_in: int64,
  chunks_out: int64,
  packets: int64,
  packets_in: int64,
  packets_out: int64,
}

// The Image object provides a description of a specific Virtual Machine (VM) or
// Container image. Defined by D3FEND <a target='_blank' href='https://d3fend.mi
// tre.org/dao/artifact/d3f:ContainerImage/'>d3f:ContainerImage</a>.
type ocsf.objects.image = record{
  name: string,
  tag: string,
  path: string,
  uid: string,
  labels: list<string>,
}

// The Identity Provider object contains detailed information about a provider
// responsible for creating, maintaining, and managing identity information
// while offering authentication services to applications. An Identity Provider
// (IdP) serves as a trusted authority that verifies the identity of users and
// issues authentication tokens or assertions to enable secure access to
// applications or services.
type ocsf.objects.idp = record{
  name: string,
  uid: string,
}

// The Resource Details object describes details about resources that were
// affected by the activity/event.
type ocsf.objects.resource_details = record{
  name: string,
  owner: ocsf.objects.user,
  type: string,
  version: string,
  group: ocsf.objects.group,
  uid: string,
  labels: list<string>,
  namespace: string,
  agent_list: list<ocsf.objects.agent>,
  criticality: string,
}

// The Process object describes a running instance of a launched program.
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Process/'>d3f:Process</a>.
type ocsf.objects.process = record{
  name: string,
  pid: int64,
  session: ocsf.objects.session,
  file: ocsf.objects.file,
  user: ocsf.objects.user,
  tid: int64,
  uid: string,
  loaded_modules: list<string>,
  cmd_line: string,
  created_time: time,
  integrity: string,
  integrity_id: int64,
  lineage: list<string>,
  sandbox: string,
  terminated_time: time,
  xattributes: ocsf.objects.object,
}

// The <a target='_blank' href='https://d3fend.mitre.org'>MITRE D3FEND™</a>
// object describes the tactic, technique & sub-technique associated with a
// countermeasure as defined in <a target='_blank'
// href='https://d3fend.mitre.org/'>DEFEND Matrix<sup>TM</sup></a>.
type ocsf.objects.d3fend = record{
  version: string,
  d3f_tactic: ocsf.objects.d3f_tactic,
  d3f_technique: ocsf.objects.d3f_technique,
}

// The Remediation object describes the recommended remediation steps to address
// identified issue(s).
type ocsf.objects.remediation = record{
  desc: string,
  references: list<string>,
  kb_article_list: list<ocsf.objects.kb_article>,
  kb_articles: list<string>,
}

// The Windows resource object describes a resource object managed by Windows,
// such as mutant or timer.
type ocsf.objects.win_resource = record{
  name: string,
  type: string,
  uid: string,
  labels: list<string>,
  details: string,
  type_id: int64,
  svc_name: string,
}

// The load balancer object describes the load balancer entity and contains
// additional information regarding the distribution of traffic across a
// network.
type ocsf.objects.load_balancer = record{
  code: int64,
  message: string,
  name: string,
  ip: ip,
  uid: string,
  classification: string,
  dst_endpoint: ocsf.objects.network_endpoint,
  endpoint_connections: list<ocsf.objects.endpoint_connection>,
  error_message: string,
  metrics: list<ocsf.objects.metric>,
  status_detail: string,
}

// The DNS Answer object represents a specific response provided by the Domain
// Name System (DNS) when querying for information about a domain or performing
// a DNS operation. It encapsulates the relevant details and data returned by
// the DNS server in response to a query.
type ocsf.objects.dns_answer = record{
  flags: list<string>,
  type: string,
  ttl: int64,
  class: string,
  flag_ids: list<int64>,
  packet_uid: int64,
  rdata: string,
}

// The Service object describes characteristics of a service, <code> e.g. AWS
// EC2. </code>
type ocsf.objects.service = record{
  name: string,
  version: string,
  uid: string,
  labels: list<string>,
}

// The Keyboard Information object contains details and attributes related to a
// computer or device keyboard. It encompasses information that describes the
// characteristics, capabilities, and configuration of the keyboard.
type ocsf.objects.keyboard_info = record{
  function_keys: int64,
  ime: string,
  keyboard_layout: string,
  keyboard_subtype: int64,
  keyboard_type: string,
}

// The Container object describes an instance of a specific container. A
// container is a prepackaged, portable system image that runs isolated on an
// existing system using a container runtime like containerd.
type ocsf.objects.container = record{
  name: string,
  runtime: string,
  size: int64,
  tag: string,
  uid: string,
  image: ocsf.objects.image,
  hash: ocsf.objects.fingerprint,
  network_driver: string,
  orchestrator: string,
  pod_uuid: string,
}

// The vulnerability is an unintended characteristic of a computing component or
// system configuration that multiplies the risk of an adverse event or a loss
// occurring either due to accidental exposure, deliberate attack, or conflict
// with new system components.
type ocsf.objects.vulnerability = record{
  title: string,
  desc: string,
  references: list<string>,
  severity: string,
  remediation: ocsf.objects.remediation,
  affected_code: list<ocsf.objects.affected_code>,
  affected_packages: list<ocsf.objects.affected_package>,
  cve: ocsf.objects.cve,
  cwe: ocsf.objects.cwe,
  first_seen_time: time,
  fix_available: bool,
  is_exploit_available: bool,
  is_fix_available: bool,
  kb_article_list: list<ocsf.objects.kb_article>,
  kb_articles: list<string>,
  last_seen_time: time,
  packages: list<ocsf.objects.package>,
  related_vulnerabilities: list<string>,
  vendor_name: string,
}

// The HTTP Cookie object, also known as a web cookie or browser cookie,
// contains details and values pertaining to a small piece of data that a server
// sends to a user's web browser. This data is then stored by the browser and
// sent back to the server with subsequent requests, allowing the server to
// remember and track certain information about the user's browsing session or
// preferences.
type ocsf.objects.http_cookie = record{
  name: string,
  value: string,
  path: string,
  domain: string,
  secure: bool,
  http_only: bool,
  expiration_time: time,
  is_http_only: bool,
  is_secure: bool,
  samesite: string,
}

// The resources of a WHOIS record for a given domain. This can include domain
// names, IP address blocks, autonomous system information, and/or contact and
// registration information for a domain.
type ocsf.objects.whois = record{
  status: string,
  domain: string,
  registrar: string,
  subdomains: list<string>,
  subnet: subnet,
  autonomous_system: ocsf.objects.autonomous_system,
  created_time: time,
  dnssec_status_id: int64,
  dnssec_status: string,
  domain_contacts: list<ocsf.objects.domain_contact>,
  email_addr: string,
  last_seen_time: time,
  name_servers: list<string>,
  phone_number: string,
}

// The KB Article object contains metadata that describes the patch or update.
type ocsf.objects.kb_article = record{
  size: int64,
  os: ocsf.objects.os,
  title: string,
  product: ocsf.objects.product,
  uid: string,
  severity: string,
  avg_timespan: ocsf.objects.timespan,
  bulletin: string,
  classification: string,
  created_time: time,
  install_state: string,
  install_state_id: int64,
  is_superseded: bool,
  src_url: string,
}

// The contact information related to a domain registration, e.g., registrant,
// administrator, abuse, billing, or technical contact.
type ocsf.objects.domain_contact = record{
  name: string,
  type: string,
  location: ocsf.objects.location,
  uid: string,
  type_id: int64,
  email_addr: string,
  phone_number: string,
}

// The MITRE ATT&CK® Tactic object describes the tactic ID and/or name that is
// associated to an attack, as defined by <a target='_blank'
// href='https://attack.mitre.org/wiki/ATT&CK_Matrix'>ATT&CK® Matrix</a>.
type ocsf.objects.tactic = record{
  name: string,
  uid: string,
  src_url: string,
}

// The Common Vulnerabilities and Exposures (CVE) object represents publicly
// disclosed cybersecurity vulnerabilities defined in CVE Program catalog (<a
// target='_blank' href='https://cve.mitre.org/'>CVE</a>). There is one CVE
// Record for each vulnerability in the catalog.
type ocsf.objects.cve = record{
  type: string,
  title: string,
  product: ocsf.objects.product,
  desc: string,
  uid: string,
  references: list<string>,
  created_time: time,
  cvss: list<ocsf.objects.cvss>,
  cwe: ocsf.objects.cwe,
  cwe_uid: string,
  cwe_url: string,
  epss: ocsf.objects.epss,
  modified_time: time,
}

// The Geo Location object describes a geographical location, usually associated
// with an IP address. Defined by D3FEND <a target='_blank' href='https://d3fend
// .mitre.org/dao/artifact/d3f:PhysicalLocation/'>d3f:PhysicalLocation</a>.
type ocsf.objects.location = record{
  desc: string,
  long: double,
  city: string,
  country: string,
  coordinates: list<double>,
  continent: string,
  geohash: string,
  is_on_premises: bool,
  isp: string,
  lat: double,
  postal_code: string,
  provider: string,
  region: string,
}

// The Module object describes the load attributes of a module.
type ocsf.objects.module = record{
  type: string,
  file: ocsf.objects.file,
  base_address: string,
  function_name: string,
  load_type: string,
  load_type_id: int64,
  start_address: string,
}

// An Agent (also known as a Sensor) is typically installed on an Operating
// System (OS) and serves as a specialized software component that can be
// designed to monitor, detect, collect, archive, or take action. These
// activities and possible actions are defined by the upstream system
// controlling the Agent and its intended purpose. For instance, an Agent can
// include Endpoint Detection & Response (EDR) agents, backup/disaster recovery
// sensors, Application Performance Monitoring or profiling sensors, and similar
// software.
type ocsf.objects.agent = record{
  name: string,
  type: string,
  version: string,
  uid: string,
  type_id: int64,
  policies: list<ocsf.objects.policy>,
  uid_alt: string,
  vendor_name: string,
}

// The HTTP Request object represents the attributes of a request made to a web
// server. It encapsulates the details and metadata associated with an HTTP
// request, including the request method, headers, URL, query parameters, body
// content, and other relevant information.
type ocsf.objects.http_request = record{
  args: string,
  version: string,
  length: int64,
  uid: string,
  url: ocsf.objects.url,
  x_forwarded_for: list<ip>,
  user_agent: string,
  http_headers: list<ocsf.objects.http_header>,
  http_method: string,
  referrer: string,
}

// The Email Authentication object describes the Sender Policy Framework (SPF),
// DomainKeys Identified Mail (DKIM) and Domain-based Message Authentication,
// Reporting and Conformance (DMARC) attributes of an email.
type ocsf.objects.email_auth = record{
  spf: string,
  dkim: string,
  dkim_domain: string,
  dkim_signature: string,
  dmarc: string,
  dmarc_override: string,
  dmarc_policy: string,
}

// The CIS Benchmark Result object contains information as defined by the Center
// for Internet Security (<a target='_blank'
// href='https://www.cisecurity.org/cis-benchmarks/'>CIS</a>) benchmark result.
// CIS Benchmarks are a collection of best practices for securely configuring IT
// systems, software, networks, and cloud infrastructure.
type ocsf.objects.cis_benchmark_result = record{
  name: string,
  desc: string,
  remediation: ocsf.objects.remediation,
  rule: ocsf.objects.rule,
}

// The Finding Information object describes metadata related to a security
// finding generated by a security tool or system.
type ocsf.objects.finding_info = record{
  title: string,
  desc: string,
  uid: string,
  types: list<string>,
  attacks: list<ocsf.objects.attack>,
  analytic: ocsf.objects.analytic,
  created_time: time,
  data_sources: list<string>,
  first_seen_time: time,
  kill_chain: list<ocsf.objects.kill_chain_phase>,
  last_seen_time: time,
  modified_time: time,
  product_uid: string,
  related_analytics: list<ocsf.objects.analytic>,
  related_events: list<ocsf.objects.related_event>,
  src_url: string,
}

// The Device object represents an addressable computer system or host, which is
// typically connected to a computer network and participates in the
// transmission or processing of data within the computer network. Defined by
// D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Host/'>d3f:Host</a>.
type ocsf.objects.device = record{
  hw_info: ocsf.objects.device_hw_info,
  groups: list<ocsf.objects.group>,
  zone: string,
  image: ocsf.objects.image,
  ip: ip,
  vpc_uid: string,
  network_interfaces: list<ocsf.objects.network_interface>,
  location: ocsf.objects.location,
  owner: ocsf.objects.user,
  uid: string,
  is_managed: bool,
  is_personal: bool,
  is_compliant: bool,
  os: ocsf.objects.os,
  region: string,
  org: ocsf.objects.organization,
  autoscale_uid: string,
  risk_level_id: int64,
  mac: string,
  interface_name: string,
  imei: string,
  domain: string,
  type_id: int64,
  vlan_uid: string,
  uid_alt: string,
  last_seen_time: time,
  is_trusted: bool,
  hostname: string,
  first_seen_time: time,
  name: string,
  agent_list: list<ocsf.objects.agent>,
  interface_uid: string,
  modified_time: time,
  subnet_uid: string,
  created_time: time,
  subnet: subnet,
  hypervisor: string,
  instance_uid: string,
  type: string,
  risk_level: string,
  desc: string,
  boot_time: time,
  risk_score: int64,
}

// The MITRE DEFEND™ Technique object describes the leaf defensive technique ID
// and/or name associated to a countermeasure, as defined by <a target='_blank'
// href='https://d3fend.mitre.org'>D3FEND<sup>TM</sup> Matrix</a>.
type ocsf.objects.d3f_technique = record{
  name: string,
  uid: string,
  src_url: string,
}

// The Managed Entity object describes the type and version of an entity, such
// as a user, device, or policy.  For types in the <code>type_id</code> enum
// list, an associated attribute should be populated.  If the type of entity is
// not in the <code>type_id</code> list, information can be put into the
// <code>data</code> attribute and the <code>type</code> attribute should
// identify the entity.
type ocsf.objects.managed_entity = record{
  name: string,
  type: string,
  version: string,
  user: ocsf.objects.user,
  device: ocsf.objects.device,
  group: ocsf.objects.group,
  uid: string,
  email: ocsf.objects.email,
  org: ocsf.objects.organization,
  type_id: int64,
  policy: ocsf.objects.policy,
}

// The Affected Package object describes details about a software package
// identified as affected by a vulnerability/vulnerabilities.
type ocsf.objects.affected_package = record{
  name: string,
  type: string,
  version: string,
  path: string,
  hash: ocsf.objects.fingerprint,
  release: string,
  epoch: int64,
  type_id: int64,
  license: string,
  remediation: ocsf.objects.remediation,
  architecture: string,
  cpe_name: string,
  fixed_in_version: string,
  package_manager: string,
  purl: string,
  vendor_name: string,
}

// The Web Resource object describes characteristics of a web resource that was
// affected by the activity/event.
type ocsf.objects.web_resource = record{
  name: string,
  type: string,
  desc: string,
  uid: string,
  labels: list<string>,
  url_string: string,
}

// The Scan object describes characteristics of a proactive scan.
type ocsf.objects.scan = record{
  name: string,
  type: string,
  uid: string,
  type_id: int64,
}

// The CIS Control (aka Critical Security Control) object describes a
// prioritized set of actions to protect your organization and data from cyber-
// attack vectors. The <a target='_blank'
// href='https://www.cisecurity.org/controls'>CIS Controls</a> are defined by
// the Center for Internet Security.
type ocsf.objects.cis_control = record{
  name: string,
  version: string,
  desc: string,
}

// The Network Connection Information object describes characteristics of a
// network connection. Defined by D3FEND <a target='_blank' href='https://d3fend
// .mitre.org/dao/artifact/d3f:NetworkSession/'>d3f:NetworkSession</a>.
type ocsf.objects.network_connection_info = record{
  session: ocsf.objects.session,
  uid: string,
  boundary: string,
  protocol_name: string,
  direction: string,
  boundary_id: int64,
  direction_id: int64,
  protocol_num: int64,
  protocol_ver: string,
  protocol_ver_id: int64,
  tcp_flags: int64,
}

// The database object is used for databases which are typically datastore
// services that contain an organized collection of structured and unstructured
// data or a types of data.
type ocsf.objects.database = record{
  name: string,
  size: int64,
  type: string,
  desc: string,
  uid: string,
  groups: list<ocsf.objects.group>,
  type_id: int64,
  created_time: time,
  modified_time: time,
}

// The RPC Interface represents the remote procedure call interface used in the
// DCE/RPC session.
type ocsf.objects.rpc_interface = record{
  version: string,
  uuid: string,
  ack_reason: int64,
  ack_result: int64,
}

// The Request Elements object describes characteristics of an API request.
type ocsf.objects.request = record{
  flags: list<string>,
  uid: string,
  containers: list<ocsf.objects.container>,
}

// The TLS Extension object describes additional attributes that extend the base
// Transport Layer Security (TLS) object.
type ocsf.objects.tls_extension = record{
  type: string,
  type_id: int64,
}

// The Subject Alternative name (SAN) object describes a SAN secured by a
// digital certificate
type ocsf.objects.san = record{
  name: string,
  type: string,
}

// The registry key object describes a Windows registry key. Defined by D3FEND
// <a target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:WindowsReg
// istryKey/'>d3f:WindowsRegistryKey</a>.
type ocsf.objects.reg_key = record{
  path: string,
  is_system: bool,
  modified_time: time,
  security_descriptor: string,
}

// The Windows Service object describes a Windows service.
type ocsf.objects.win_service = record{
  name: string,
  version: string,
  uid: string,
  labels: list<string>,
  cmd_line: string,
  load_order_group: string,
  service_category: string,
  service_category_id: int64,
  service_dependencies: list<string>,
  service_error_control: string,
  service_error_control_id: int64,
  service_start_type: string,
  service_start_type_id: int64,
  service_start_name: string,
  service_type: string,
  service_type_id: int64,
}

// The Actor object contains details about the user, role, application, service,
// or process that initiated or performed a specific activity.
type ocsf.objects.actor = record{
  process: ocsf.objects.process,
  session: ocsf.objects.session,
  user: ocsf.objects.user,
  app_name: string,
  app_uid: string,
  authorizations: list<ocsf.objects.authorization>,
  idp: ocsf.objects.idp,
  invoked_by: string,
}

// The CIS Benchmark object describes best practices for securely configuring IT
// systems, software, networks, and cloud infrastructure as defined by the <a
// target='_blank' href='https://www.cisecurity.org/cis-benchmarks/'>Center for
// Internet Security</a>. See also <a target='_blank'
// href='https://www.cisecurity.org/insights/blog/getting-to-know-the-cis-
// benchmarks'>Getting to Know the CIS Benchmarks</a>.
type ocsf.objects.cis_benchmark = record{
  name: string,
  desc: string,
  cis_controls: list<ocsf.objects.cis_control>,
}

// An unordered collection of attributes. It defines a set of attributes
// available in all objects. It can be also used as a generic object to log
// objects that are not otherwise defined by the schema.
type ocsf.objects.object = record{
}

// The OSINT (Open Source Intelligence) object contains details related to an
// indicator such as the indicator itself, related indicators, geolocation,
// registrar information, subdomains, analyst commentary, and other contextual
// information. This information can be used to further enrich a detection or
// finding by providing decisioning support to other analysts and engineers.
type ocsf.objects.osint = record{
  name: string,
  type: string,
  value: string,
  location: ocsf.objects.location,
  uid: string,
  comment: string,
  signatures: list<ocsf.objects.digital_signature>,
  subdomains: list<string>,
  email: ocsf.objects.email,
  type_id: int64,
  attacks: list<ocsf.objects.attack>,
  answers: list<ocsf.objects.dns_answer>,
  autonomous_system: ocsf.objects.autonomous_system,
  confidence: string,
  confidence_id: int64,
  email_auth: ocsf.objects.email_auth,
  kill_chain: list<ocsf.objects.kill_chain_phase>,
  src_url: string,
  tlp: string,
  vendor_name: string,
  vulnerabilities: list<ocsf.objects.vulnerability>,
  whois: ocsf.objects.whois,
}

// The User object describes the characteristics of a user/person or a security
// principal. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.or
// g/dao/artifact/d3f:UserAccount/'>d3f:UserAccount</a>.
type ocsf.objects.user = record{
  name: string,
  type: string,
  domain: string,
  uid: string,
  org: ocsf.objects.organization,
  groups: list<ocsf.objects.group>,
  type_id: int64,
  full_name: string,
  account: ocsf.objects.account,
  credential_uid: string,
  email_addr: string,
  ldap_person: ocsf.objects.ldap_person,
  risk_level: string,
  risk_level_id: int64,
  risk_score: int64,
  uid_alt: string,
}

// The Reputation object describes the reputation/risk score of an entity (e.g.
// device, user, domain).
type ocsf.objects.reputation = record{
  base_score: double,
  provider: string,
  score: string,
  score_id: int64,
}

// The MITRE D3FEND™ Tactic object describes the tactic ID and/or name that is
// associated to an attack, as defined by <a target='_blank'
// href='https://d3fend.mitre.org'>D3FEND<sup>TM</sup> Matrix</a>.
type ocsf.objects.d3f_tactic = record{
  name: string,
  uid: string,
  src_url: string,
}

// The Metadata object describes the metadata associated with the event. Defined
// by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Metadata/'>d3f:Metadata</a>.
type ocsf.objects.metadata = record{
  version: string,
  extension: ocsf.objects.extension,
  product: ocsf.objects.product,
  uid: string,
  extensions: list<ocsf.objects.extension>,
  labels: list<string>,
  log_level: string,
  sequence: int64,
  profiles: list<string>,
  correlation_uid: string,
  event_code: string,
  log_name: string,
  log_provider: string,
  log_version: string,
  logged_time: time,
  loggers: list<ocsf.objects.logger>,
  modified_time: time,
  original_time: string,
  processed_time: time,
  tenant_uid: string,
}

// The peripheral device object describes the identity, vendor and model of a
// peripheral device.
type ocsf.objects.peripheral_device = record{
  name: string,
  class: string,
  uid: string,
  model: string,
  serial_number: string,
  vendor_name: string,
}

// The Kernel Extension object describes a kernel driver that has been loaded or
// unloaded into the operating system (OS) kernel. Defined by D3FEND <a
// target='_blank' href='https://d3fend.mitre.org/dao/artifact/d3f:KernelModule/
// '>d3f:KernelModule</a>.
type ocsf.objects.kernel_driver = record{
  file: ocsf.objects.file,
}

// The Operating System (OS) object describes characteristics of an OS, such as
// Linux or Windows. Defined by D3FEND <a target='_blank' href='https://d3fend.m
// itre.org/dao/artifact/d3f:OperatingSystem/'>d3f:OperatingSystem</a>.
type ocsf.objects.os = record{
  name: string,
  type: string,
  version: string,
  build: string,
  country: string,
  type_id: int64,
  lang: string,
  cpe_name: string,
  cpu_bits: int64,
  edition: string,
  sp_name: string,
  sp_ver: int64,
}

// The Device Hardware Information object contains details and specifications of
// the physical components that make up a device. This information provides an
// overview of the hardware capabilities, configuration, and characteristics of
// the device.
type ocsf.objects.device_hw_info = record{
  bios_date: string,
  bios_manufacturer: string,
  bios_ver: string,
  chassis: string,
  cpu_bits: int64,
  cpu_cores: int64,
  cpu_count: int64,
  cpu_speed: int64,
  cpu_type: string,
  desktop_display: ocsf.objects.display,
  keyboard_info: ocsf.objects.keyboard_info,
  ram_size: int64,
  serial_number: string,
}

// TThe HTTP Header object represents the headers sent in an HTTP request or
// response. HTTP headers are key-value pairs that convey additional information
// about the HTTP message, including details about the content, caching,
// authentication, encoding, and other aspects of the communication.
type ocsf.objects.http_header = record{
  name: string,
  value: string,
}

// The Job object provides information about a scheduled job or task, including
// its name, command line, and state. It encompasses attributes that describe
// the properties and status of the scheduled job.
type ocsf.objects.job = record{
  name: string,
  file: ocsf.objects.file,
  user: ocsf.objects.user,
  desc: string,
  cmd_line: string,
  created_time: time,
  last_run_time: time,
  next_run_time: time,
  run_state: string,
  run_state_id: int64,
}

// The Endpoint Connection object contains information detailing a connection
// attempt to an endpoint.
type ocsf.objects.endpoint_connection = record{
  code: int64,
  network_endpoint: ocsf.objects.network_endpoint,
}

// The Response Elements object describes characteristics of an API response.
type ocsf.objects.response = record{
  error: string,
  code: int64,
  flags: list<string>,
  message: string,
  containers: list<ocsf.objects.container>,
  error_message: string,
}

// The DCE/RPC, or Distributed Computing Environment/Remote Procedure Call,
// object describes the remote procedure call system for distributed computing
// environments. Defined by D3FEND <a target='_blank' href='https://d3fend.mitre
// .org/dao/artifact/d3f:RemoteProcedureCall/'>d3f:RemoteProcedureCall</a>.
type ocsf.objects.dce_rpc = record{
  command: string,
  flags: list<string>,
  command_response: string,
  opnum: int64,
  rpc_interface: ocsf.objects.rpc_interface,
}

// A collection of evidence artifacts associated to the activity/activities that
// triggered a security detection.
type ocsf.objects.evidences = record{
  process: ocsf.objects.process,
  file: ocsf.objects.file,
  user: ocsf.objects.user,
  device: ocsf.objects.device,
  query: ocsf.objects.dns_query,
  connection_info: ocsf.objects.network_connection_info,
  url: ocsf.objects.url,
  email: ocsf.objects.email,
  api: ocsf.objects.api,
  actor: ocsf.objects.actor,
  container: ocsf.objects.container,
  database: ocsf.objects.database,
  databucket: ocsf.objects.databucket,
  dst_endpoint: ocsf.objects.network_endpoint,
  job: ocsf.objects.job,
  src_endpoint: ocsf.objects.network_endpoint,
  reg_key: ocsf.objects.reg_key,
  reg_value: ocsf.objects.reg_value,
  win_service: ocsf.objects.win_service,
}

// The Compliance object contains information about Industry and Regulatory
// Framework standards, controls and requirements.
type ocsf.objects.compliance = record{
  control: string,
  status: string,
  compliance_references: list<ocsf.objects.kb_article>,
  compliance_standards: list<ocsf.objects.kb_article>,
  requirements: list<string>,
  standards: list<string>,
  status_code: string,
  status_detail: string,
  status_id: int64,
}

// The Logger object represents the device and product where events are stored
// with times for receipt and transmission.  This may be at the source device
// where the event occurred, a remote scanning device, intermediate hops, or the
// ultimate destination.
type ocsf.objects.logger = record{
  name: string,
  version: string,
  device: ocsf.objects.device,
  product: ocsf.objects.product,
  uid: string,
  log_level: string,
  log_name: string,
  log_provider: string,
  log_version: string,
  logged_time: time,
  transmit_time: time,
}

// The Data Classification object includes information about data classification
// levels and data category types.
type ocsf.objects.data_classification = record{
  category: string,
  category_id: int64,
  confidentiality: string,
  confidentiality_id: int64,
  policy: ocsf.objects.policy,
}

// The Cloud object contains information about a cloud account such as AWS
// Account ID, regions, etc.
type ocsf.objects.cloud = record{
  org: ocsf.objects.organization,
  account: ocsf.objects.account,
  project_uid: string,
  provider: string,
  region: string,
  zone: string,
}

// The Exploit Prediction Scoring System (EPSS) object describes the estimated
// probability a vulnerability will be exploited. EPSS is a community-driven
// effort to combine descriptive information about vulnerabilities (CVEs) with
// evidence of actual exploitation in-the-wild. (<a target='_blank'
// href='https://www.first.org/epss/'>EPSS</a>).
type ocsf.objects.epss = record{
  version: string,
  created_time: time,
  percentile: double,
  score: string,
}

// The Analytic object contains details about the analytic technique used to
// analyze and derive insights from the data or information that led to the
// creation of a finding or conclusion.
type ocsf.objects.analytic = record{
  name: string,
  type: string,
  version: string,
  desc: string,
  uid: string,
  category: string,
  type_id: int64,
}

// The query info object holds information related to data access within a
// datastore. To access, manipulate, delete, or retrieve data from a datastore,
// a query must be written using a specific syntax.
type ocsf.objects.query_info = record{
  name: string,
  bytes: int64,
  uid: string,
  query_string: string,
  query_time: time,
}

// The Data Security object describes the characteristics, techniques and
// content of a Data Loss Prevention (DLP), Data Loss Detection (DLD), Data
// Classification, or similar tools' finding, alert, or detection mechanism(s).
type ocsf.objects.data_security = record{
  category: string,
  pattern_match: string,
  category_id: int64,
  confidentiality: string,
  confidentiality_id: int64,
  data_lifecycle_state: string,
  data_lifecycle_state_id: int64,
  detection_pattern: string,
  detection_system: string,
  detection_system_id: int64,
  policy: ocsf.objects.policy,
}

// The Malware object describes the classification of known malicious software,
// which is intentionally designed to cause damage to a computer, server,
// client, or computer network.
type ocsf.objects.malware = record{
  name: string,
  path: string,
  uid: string,
  classification_ids: list<int64>,
  classifications: list<string>,
  cves: list<ocsf.objects.cve>,
  provider: string,
}

// The Network Interface object describes the type and associated attributes of
// a network interface.
type ocsf.objects.network_interface = record{
  name: string,
  type: string,
  ip: ip,
  hostname: string,
  uid: string,
  mac: string,
  namespace: string,
  type_id: int64,
  subnet_prefix: int64,
}

// The databucket object is a basic container that holds data, typically
// organized through the use of data partitions.
type ocsf.objects.databucket = record{
  name: string,
  size: int64,
  type: string,
  file: ocsf.objects.file,
  desc: string,
  uid: string,
  groups: list<ocsf.objects.group>,
  type_id: int64,
  created_time: time,
  modified_time: time,
}

// The registry value object describes a Windows registry value.
type ocsf.objects.reg_value = record{
  name: string,
  type: string,
  path: string,
  type_id: int64,
  is_default: bool,
  is_system: bool,
  modified_time: time,
}

// The Ticket object represents ticket in the customer's systems like
// Salesforce, jira etc.
type ocsf.objects.ticket = record{
  type: string,
  title: string,
  uid: string,
  type_id: int64,
  src_url: string,
}

// The HASSH object contains SSH network fingerprinting values for specific
// client/server implementations. It provides a standardized way of identifying
// and categorizing SSH connections based on their unique characteristics and
// behavior.
type ocsf.objects.hassh = record{
  algorithm: string,
  fingerprint: ocsf.objects.fingerprint,
}

// The Feature object provides information about the software product feature
// that generated a specific event. It encompasses details related to the
// capabilities, components, user interface (UI) design, and performance
// upgrades associated with the feature.
type ocsf.objects.feature = record{
  name: string,
  version: string,
  uid: string,
}

// The Kernel Resource object provides information about a specific kernel
// resource, including its name and type. It describes essential attributes
// associated with a resource managed by the kernel of an operating system.
// Defined by D3FEND <a target='_blank'
// href='https://d3fend.mitre.org/dao/artifact/d3f:Kernel/'>d3f:Kernel</a>.
type ocsf.objects.kernel = record{
  name: string,
  type: string,
  path: string,
  type_id: int64,
  is_system: bool,
  system_call: string,
}

// The Enrichment object provides inline enrichment data for specific attributes
// of interest within an event. It serves as a mechanism to enhance or
// supplement the information associated with the event by adding additional
// relevant details or context.
type ocsf.objects.enrichment = record{
  name: string,
  type: string,
  value: string,
  desc: string,
  created_time: time,
  provider: string,
  reputation: ocsf.objects.reputation,
  short_desc: string,
  src_url: string,
}

// The Related Event object describes an OCSF event related to a finding.
type ocsf.objects.related_event = record{
  type: string,
  uid: string,
  type_uid: int64,
  type_name: string,
  observables: list<ocsf.objects.observable>,
  attacks: list<ocsf.objects.attack>,
  kill_chain: list<ocsf.objects.kill_chain_phase>,
  product_uid: string,
}

// The Product object describes characteristics of a software product.
type ocsf.objects.product = record{
  name: string,
  version: string,
  path: string,
  uid: string,
  feature: ocsf.objects.feature,
  lang: string,
  cpe_name: string,
  url_string: string,
  vendor_name: string,
}

// The File object represents the metadata associated with a file stored in a
// computer system. It encompasses information about the file itself, including
// its attributes, properties, and organizational details. Defined by D3FEND <a
// target='_blank'
// href='https://next.d3fend.mitre.org/dao/artifact/d3f:File/'>d3f:File</a>.
type ocsf.objects.file = record{
  attributes: int64,
  name: string,
  owner: ocsf.objects.user,
  size: int64,
  type: string,
  version: string,
  path: string,
  signature: ocsf.objects.digital_signature,
  modifier: ocsf.objects.user,
  product: ocsf.objects.product,
  desc: string,
  uid: string,
  ext: string,
  type_id: int64,
  accessor: ocsf.objects.user,
  company_name: string,
  creator: ocsf.objects.user,
  mime_type: string,
  parent_folder: string,
  accessed_time: time,
  confidentiality: string,
  confidentiality_id: int64,
  created_time: time,
  hashes: list<ocsf.objects.fingerprint>,
  is_system: bool,
  modified_time: time,
  security_descriptor: string,
  xattributes: ocsf.objects.object,
}

// The Affected Code object describes details about a code block identified as
// vulnerable.
type ocsf.objects.affected_code = record{
  owner: ocsf.objects.user,
  file: ocsf.objects.file,
  end_line: int64,
  remediation: ocsf.objects.remediation,
  start_line: int64,
}

// The observable object is a pivot element that contains related information
// found in many places in the event.
type ocsf.objects.observable = record{
  name: string,
  type: string,
  value: string,
  type_id: int64,
  reputation: ocsf.objects.reputation,
}

// The table object represents a table within a structured relational database
// or datastore, which contains columns and rows of data that are able to be
// create, updated, deleted and queried.
type ocsf.objects.table = record{
  name: string,
  size: int64,
  desc: string,
  uid: string,
  groups: list<ocsf.objects.group>,
  created_time: time,
  modified_time: time,
}

// The Common Vulnerability Scoring System (<a target='_blank'
// href='https://www.first.org/cvss/'>CVSS</a>) object provides a way to capture
// the principal characteristics of a vulnerability and produce a numerical
// score reflecting its severity.
type ocsf.objects.cvss = record{
  version: string,
  depth: string,
  severity: string,
  base_score: double,
  metrics: list<ocsf.objects.metric>,
  overall_score: double,
  vector_string: string,
}

// The Rule object describes characteristics of a rule associated with a policy
// or an event.
type ocsf.objects.rule = record{
  name: string,
  type: string,
  version: string,
  desc: string,
  uid: string,
  category: string,
}

// The Finding object describes metadata related to a security finding generated
// by a security tool or system.
type ocsf.objects.finding = record{
  title: string,
  desc: string,
  uid: string,
  types: list<string>,
  remediation: ocsf.objects.remediation,
  created_time: time,
  first_seen_time: time,
  last_seen_time: time,
  modified_time: time,
  product_uid: string,
  related_events: list<ocsf.objects.related_event>,
  src_url: string,
}

// The Digital Signature object contains information about the cryptographic
// mechanism used to verify the authenticity, integrity, and origin of the file
// or application.
type ocsf.objects.digital_signature = record{
  state: string,
  digest: ocsf.objects.fingerprint,
  certificate: ocsf.objects.certificate,
  algorithm: string,
  algorithm_id: int64,
  created_time: time,
  developer_uid: string,
  state_id: int64,
}

// The Group object represents a collection or association of entities, such as
// users, policies, or devices. It serves as a logical grouping mechanism to
// organize and manage entities with similar characteristics or permissions
// within a system or organization.
type ocsf.objects.group = record{
  name: string,
  type: string,
  domain: string,
  desc: string,
  uid: string,
  privileges: list<string>,
}

// The Digital Certificate, also known as a Public Key Certificate, object
// contains information about the ownership and usage of a public key. It serves
// as a means to establish trust in the authenticity and integrity of the public
// key and the associated entity. Defined by D3FEND <a target='_blank' href='htt
// ps://d3fend.mitre.org/dao/artifact/d3f:Certificate/'>d3f:Certificate</a>.
type ocsf.objects.certificate = record{
  version: string,
  uid: string,
  is_self_signed: bool,
  subject: string,
  issuer: string,
  fingerprints: list<ocsf.objects.fingerprint>,
  created_time: time,
  expiration_time: time,
  serial_number: string,
}

// The Time Span object represents different time period durations. If a
// timespan is fractional, i.e. crosses one period, e.g. a week and 3 days, more
// than one may may be populated since each member is of integral type. In that
// case <code>type_id</code> if present should be set to <code>Other</code>.
type ocsf.objects.timespan = record{
  type: string,
  duration: int64,
  type_id: int64,
  duration_days: int64,
  duration_hours: int64,
  duration_mins: int64,
  duration_months: int64,
  duration_secs: int64,
  duration_weeks: int64,
  duration_years: int64,
}

// The CWE object represents a weakness in a software system that can be
// exploited by a threat actor to perform an attack. The CWE object is based on
// the <a target='_blank' href='https://cwe.mitre.org/'>Common Weakness
// Enumeration (CWE)</a> catalog.
type ocsf.objects.cwe = record{
  uid: string,
  caption: string,
  src_url: string,
}

// The Fingerprint object provides detailed information about a digital
// fingerprint, which is a compact representation of data used to identify a
// longer piece of information, such as a public key or file content. It
// contains the algorithm and value of the fingerprint, enabling efficient and
// reliable identification of the associated data.
type ocsf.objects.fingerprint = record{
  value: string,
  algorithm: string,
  algorithm_id: int64,
}

// The Organization object describes characteristics of an organization or
// company and its division if any.
type ocsf.objects.organization = record{
  name: string,
  uid: string,
  ou_name: string,
  ou_uid: string,
}

// The Software Package object describes details about a software package.
// Defined by D3FEND <a target='_blank' href='https://d3fend.mitre.org/dao/artif
// act/d3f:SoftwarePackage/'>d3f:SoftwarePackage</a>.
type ocsf.objects.package = record{
  name: string,
  type: string,
  version: string,
  hash: ocsf.objects.fingerprint,
  release: string,
  epoch: int64,
  type_id: int64,
  license: string,
  architecture: string,
  cpe_name: string,
  purl: string,
  vendor_name: string,
}

// The Authorization Result object provides details about the authorization
// outcome and associated policies related to activity.
type ocsf.objects.authorization = record{
  decision: string,
  policy: ocsf.objects.policy,
}

// Authentication events report authentication session activities such as user
// attempts a logon or logoff, successfully or otherwise.
type ocsf.authentication = record{
  auth_protocol: string,
  session: ocsf.objects.session,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  auth_protocol_id: int64,
  auth_factors: list<ocsf.objects.auth_factor>,
  is_cleartext: bool,
  duration: int64,
  activity_name: string,
  message: string,
  service: ocsf.objects.service,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  logon_process: ocsf.objects.process,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  is_remote: bool,
  type_uid: int64,
  is_mfa: bool,
  logon_type_id: int64,
  logon_type: string,
  status_id: int64,
  is_new_logon: bool,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  certificate: ocsf.objects.certificate,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Email events report activities of emails.
type ocsf.email_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  email: ocsf.objects.email,
  direction: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  email_auth: ocsf.objects.email_auth,
  activity_id: int64,
  type_uid: int64,
  banner: string,
  attempt: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  smtp_hello: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  direction_id: int64,
  raw_data: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Web Resource Access Activity events describe successful/failed attempts to
// access a web resource over HTTP.
type ocsf.web_resource_access_activity = record{
  tls: ocsf.objects.tls,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  http_response: ocsf.objects.http_response,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  web_resources: list<ocsf.objects.web_resource>,
  severity_id: int64,
}

// Kernel Object Query events report information about discovered kernel
// resources.
type ocsf.kernel_object_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  kernel: ocsf.objects.kernel,
  raw_data: string,
  severity_id: int64,
}

// User Session Query events report information about existing user sessions.
type ocsf.session_query = record{
  session: ocsf.objects.session,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Device Config State Change events report state changes that impact the
// security of the device.
type ocsf.device_config_state_change = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  state: string,
  prev_security_states: list<ocsf.objects.security_state>,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  prev_security_level_id: int64,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  security_level: string,
  security_states: list<ocsf.objects.security_state>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  state_id: int64,
  severity_id: int64,
  prev_security_level: string,
  security_level_id: int64,
}

// Windows Service Activity events report when a process interacts with the
// Service Control Manager.
type ocsf.win_service_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  win_service: ocsf.objects.win_service,
}

// Network Activity events report network connection and traffic activity.
type ocsf.network_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  url: ocsf.objects.url,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Account Change events report when specific user account management tasks are
// performed, such as a user/role being created, changed, deleted, renamed,
// disabled, enabled, locked out or unlocked.
type ocsf.account_change = record{
  policy: ocsf.objects.policy,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  user_result: ocsf.objects.user,
  raw_data: string,
  severity_id: int64,
}

// Process Activity events report when a process launches, injects, opens or
// terminates another process, successful or otherwise.
type ocsf.process_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  module: ocsf.objects.module,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  requested_permissions: int64,
  injection_type: string,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  actual_permissions: int64,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  injection_type_id: int64,
  raw_data: string,
  severity_id: int64,
  exit_code: int64,
}

// SSH Activity events report remote client connections to a server using the
// Secure Shell (SSH) Protocol.
type ocsf.ssh_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  auth_type_id: int64,
  server_hassh: ocsf.objects.hassh,
  client_hassh: ocsf.objects.hassh,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  auth_type: string,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  protocol_ver: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Module Query events report information about loaded modules.
type ocsf.module_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  module: ocsf.objects.module,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Network Connection Query events report information about active network
// connections.
type ocsf.network_connection_query = record{
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  state: string,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  state_id: int64,
  severity_id: int64,
}

// An Incident Finding reports the creation, update, or closure of security
// incidents as a result of detections and/or analytics.
type ocsf.incident_finding = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  is_suspected_breach: bool,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  impact_id: int64,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  impact: string,
  impact_score: int64,
  priority_id: int64,
  type_uid: int64,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  assignee_group: ocsf.objects.group,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  src_url: string,
  count: int64,
  status: string,
  verdict: string,
  class_name: string,
  confidence: string,
  type_name: string,
  attacks: list<ocsf.objects.attack>,
  class_uid: int64,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  ticket: ocsf.objects.ticket,
  priority: string,
  finding_info_list: list<ocsf.objects.finding_info>,
  raw_data: string,
  assignee: ocsf.objects.user,
  severity_id: int64,
  desc: string,
  verdict_id: int64,
}

// Datastore events describe general activities (Read, Update, Query, Delete,
// etc.) which affect datastores or data within those datastores, e.g. (AWS RDS,
// AWS S3).
type ocsf.datastore_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  database: ocsf.objects.database,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  type_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  databucket: ocsf.objects.databucket,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  table: ocsf.objects.table,
  type: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// The Vulnerability Finding event is a notification about weakness in an
// information system, system security procedures, internal controls, or
// implementation that could be exploited or triggered by a threat source.
type ocsf.vulnerability_finding = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  resource: ocsf.objects.resource_details,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  activity_id: int64,
  finding_info: ocsf.objects.finding_info,
  type_uid: int64,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  confidence: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  raw_data: string,
  vulnerabilities: list<ocsf.objects.vulnerability>,
  severity_id: int64,
}

// Prefetch Query events report information about Windows prefetch files.
type ocsf.prefetch_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  run_count: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  name: string,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  last_run_time: time,
  severity_id: int64,
}

// Event Log Activity events report actions pertaining to the system's event
// logging service(s), such as disabling logging or clearing the log data.
type ocsf.event_log = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  log_type_id: int64,
  type_uid: int64,
  status_id: int64,
  log_name: string,
  metadata: ocsf.objects.metadata,
  log_provider: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  log_type: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Tunnel Activity events report secure tunnel establishment (such as VPN),
// teardowns, renewals, and other network tunnel specific actions.
type ocsf.tunnel_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  session: ocsf.objects.session,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  tunnel_interface: ocsf.objects.network_interface,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  tunnel_type: string,
  type_uid: int64,
  status_id: int64,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  tunnel_type_id: int64,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  protocol_name: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Kernel Extension events report when a driver/extension is loaded or unloaded
// into the kernel
type ocsf.kernel_extension = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  driver: ocsf.objects.kernel_driver,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Device Inventory Info events report device inventory data that is either
// logged or proactively collected. For example, when collecting device
// information from a CMDB or running a network sweep of connected devices.
type ocsf.inventory_info = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// The Network Time Protocol (NTP) Activity events report instances of remote
// clients synchronizing their clocks with an NTP server, as observed on the
// network.
type ocsf.ntp_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  delay: int64,
  stratum: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  version: string,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  precision: int64,
  status_detail: string,
  stratum_id: int64,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  dispersion: int64,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// User Inventory Info events report user inventory data that is either logged
// or proactively collected. For example, when collecting user information from
// Active Directory entries.
type ocsf.user_inventory = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Kernel Activity events report when an process creates, reads, or deletes a
// kernel resource.
type ocsf.kernel_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  kernel: ocsf.objects.kernel,
  raw_data: string,
  severity_id: int64,
}

// Network Remediation Activity events report on attempts at remediating
// computer networks. It follows the MITRE countermeasures defined by the
// D3FEND™ <a target='_blank' href='https://d3fend.mitre.org/'>Matrix</a>.
// Techniques and Sub-techniques will include Network, such as Network Isolation
// or Network Traffic Filtering.
type ocsf.network_remediation_activity = record{
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  command_uid: string,
  scan: ocsf.objects.scan,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  countermeasures: list<ocsf.objects.d3fend>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Networks Query events report information about network adapters.
type ocsf.networks_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  network_interfaces: list<ocsf.objects.network_interface>,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// User Query events report user data that have been discovered, queried, polled
// or searched. This event differs from User Inventory as it describes the
// result of a targeted search by filtering a subset of user attributes.
type ocsf.user_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Email URL Activity events report URLs within an email.
type ocsf.email_url_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  url: ocsf.objects.url,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  email_uid: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// A Detection Finding describes detections or alerts generated by security
// products using correlation engines, detection engines or other methodologies.
// Note: if the product is a security control, the <code>security_control</code>
// profile should be applied and its <code>attacks</code> information should be
// duplicated into the <code>finding_info</code> object.
type ocsf.detection_finding = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  impact_id: int64,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  activity_id: int64,
  impact: string,
  finding_info: ocsf.objects.finding_info,
  impact_score: int64,
  type_uid: int64,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  risk_details: string,
  count: int64,
  status: string,
  risk_level_id: int64,
  class_name: string,
  confidence: string,
  type_name: string,
  evidences: list<ocsf.objects.evidences>,
  class_uid: int64,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  raw_data: string,
  vulnerabilities: list<ocsf.objects.vulnerability>,
  severity_id: int64,
  risk_level: string,
  risk_score: int64,
}

// Operating System Patch State reports the installation of an OS patch to a
// device and any associated knowledgebase articles.
type ocsf.patch_state = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  kb_article_list: list<ocsf.objects.kb_article>,
  severity_id: int64,
}

// Web Resources Activity events describe actions executed on a set of Web
// Resources.
type ocsf.web_resources_activity = record{
  tls: ocsf.objects.tls,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  web_resources_result: list<ocsf.objects.web_resource>,
  http_response: ocsf.objects.http_response,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  web_resources: list<ocsf.objects.web_resource>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Admin Group Query events report information about administrative groups.
type ocsf.admin_group_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  users: list<ocsf.objects.user>,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  group: ocsf.objects.group,
}

// Software Inventory Info events report device software inventory data that is
// either logged or proactively collected. For example, when collecting device
// information from a CMDB or running a network sweep of connected devices.
type ocsf.software_info = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  product: ocsf.objects.product,
  raw_data: string,
  severity_id: int64,
  package: ocsf.objects.package,
}

// File System Activity events report when a process performs an action on a
// file or folder.
type ocsf.file_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  file_diff: string,
  observables: list<ocsf.objects.observable>,
  connection_uid: string,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  component: string,
  count: int64,
  status: string,
  class_name: string,
  access_mask: int64,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  file_result: ocsf.objects.file,
  create_mask: string,
  severity_id: int64,
}

// Remote Desktop Protocol (RDP) Activity events report remote client
// connections to a server as seen on the network.
type ocsf.rdp_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  remote_display: ocsf.objects.display,
  type_uid: int64,
  request: ocsf.objects.request,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  protocol_ver: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  response: ocsf.objects.response,
  type_name: string,
  capabilities: list<string>,
  certificate_chain: list<string>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  identifier_cookie: string,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Group Management events report management updates to a group, including
// updates to membership and permissions.
type ocsf.group_management = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  resource: ocsf.objects.resource_details,
  severity: string,
  privileges: list<string>,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  group: ocsf.objects.group,
}

// API events describe general CRUD (Create, Read, Update, Delete) API
// activities, e.g. (AWS Cloudtrail)
type ocsf.api_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// User Access Management events report management updates to a user's
// privileges.
type ocsf.user_access = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  resource: ocsf.objects.resource_details,
  severity: string,
  privileges: list<string>,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// File Query events report information about files that are present on the
// system.
type ocsf.file_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  severity_id: int64,
}

// Authorize Session events report privileges or groups assigned to a new user
// session, usually at login time.
type ocsf.authorize_session = record{
  session: ocsf.objects.session,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  privileges: list<string>,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  user: ocsf.objects.user,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  group: ocsf.objects.group,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Device Config State events report device configuration data and CIS Benchmark
// results.
type ocsf.config_state = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  cis_benchmark_result: ocsf.objects.cis_benchmark_result,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Email File Activity events report files within emails.
type ocsf.email_file_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  email_uid: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  severity_id: int64,
}

// File Transfer Protocol (FTP) Activity events report file transfers between a
// server and a client as seen on the network.
type ocsf.ftp_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  codes: list<int64>,
  type_uid: int64,
  command_responses: list<string>,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  command: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  port: int64,
  class_uid: int64,
  name: string,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  type: string,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// File Remediation Activity events report on attempts at remediating files. It
// follows the MITRE countermeasures defined by the D3FEND™ <a target='_blank'
// href='https://d3fend.mitre.org/'>Matrix</a>. Sub-techniques will include
// File, such as File Removal or Restore File.
type ocsf.file_remediation_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  command_uid: string,
  scan: ocsf.objects.scan,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  countermeasures: list<ocsf.objects.d3fend>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  severity_id: int64,
}

// Registry Value Activity events reports when a process performs an action on a
// Windows registry value.
type ocsf.registry_value_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  prev_reg_value: ocsf.objects.reg_value,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  reg_value: ocsf.objects.reg_value,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Registry Value Query events report information about discovered Windows
// registry values.
type ocsf.registry_value_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  reg_value: ocsf.objects.reg_value,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Process Remediation Activity events report on attempts at remediating
// processes. It follows the MITRE countermeasures defined by the D3FEND™ <a
// target='_blank' href='https://d3fend.mitre.org/'>Matrix</a>. Sub-techniques
// will include Process, such as Process Termination or Kernel-based Process
// Isolation.
type ocsf.process_remediation_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  command_uid: string,
  scan: ocsf.objects.scan,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  countermeasures: list<ocsf.objects.d3fend>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Server Message Block (SMB) Protocol Activity events report client/server
// connections sharing resources within the network.
type ocsf.smb_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  share: string,
  open_type: string,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  share_type: string,
  type_uid: int64,
  status_id: int64,
  tree_uid: string,
  metadata: ocsf.objects.metadata,
  command: string,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  response: ocsf.objects.response,
  dce_rpc: ocsf.objects.dce_rpc,
  type_name: string,
  dialect: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  share_type_id: int64,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  client_dialects: list<string>,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Registry Key Activity events report when a process performs an action on a
// Windows registry key.
type ocsf.registry_key_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  open_mask: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  access_mask: int64,
  type_name: string,
  reg_key: ocsf.objects.reg_key,
  class_uid: int64,
  prev_reg_key: ocsf.objects.reg_key,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  create_mask: string,
  severity_id: int64,
}

// Job Query events report information about scheduled jobs.
type ocsf.job_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  job: ocsf.objects.job,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Memory Activity events report when a process has memory allocated,
// read/modified, or other manipulation activities - such as a buffer overflow
// or turning off data execution protection (DEP).
type ocsf.memory_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  size: int64,
  requested_permissions: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  actual_permissions: int64,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  base_address: string,
  severity_id: int64,
}

// Service Query events report information about running services.
type ocsf.service_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  service: ocsf.objects.service,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Module  Activity events report when a process loads or unloads the
// <code>module</code>.
type ocsf.module_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  module: ocsf.objects.module,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Entity Management events report activity by a managed client, a micro
// service, or a user at a management console. The activity can be a create,
// read, update, and delete operation on a managed entity.
type ocsf.entity_management = record{
  access_list: list<string>,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  entity: ocsf.objects.managed_entity,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  entity_result: ocsf.objects.managed_entity,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  access_mask: int64,
  type_name: string,
  class_uid: int64,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// HTTP Activity events report HTTP connection and traffic information.
type ocsf.http_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  http_status: int64,
  severity: string,
  http_cookies: list<ocsf.objects.http_cookie>,
  duration: int64,
  http_response: ocsf.objects.http_response,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  http_request: ocsf.objects.http_request,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Peripheral Device Query events report information about peripheral devices.
type ocsf.peripheral_device_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  peripheral_device: ocsf.objects.peripheral_device,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Security Finding events describe findings, detections, anomalies, alerts
// and/or actions performed by security products
type ocsf.security_finding = record{
  cis_csc: list<ocsf.objects.cis_csc>,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  data_sources: list<string>,
  duration: int64,
  state: string,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  impact_id: int64,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  activity_id: int64,
  impact: string,
  impact_score: int64,
  type_uid: int64,
  kill_chain: list<ocsf.objects.kill_chain_phase>,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  risk_level_id: int64,
  class_name: string,
  confidence: string,
  type_name: string,
  compliance: ocsf.objects.compliance,
  nist: list<string>,
  attacks: list<ocsf.objects.attack>,
  analytic: ocsf.objects.analytic,
  malware: list<ocsf.objects.malware>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  vulnerabilities: list<ocsf.objects.vulnerability>,
  state_id: int64,
  finding: ocsf.objects.finding,
  severity_id: int64,
  risk_level: string,
  risk_score: int64,
}

// Remediation Activity events report on attempts at remediating a compromised
// device or computer network. It follows the MITRE countermeasures defined by
// the D3FEND™ <a target='_blank' href='https://d3fend.mitre.org/'>Matrix</a>.
type ocsf.remediation_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  command_uid: string,
  scan: ocsf.objects.scan,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  countermeasures: list<ocsf.objects.d3fend>,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// File Hosting Activity events report the actions taken by file management
// applications, including file sharing servers like Sharepoint and services
// such as Box, MS OneDrive, or Google Drive.
type ocsf.file_hosting = record{
  expiration_time: time,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  file_result: ocsf.objects.file,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Folder Query events report information about folders that are present on the
// system.
type ocsf.folder_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  folder: ocsf.objects.file,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Process Query events report information about running processes.
type ocsf.process_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  process: ocsf.objects.process,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// DNS Activity events report DNS queries and answers as seen on the network.
type ocsf.dns_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  answers: list<ocsf.objects.dns_answer>,
  activity_name: string,
  message: string,
  rcode: string,
  response_time: time,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  rcode_id: int64,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  query: ocsf.objects.dns_query,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  query_time: time,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Network File Activity events report file activities traversing the network,
// including file storage services such as Box, MS OneDrive, or Google Drive.
type ocsf.network_file_activity = record{
  expiration_time: time,
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  file: ocsf.objects.file,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Scheduled Job Activity events report activities related to scheduled jobs or
// tasks.
type ocsf.scheduled_job_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  job: ocsf.objects.job,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// DHCP Activity events report MAC to IP assignment via DHCP from a client or
// server.
type ocsf.dhcp_activity = record{
  tls: ocsf.objects.tls,
  connection_info: ocsf.objects.network_connection_info,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  proxy: ocsf.objects.network_proxy,
  status_detail: string,
  activity_id: int64,
  transaction_uid: string,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  relay: ocsf.objects.network_interface,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  traffic: ocsf.objects.network_traffic,
  raw_data: string,
  app_name: string,
  ja4_fingerprint_list: list<ocsf.objects.ja4_fingerprint>,
  lease_dur: int64,
  is_renewal: bool,
  severity_id: int64,
  dst_endpoint: ocsf.objects.network_endpoint,
}

// Application Lifecycle events report installation, removal, start, stop of an
// application or service.
type ocsf.application_lifecycle = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
  app: ocsf.objects.product,
}

// Windows Resource Activity events report when a process accesses a Windows
// managed resource object, successful or otherwise.
type ocsf.resource_activity = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  win_resource: ocsf.objects.win_resource,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  device: ocsf.objects.device,
  type_uid: int64,
  status_id: int64,
  actor: ocsf.objects.actor,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// The base event is a generic and concrete event. It also defines a set of
// attributes available in most event classes. As a generic event that does not
// belong to any event category, it could be used to log events that are not
// otherwise defined by the schema.
type ocsf.base_event = record{
  count: int64,
  message: string,
  status: string,
  time: time,
  metadata: ocsf.objects.metadata,
  start_time: time,
  severity: string,
  duration: int64,
  category_uid: int64,
  activity_id: int64,
  type_uid: int64,
  type_name: string,
  observables: list<ocsf.objects.observable>,
  category_name: string,
  class_uid: int64,
  class_name: string,
  timezone_offset: int64,
  raw_data: string,
  unmapped: ocsf.objects.object,
  end_time: time,
  activity_name: string,
  enrichments: list<ocsf.objects.enrichment>,
  severity_id: int64,
  status_code: string,
  status_detail: string,
  status_id: int64,
}

// A Data Security Finding describes detections or alerts generated by various
// data security products such as Data Loss Prevention (DLP), Data
// Classification, Secrets Management, Digital Rights Management (DRM), Data
// Security Posture Management (DSPM), and similar tools. These detections or
// alerts can be created using fingerprinting, statistical analysis, machine
// learning or other methodologies. The finding describes the actors and
// endpoints who accessed or own the sensitive data, as well as the resources
// which store the sensitive data.
type ocsf.data_security_finding = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  impact_id: int64,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  src_endpoint: ocsf.objects.network_endpoint,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  activity_id: int64,
  impact: string,
  finding_info: ocsf.objects.finding_info,
  impact_score: int64,
  type_uid: int64,
  database: ocsf.objects.database,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  risk_level_id: int64,
  class_name: string,
  confidence: string,
  type_name: string,
  data_security: ocsf.objects.data_security,
  class_uid: int64,
  databucket: ocsf.objects.databucket,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  file: ocsf.objects.file,
  raw_data: string,
  table: ocsf.objects.table,
  severity_id: int64,
  risk_level: string,
  dst_endpoint: ocsf.objects.network_endpoint,
  risk_score: int64,
}

// Scan events report the start, completion, and results of a scan job. The scan
// event includes the number of items that were scanned and the number of
// detections that were resolved.
type ocsf.scan_activity = record{
  policy: ocsf.objects.policy,
  schedule_uid: string,
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  command_uid: string,
  scan: ocsf.objects.scan,
  num_processes: int64,
  status_id: int64,
  num_skipped_items: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  num_detections: int64,
  count: int64,
  status: string,
  num_trusted_items: int64,
  class_name: string,
  num_files: int64,
  type_name: string,
  total: int64,
  num_folders: int64,
  num_resolutions: int64,
  num_network_items: int64,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  num_registry_items: int64,
  severity_id: int64,
}

// Compliance Finding events describe results of evaluations performed against
// resources, to check compliance with various Industry Frameworks or Security
// Standards such as <code>NIST SP 800-53, CIS AWS Foundations Benchmark v1.4.0,
// ISO/IEC 27001</code> etc.
type ocsf.compliance_finding = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  resource: ocsf.objects.resource_details,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  remediation: ocsf.objects.remediation,
  confidence_score: int64,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  resources: list<ocsf.objects.resource_details>,
  status_detail: string,
  activity_id: int64,
  finding_info: ocsf.objects.finding_info,
  type_uid: int64,
  status_id: int64,
  confidence_id: int64,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  confidence: string,
  type_name: string,
  compliance: ocsf.objects.compliance,
  class_uid: int64,
  start_time: time,
  comment: string,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

// Registry Key Query events report information about discovered Windows
// registry keys.
type ocsf.registry_key_query = record{
  unmapped: ocsf.objects.object,
  category_uid: int64,
  severity: string,
  duration: int64,
  activity_name: string,
  message: string,
  observables: list<ocsf.objects.observable>,
  end_time: time,
  category_name: string,
  time: time,
  status_detail: string,
  activity_id: int64,
  type_uid: int64,
  status_id: int64,
  query_result: string,
  metadata: ocsf.objects.metadata,
  status_code: string,
  enrichments: list<ocsf.objects.enrichment>,
  count: int64,
  status: string,
  class_name: string,
  type_name: string,
  query_result_id: int64,
  query_info: ocsf.objects.query_info,
  reg_key: ocsf.objects.reg_key,
  class_uid: int64,
  start_time: time,
  timezone_offset: int64,
  raw_data: string,
  severity_id: int64,
}

