name: VAST
on:
  workflow_dispatch:
    inputs:
      arguments:
        description: "Additional arguments to pass, e.g., `--with-plugin=<path/to/plugin>` or `-D<CMake Option>`"
        required: false
        default: ""
  push:
    branches:
      - master
      - v*
  pull_request:
    types:
      - opened
      - synchronize
  release:
    types:
      - published

# This section defines how the VAST action is enqueued.
concurrency:
  # Wait for in-progress runs of this action for the same branch to finish
  # before starting, ensuring that a branch is only built once at a time. This
  # has a double-purpose: It ensures that caches are always able to pick up work
  # from previous builds of the same branch, and it rate-limits the CI to ensure
  # it's running smoothly for all users.
  group: ${{ github.workflow }}-${{ github.ref }}
  # Cancel all in-progress runs of this action for the same pull request.
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

env:
  CCACHE_MAXSIZE: "5G"
  GCP_WORKLOAD_IDP: projects/1057156539039/locations/global/workloadIdentityPools/gh-actions-pool/providers/gh-actions-provider
  GCP_SERVICE_ACCOUNT: github-actions@crucial-kayak-261816.iam.gserviceaccount.com

# TODO: cherry-pick permissions
permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:

  configure:
    name: Configure
    runs-on: ubuntu-20.04
    outputs:
      version-matrix: ${{ steps.configure.outputs.version-matrix }}
      build-version: ${{ steps.configure.outputs.build-version }}
      build-version-short: ${{ steps.configure.outputs.build-version-short }}
      before-sha: ${{ steps.configure.outputs.before-sha }}
      before-version: ${{ steps.configure.outputs.before-version }}
      release-version: ${{ steps.configure.outputs.release-version }}
      head-ref-slug: ${{ steps.configure.outputs.head-ref-slug }}
      base-ref-slug: ${{ steps.configure.outputs.base-ref-slug }}
      cmake-version-args: ${{ steps.configure.outputs.cmake-version-args }}
      docker-build-args: ${{ steps.configure.outputs.docker-build-args }}
      vast-container-ref: ${{ steps.configure.outputs.vast-container-ref }}
      run-policy-enforcement: ${{ steps.configure.outputs.run-policy-enforcement }}
      run-changelog: ${{ steps.configure.outputs.run-changelog }}
      run-vast-io: ${{ steps.configure.outputs.run-vast-io }}
      run-docker-vast: ${{ steps.configure.outputs.run-docker-vast }}
      run-docker-compose: ${{ steps.configure.outputs.run-docker-compose }}
      run-example-notebooks: ${{ steps.configure.outputs.run-example-notebooks }}
      run-vast-nix: ${{ steps.configure.outputs.run-vast-nix }}
      run-vast: ${{ steps.configure.outputs.run-vast }}
      run-vast-plugins: ${{ steps.configure.outputs.run-vast-plugins }}
      run-python: ${{ steps.configure.outputs.run-python }}
      run-python-package: ${{ steps.configure.outputs.run-python-package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Fetch Tags
        run: git fetch origin +refs/tags/*:refs/tags/*
      - name: Inject Slug Variables
        uses: rlespinasse/github-slug-action@v4
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDP }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - name: Configure GCloud Credentials
        uses: google-github-actions/setup-gcloud@v1
      - name: Configure
        id: configure
        run: |
          # Create a matrix with VAST versions greater than limit_version.
          limit_version=v2.2.0
          dated_versions=$(git for-each-ref --format="%(creatordate:format:%s)#%(refname:short)" "refs/tags/v[1-9]*" | grep -v '\-rc[0-9]\+$')
          dated_limit_version=$(printf "$dated_versions" | grep $limit_version)
          filtered_versions=$(printf "$dated_versions" | awk -F# '{if($0>="'$dated_limit_version'")print$2}')
          version_matrix="$(printf "$filtered_versions" | jq -R | jq -sc 'map({version: .})')"
          echo "version-matrix=${version_matrix}" >> $GITHUB_OUTPUT
          # Set a bunch of version numbers depending on how we triggered the PR
          # so they're consistent between jobs.
          build_version="$(git describe --abbrev=10 --long --dirty --match='v[0-9]*')"
          build_version_short="$(git describe --abbrev=10 --match='v[0-9]*')"
          if [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            before_sha="${{ github.event.before }}"
          else
            before_sha="$(git merge-base origin/master HEAD)"
          fi
          before_version="$(git describe --abbrev=10 --match='v[0-9]*' -- "${before_sha}")"
          release_version="$(git describe --abbrev=0 --match='v[0-9]*')"
          echo "build-version=${build_version}" >> $GITHUB_OUTPUT
          echo "build-version-short=${build_version_short}" >> $GITHUB_OUTPUT
          echo "before-sha=${before_sha}" >> $GITHUB_OUTPUT
          echo "before-version=${before_version}" >> $GITHUB_OUTPUT
          echo "release-version=${release_version}" >> $GITHUB_OUTPUT
          # Inject the branch slugs for cache names.
          echo "head-ref-slug=${GITHUB_HEAD_REF_SLUG}" >> $GITHUB_OUTPUT
          echo "base-ref-slug=${GITHUB_BASE_REF_SLUG}" >> $GITHUB_OUTPUT
          # Utility alias for detecting changes to files.
          shopt -s expand_aliases
          alias is_unchanged="git diff --exit-code ${before_sha} --"
          # For pull requests we make it possible to cache all layers by setting
          # a fixed VAST_BUILD_OPTIONS for within a given pull request. We
          # accept the downaside that this means that Docker images created
          # within pull request triggers of this job display the merge-base
          # version.
          # Since the Docker build does not have the Git context, we set
          # version fallbacks manually here.
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            vast_tag="${before_version}"
            vast_container_ref="${GITHUB_HEAD_REF_SLUG}"
          else
            vast_tag="${build_version}"
            vast_container_ref="${{ github.sha }}"
          fi
          cmake_version_args="-DVAST_VERSION_TAG:STRING=${vast_tag}"
          for plugin in $(ls plugins); do
            var="VAST_PLUGIN_${plugin^^}_REVISION"
            value="g$(git rev-list --abbrev-commit --abbrev=10 -1 "${vast_tag}" -- "plugins/${plugin}")"
            cmake_version_args="${cmake_version_args} -D${var}:STRING=${value}"
          done
          echo "cmake-version-args=${cmake_version_args}" >> $GITHUB_OUTPUT
          docker_build_args="${cmake_version_args} -D VAST_ENABLE_AVX_INSTRUCTIONS:BOOL=OFF"
          docker_build_args="${docker_build_args} -D VAST_ENABLE_AVX2_INSTRUCTIONS:BOOL=OFF"
          echo "docker-build-args=${docker_build_args}" >> $GITHUB_OUTPUT
          echo "vast-container-ref=${vast_container_ref}" >> $GITHUB_OUTPUT
          # Decide what jobs to run
          run_python_package=false
          if [[ $GITHUB_EVENT_NAME == "release" ]]; then
            run_python_package=true
          fi
          run_example_notebooks=true
          if [[ $GITHUB_EVENT_NAME == "workflow_dispatch" ]]; then
            run_example_notebooks=false
          fi
          # Policy checks are not constrained.
          echo "run-policy-enforcement=true" >> $GITHUB_OUTPUT
          echo "run-example-notebooks=${run_example_notebooks}" >> $GITHUB_OUTPUT
          echo "run-python-package=${run_python_package}" >> $GITHUB_OUTPUT
          if [[ "$GITHUB_EVENT_NAME" != "pull_request" ]] || ! is_unchanged .github/workflows/vast.yaml; then
            echo "run-changelog=true" >> $GITHUB_OUTPUT
            echo "run-python=true" >> $GITHUB_OUTPUT
            echo "run-vast-io=true" >> $GITHUB_OUTPUT
            echo "run-docker-vast=true" >> $GITHUB_OUTPUT
            echo "run-docker-compose=true" >> $GITHUB_OUTPUT
            echo "run-vast-nix=true" >> $GITHUB_OUTPUT
            echo "run-vast=true" >> $GITHUB_OUTPUT
            echo "run-vast-plugins=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          run_python=false
          if ! is_unchanged python/; then
            run_python=true
          fi
          echo "run-python=${run_python}" >> $GITHUB_OUTPUT
          run_vast_io=${run_python}
          if ! is_unchanged web/; then
            run_vast_io=true
          fi
          echo "run-vast-io=${run_vast_io}" >> $GITHUB_OUTPUT
          run_changelog=${run_vast_io}
          if ! is_unchanged CHANGELOG.md changelog/; then
            run_changelog=true
          fi
          echo "run-changelog=${run_changelog}" >> $GITHUB_OUTPUT
          run_vast=false
          if ! is_unchanged cmake/ CMakeLists.txt libvast/ libvast_test/ scripts/ schema/ tools/ vast/ vast.yaml.example version.json; then
            run_vast=true
          fi
          run_vast_plugins=${run_vast}
          if ! is_unchanged plugins/; then
            run_vast_plugins=true
          fi
          if ! is_unchanged contrib/vast-plugins/; then
            run_vast_plugins=true
          fi
          echo "run-vast-plugins=${run_vast_plugins}" >> $GITHUB_OUTPUT
          # Build vast if no artifact is present in google store
          if [[ ${run_vast_plugins} == "true" && ${run_vast} == "false" ]]; then
            deb_package="$(echo "vast-${before_version}-linux-Release-GCC" | awk '{ print tolower($0) }')"
            mac_package="$(echo "vast-${before_version}-darwin-Release-Clang" | awk '{ print tolower($0) }')"
            if ! gsutil -q stat gs://${{ secrets.GCS_BUCKET }}/${deb_package}.tar.gz; then
              run_vast=true
            elif ! gsutil -q stat gs://${{ secrets.GCS_BUCKET }}/${mac_package}.tar.gz; then
              run_vast=true
            fi
          fi
          echo "run-vast=${run_vast}" >> $GITHUB_OUTPUT
          run_docker_compose=${run_vast}
          if [[ $GITHUB_EVENT_NAME == "workflow_dispatch" ]]; then
            run_docker_compose=false
          elif [[ ${run_vast_plugins} == "true" || ${run_python} == "true" ]]; then
            run_docker_compose=true
          elif ! is_unchanged docker/ Dockerfile .dockerignore; then
            run_docker_compose=true
          fi
          echo "run-docker-compose=${run_docker_compose}" >> $GITHUB_OUTPUT
          run_docker_vast=${run_docker_compose}
          if [[ $GITHUB_EVENT_NAME == "workflow_dispatch" ]]; then
            run_docker_vast=false
          elif [[ ${run_vast_io} == "true" || ${run_python} == "true" ]]; then
            run_docker_vast=true
          fi
          echo "run-docker-vast=${run_docker_vast}" >> $GITHUB_OUTPUT
          run_vast_nix=${run_vast}
          if ${run_vast_plugins}; then
            run_vast_nix=true
          elif ! is_unchanged nix/ flake.lock *.nix; then
            run_vast_nix=true
          elif [[ $GITHUB_EVENT_NAME == "workflow_dispatch" ]]; then
            run_vast_nix=true
          fi
          echo "run-vast-nix=${run_vast_nix}" >> $GITHUB_OUTPUT

  policy-enforcement:
    name: Policy Enforcement
    needs:
      - configure
    if: ${{ needs.configure.outputs.run-policy-enforcement == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure ssh-agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Require contrib/vast-plugins to be on a main branch commit
        run: |
          git submodule update --init contrib/vast-plugins
          git -C contrib/vast-plugins fetch origin main
          git -C contrib/vast-plugins merge-base --is-ancestor \
            $(git -C contrib/vast-plugins rev-parse HEAD) \
            $(git -C contrib/vast-plugins rev-parse origin/main)
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Verify Nix sources are synchronized
        run: |
          nix/update.sh
          git diff --quiet --exit-code || {
            echo "Some Nix source references are not aligned with the git submodules."
            echo "Please run `nix/update.sh` or apply the following diff directly:"
            git diff --exit-code
          }

  changelog:
    name: Changelog
    needs:
      - configure
    if: ${{ needs.configure.outputs.run-changelog == 'true' }}
    runs-on: ubuntu-20.04
    container: python:3.10-slim-bullseye
    steps:
      - name: Install git
        run: |
          apt-get update
          apt-get -y install git
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Dependencies
        run: ./scripts/debian/install-dev-dependencies.sh
      - name: Configure Build
        env:
          CC: gcc-10
          CXX: g++-10
        run: |
          cmake -B build -DVAST_ENABLE_SKIP_AFTER_CHANGELOG_UPDATE:BOOL=ON
      - name: Generate CHANGELOG.md
        run: |
          cmake --build build --target changelog
      - name: Upload CHANGELOG.md
        uses: actions/upload-artifact@v3
        with:
          name: CHANGELOG.md
          path: build/CHANGELOG.md
          if-no-files-found: error

  vast-io:
    needs:
      - configure
      - changelog
      - docker-vast
    if: ${{ needs.configure.outputs.run-vast-io == 'true' }}
    name: vast.io
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout dotgithub submodule
        run: |
          git submodule update --init web/.github
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download CHANGELOG.md
        uses: actions/download-artifact@v3
        with:
          name: CHANGELOG.md
      - name: Override Stub Changelog
        run: |
          cp -f CHANGELOG.md web/src/pages/changelog.md
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache-dependency-path: web/yarn.lock
          cache: yarn
      - name: Install dependencies
        working-directory: web
        run: yarn install --frozen-lockfile
      - name: Build website
        working-directory: web
        run: |
          export VAST_CONTAINER_REF="${{ needs.configure.outputs.vast-container-ref }}"
          export VAST_CONTAINER_REGISTRY=ghcr.io
          yarn build
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: web/build
          cname: vast.io
          user_name: tenzir-bot
          user_email: engineering@tenzir.com

  docker-vast:
    needs:
      - configure
    if: ${{ needs.configure.outputs.run-docker-vast == 'true' }}
    name: ${{ matrix.docker-vast.job-name }} (Docker)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        docker-vast:
          - name: vast
            job-name: VAST
            upload-dev-images: true
          - name: vast-ce
            job-name: VAST CE
            upload-dev-images: false
            plugins:
              - matcher
              - netflow
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update submodules
        run: |
          git submodule update --init --recursive libvast plugins
      - name: Configure ssh-agent
        if: ${{ matrix.docker-vast.name == 'vast-ce' }}
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Initialize Community Edition plugins
        if: ${{ matrix.docker-vast.name == 'vast-ce' }}
        run: |
          git submodule update --init --recursive contrib/vast-plugins
          # Remove plugins that are not in matrix.docker-vast.plugins
          # We move everything out first and then only move the wanted plugins
          # back in.
          mv contrib/vast-plugins _plugtmp
          mkdir contrib/vast-plugins
          for plugin in ${{ join(matrix.docker-vast.plugins, ' ') }}; do
            mv "_plugtmp/$plugin" contrib/vast-plugins/
          done
          rm -rf _plugtmp
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Build Docker Images
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            ref_tag="${{ needs.configure.outputs.head-ref-slug }}"
          else
            ref_tag="${{ github.sha }}"
          fi
          docker_build_args="${{ needs.configure.outputs.docker-build-args }}"
          # Build the Docker images using ghcr.io/tenzir/vast as a registry-type
          # layer cache. We upload this cache for every merge but also for every
          # pull request, using the head ref slug as an identifier within PRs.
          # We specify cache-from multiple times in order because we want to
          # prefer an existing cache for the current trigger over the cache that
          # we attempt to restore from, which is the before sha for pushes and
          # the merge-base for pull requests.
          docker buildx build . -t tenzir/${{ matrix.docker-vast.name }}:latest --target production --load \
            --platform linux/amd64 \
            --build-arg "VAST_BUILD_OPTIONS=${docker_build_args}" \
            --label "org.opencontainers.image.source=https://github.com/tenzir/vast" \
            --cache-to "type=registry,mode=max,ref=ghcr.io/tenzir/${{ matrix.docker-vast.name }}:build-cache" \
            --cache-from "type=registry,ref=ghcr.io/tenzir/${{ matrix.docker-vast.name }}:build-cache"
          if [[ "${{ matrix.docker-vast.upload-dev-images }}" == "true" ]]; then
            docker buildx build . -t tenzir/${{ matrix.docker-vast.name }}-dev:latest --target development --load \
              --platform linux/amd64 \
              --build-arg "VAST_BUILD_OPTIONS=${docker_build_args}" \
              --label "org.opencontainers.image.source=https://github.com/tenzir/vast" \
              --cache-from "type=registry,ref=ghcr.io/tenzir/${{ matrix.docker-vast.name }}:build-cache"
            docker buildx build . -t tenzir/${{ matrix.docker-vast.name }}-deps:latest --target dependencies --load \
              --platform linux/amd64 \
              --build-arg "VAST_BUILD_OPTIONS=${docker_build_args}" \
              --label "org.opencontainers.image.source=https://github.com/tenzir/vast" \
              --cache-from "type=registry,ref=ghcr.io/tenzir/${{ matrix.docker-vast.name }}:build-cache"
          fi
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            docker tag tenzir/${{ matrix.docker-vast.name }}:latest "ghcr.io/tenzir/${{ matrix.docker-vast.name }}:${ref_tag}"
            docker push "ghcr.io/tenzir/${{ matrix.docker-vast.name }}:${ref_tag}"
          fi
      - name: Publish Docker Images
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          registries=('' 'ghcr.io/')
          images=('tenzir/${{ matrix.docker-vast.name }}')
          if [[ "${{ matrix.docker-vast.upload-dev-images }}" == "true" ]]; then
            images+=('tenzir/${{ matrix.docker-vast.name }}-dev' 'tenzir/${{ matrix.docker-vast.name }}-deps')
          fi
          if [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
            tags=('stable' "${{ github.sha }}" "${{ needs.configure.outputs.release-version }}")
          else
            tags=('latest' "${{ github.sha }}")
          fi
          for registry in "${registries[@]}"; do
            for image in "${images[@]}"; do
              for tag in "${tags[@]}"; do
                docker tag "${image}:latest" "${registry}${image}:${tag}"
                docker push "${registry}${image}:${tag}"
              done
            done
          done

  regression-tests:
    needs:
      - docker-vast
      - configure
    strategy:
      fail-fast: false
      matrix:
        regression-tests: ${{ fromJson(needs.configure.outputs.version-matrix) }}
    name: Regression Tests (${{ matrix.regression-tests.version }})
    runs-on: ubuntu-20.04
    env:
      DOCKER_BUILDKIT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run Regression Tests
        run: |
          scripts/regression-tests.sh ${{ matrix.regression-tests.version }} ${{ needs.configure.outputs.vast-container-ref }}


  docker-compose:
    needs:
      - docker-vast
      - configure
    if: ${{ needs.configure.outputs.run-docker-compose == 'true' }}
    name: Docker Compose
    runs-on: ubuntu-20.04
    env:
      DOCKER_BUILDKIT: 1
      VAST_CONTAINER_REGISTRY: ghcr.io
      VAST_CONTAINER_REF: ${{ needs.configure.outputs.vast-container-ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Run VAST Tests
        run: |
          docker/test
      - name: Run Cortex Neuron Tests
        run: |
          docker/thehive/vast-cortex-neuron/tests/run service
      - name: Run TheHive Tests
        run: |
          docker/thehive/test

  example-notebooks:
    needs:
      - docker-vast
      - configure
    if: ${{ needs.configure.outputs.run-example-notebooks == 'true' }}
    name: Build Example Notebooks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Notebooks
        working-directory: examples/notebooks
        run: |
          export VAST_CONTAINER_REF="${{ needs.configure.outputs.vast-container-ref }}"
          export VAST_CONTAINER_REGISTRY=ghcr.io
          make docker
          # TODO: An assertion of the actual content of the output would be welcome
          make docker TARGET=clean

  vast-nix:
    needs:
      - configure
    if: ${{ needs.configure.outputs.run-vast-nix == 'true' }}
    name: ${{ matrix.vast-nix.job-name }} (Nix)
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        # The values for `package` and `image-basename` should correspond to
        # so that `-static` in the former is `-slim` in the latter. This way
        # the binary artifacts built in one job are resused by the other.
        # Both names are defined in `flake.nix`.
        vast-nix:
          - job-name: VAST
            name: vast
            package: vast-static
            release-asset-name: vast-linux-static
            image-basename: vast-slim
          - job-name: VAST CE
            name: vast-ce
            package: vast-ce-static
            release-asset-name: vast-ce-linux-static
            image-basename: vast-ce-slim
    env:
      BUILD_DIR: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-unstable
      - name: Configure ssh-agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: vast
          signingKey: "${{ secrets.CACHIX_VAST_SIGNING_KEY }}"
      - name: Build Static Packages
        id: build_static_packages
        run: |
          STORE_PATH=$(nix --print-build-logs build .#${{ matrix.vast-nix.package }}.package --print-out-paths)
          TAR_GZ=$(find "$STORE_PATH" -type f -name '*.tar.gz')
          echo "TARBALL is at: $TAR_GZ"
          echo "tar_gz=${TAR_GZ}" >> $GITHUB_OUTPUT
          DEB="$(find "$STORE_PATH" -type f -name '*.deb')"
          echo "DEB is at: $DEB"
          echo "deb=${DEB}" >> $GITHUB_OUTPUT
          # The debian package filename contains a colon (:), but GitHub does
          # not allow this character in attached assets, so we create an extra
          # copy.
          DEB_GITHUB="$PWD/$(basename "$DEB" | tr ':' '_')"
          echo "DEB_GITHUB is at: $DEB_GITHUB"
          cp "$DEB" "$DEB_GITHUB"
          echo "deb_github=${DEB_GITHUB}" >> $GITHUB_OUTPUT
      - name: Run Integration Tests
        run: |
          mkdir -p vast-integration-test
          tar xf ${{ steps.build_static_packages.outputs.tar_gz }} --directory vast-integration-test
          nix develop .#vast-integration-test-shell --command python vast/integration/integration.py --app \
            vast-integration-test/opt/vast/bin/vast
      - name: Upload Integration Test Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: "vast-integration-test-nix-static-vast"
          path: "vast-integration-test"
          if-no-files-found: error
      - name: Upload Tarball to Github
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.vast-nix.name }}.tar.gz"
          path: "${{ steps.build_static_packages.outputs.tar_gz }}"
          if-no-files-found: error
      - name: Upload Debian Package to Github
        uses: actions/upload-artifact@v3
        with:
          name: "${{ matrix.vast-nix.name }}.deb"
          path: "${{ steps.build_static_packages.outputs.deb_github }}"
          if-no-files-found: error
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Authenticate to Google Cloud
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDP }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - name: Configure GCloud Credentials
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        uses: google-github-actions/setup-gcloud@v1
      - name: Upload Artifact to GCS (push)
        if: github.event_name == 'push'
        env:
          PUBLIC_GCS_BUCKET: tenzir-public-data
          STATIC_BINARY_FOLDER: vast-static-builds
        run: |
          TAR_GZ_BASENAME="$(basename "${{ steps.build_static_packages.outputs.tar_gz }}")"
          gsutil cp "${{ steps.build_static_packages.outputs.tar_gz }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${TAR_GZ_BASENAME}"
          gsutil cp "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${TAR_GZ_BASENAME}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ matrix.vast-nix.package }}-latest.tar.gz"
          gsutil cp "${{ steps.build_static_packages.outputs.deb }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${{ matrix.vast-nix.package }}-latest.deb"
      - name: Upload Artifact to GCS (release)
        if: github.event_name == 'release'
        env:
          PUBLIC_GCS_BUCKET: tenzir-public-data
          STATIC_BINARY_FOLDER: vast-static-builds
        run: |
          TAR_GZ_BASENAME="$(basename "${{ steps.build_static_packages.outputs.tar_gz }}" .tar.gz)"
          DEB_BASENAME="$(basename "${{ steps.build_static_packages.outputs.deb }}" .deb)"
          gsutil cp "${{ steps.build_static_packages.outputs.tar_gz }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}/${TAR_GZ_BASENAME}-latest.tar.gz"
          gsutil cp "${{ steps.build_static_packages.outputs.deb }}" "gs://${{ env.PUBLIC_GCS_BUCKET }}/${{ env.STATIC_BINARY_FOLDER }}${DEB_BASENAME}-latest.deb"
      # This step ensures that assets from previous runs are cleaned up to avoid
      # failure of the next step (asset upload)
      - name: Delete Release Assets
        if: github.event_name == 'release'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          # don't fail if no previous assets exist
          fail-if-no-assets: false
          # only delete assets when `tag` refers to a release
          fail-if-no-release: true
          assets: |
            "${{ matrix.vast-nix.release-asset-name }}.tar.gz"
            "${{ matrix.vast-nix.release-asset-name }}.deb"
      - name: Upload Release Tarball
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ steps.build_static_packages.outputs.tar_gz }}"
          # The asset name is constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-linux-static.tar.gz
          # for a build of the latest release.
          asset_name: "${{ matrix.vast-nix.release-asset-name }}.tar.gz"
          asset_content_type: application/gzip
      - name: Upload Debian Release Package
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ steps.build_static_packages.outputs.deb_github }}"
          # The asset name is constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-linux-static.deb
          # for a build of the latest release.
          asset_name: "${{ matrix.vast-nix.release-asset-name }}.deb"
          asset_content_type: application/vnd.debian.binary-package
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Build Docker Image
        if: github.event_name != 'workflow_dispatch'
        run: |
          nix run .#stream-${{ matrix.vast-nix.image-basename }}-image | docker load
      - name: Upload Docker Image
        if: github.event_name != 'workflow_dispatch'
        run: |
          image="tenzir/${{ matrix.vast-nix.image-basename }}"
          if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
            registries=('ghcr.io/')
            tags=("${{ needs.configure.outputs.head-ref-slug }}")
          elif [[ "$GITHUB_EVENT_NAME" == "push" ]]; then
            registries=('' 'ghcr.io/')
            tags=('latest' "${{ github.sha }}")
          elif [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
            registries=('' 'ghcr.io/')
            tags=('stable' "${{ github.sha }}" "${{ needs.configure.outputs.release-version }}")
          else
            2>& echo "unexpected github.event_name '${GITHUB_EVENT_NAME}'"
            exit 1
          fi
          for registry in "${registries[@]}"; do
            for tag in "${tags[@]}"; do
              docker tag "${image}:latest-nix" "${registry}${image}:${tag}"
              docker push "${registry}${image}:${tag}"
            done
          done

  vast:
    needs:
      - configure
    if: ${{ needs.configure.outputs.run-vast == 'true' }}
    name: VAST (${{ matrix.vast.name }})
    runs-on: ${{ matrix.vast.os }}
    container: ${{ matrix.vast.container }}
    strategy:
      matrix:
        vast:
          - os: ubuntu-20.04
            container: python:3.10-slim-bullseye
            name: Debian
            compiler: GCC
            cc: gcc-10
            cxx: g++-10
            dependencies-script-path: scripts/debian/install-dev-dependencies.sh
            cmake-extra-flags: -DVAST_ENABLE_BUNDLED_CAF:BOOL=ON
          - os: macos-latest
            container: null
            name: macOS
            compiler: Clang
            cc: clang
            cxx: clang++
            dependencies-script-path: scripts/macOS/install-dev-dependencies.sh
            cmake-extra-flags: -DVAST_ENABLE_BUNDLED_CAF:BOOL=ON
    env:
      BUILD_DIR: build
      CC: ${{ matrix.vast.cc }}
      CXX: ${{ matrix.vast.cxx }}
      CCACHE_ABSSTDERR: true
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_DIR: "${{ github.workspace }}/.ccache"
      CCACHE_HASH_DIR: true
      CCACHE_SLOPPINESS: "file_macro,time_macros"
      CCACHE_UNIFY: true
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      DEBIAN_FRONTEND: noninteractive
      HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
    steps:
      - if: ${{ matrix.vast.name == 'Debian' }}
        name: Install git
        run: |
          apt-get update
          apt-get -y install git
      - name: Checkout
        uses: actions/checkout@v3
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --recursive libvast
          git submodule update --init --recursive plugins
      - name: Install Dependencies
        run: ./${{ matrix.vast.dependencies-script-path }}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Configure Environment
        run: |
          PACKAGE_NAME="$(echo "vast-${{ needs.configure.outputs.build-version }}-$(uname -s)-Release-${{ matrix.vast.compiler }}" | awk '{ print tolower($0) }')"
          PUBLISH_NAME="$(echo "vast-$(uname -s)-Release-${{ matrix.vast.compiler }}" | awk '{ print tolower($0) }')"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
          echo "PUBLISH_NAME=$PUBLISH_NAME" >> $GITHUB_ENV
      - if: ${{ matrix.vast.name == 'macOS' }}
        name: Setup Homebrew Clang
        run: |
          llvm_root="$(brew --prefix llvm)"
          echo "${llvm_root}/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-Wl,-rpath,${llvm_root}" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem ${llvm_root}/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-isystem ${llvm_root}/include/c++/v1" >> $GITHUB_ENV
      - name: Fetch ccache Cache
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ github.workflow }}-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}-${{ needs.configure.outputs.head-ref-slug }}-${{ github.sha }}
          restore-keys: |
            ${{ github.workflow }}-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}-${{ needs.configure.outputs.head-ref-slug }}
            ${{ github.workflow }}-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}-${{ needs.configure.outputs.base-ref-slug }}
            ${{ github.workflow }}-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}-master
            ${{ github.workflow }}-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}
      - name: Configure
        run: |
          python3 --version
          python3 -m pip --version
          "$CC" --version
          "$CXX" --version
          ccache --version
          # Zero the cache statistics (but not the configuration options).
          ccache --zero-stats
          ccache --show-config
          # Setting different values for CMAKE_INSTALL_PREFIX and
          # CPACK_PACKAGING_INSTALL_PREFIX is currently not supported and causes
          # a warning. We accept this drawback because the package we generate
          # here is built specifically as input for the plugin CI jobs and not
          # suitable for general use.
          cmake -B "$BUILD_DIR" \
            -DCMAKE_INSTALL_PREFIX:STRING="${PWD}/opt/vast" \
            -DCPACK_GENERATOR:STRING=TGZ \
            -DCPACK_PACKAGE_FILE_NAME:STRING="$PACKAGE_NAME" \
            -DCPACK_PACKAGING_INSTALL_PREFIX:STRING="/" \
            -DVAST_ENABLE_LSVAST:BOOL=ON \
            -DCMAKE_BUILD_TYPE:STRING="${{ github.event_name == 'pull_request' && 'CI' || 'Release' }}" \
            ${{ needs.configure.outputs.cmake-version-args }} \
            ${{ matrix.vast.cmake-extra-flags }}
      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all --parallel --verbose
      - name: Show ccache Statistics
        run: |
          # Print statistics counter IDs and corresponding values.
          ccache --show-stats
          # Print statistics about cache compression.
          ccache --show-compression
      - name: Run Unit Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: YES
        # --test-dir is not yet supported in the ctest version we're using here.
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest --parallel
      - name: Install
        run: |
          cmake --install "$BUILD_DIR"
      - name: Run Integration Tests
        run: |
          cmake --build "$BUILD_DIR" --target integration
      - name: Upload Integration Test Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: "vast-integration-test-${{ matrix.vast.name }}-${{ matrix.vast.compiler }}"
          path: "${{ env.BUILD_DIR }}/vast/vast-integration-test"
          if-no-files-found: error
      - name: Package
        env:
          DESTDIR: ${{ env.PWD }}
        run: |
          cmake --build "$BUILD_DIR" --target package
      - name: Upload Artifact to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.PACKAGE_NAME }}.tar.gz"
          path: "${{ env.BUILD_DIR }}/package/${{ env.PACKAGE_NAME }}.tar.gz"
          if-no-files-found: error
      - name: Authenticate to Google Cloud
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDP }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - name: Configure GCloud Credentials
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        uses: google-github-actions/setup-gcloud@v1
      - name: Upload Artifact to GCS
        if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
        run: |
          gsutil -m cp "${{ env.BUILD_DIR }}/package/${{ env.PACKAGE_NAME }}.tar.gz" "gs://${{ secrets.GCS_BUCKET }}/${{ env.PACKAGE_NAME }}.tar.gz"
      # This step ensures that assets from previous runs are cleaned up to avoid
      # failure of the next step (asset upload)
      - name: Delete existing Release Assets
        if: github.event_name == 'release'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          # don't fail if no previous assets exist.
          fail-if-no-assets: false
          # only delete assets when `tag` refers to a release
          fail-if-no-release: tru
          assets: "${{ env.PUBLISH_NAME }}.tar.gz"
      - name: Publish to GitHub Release
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ env.BUILD_DIR }}/package/${{ env.PACKAGE_NAME }}.tar.gz"
          # The asset names are constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-debian-release-gcc.tar.gz
          # https://github.com/tenzir/vast/releases/latest/download/vast-debian-release-clang.tar.gz
          # for builds of the latest release.
          asset_name: "${{ env.PUBLISH_NAME }}.tar.gz"
          asset_content_type: application/gzip
      - name: Publish VAST.spdx to GitHub Release
        if: ${{ github.event_name == 'release' && matrix.vast.name == 'Debian' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "VAST.spdx"
          asset_name: "VAST.spdx"
          asset_content_type: text/plain

  vast-plugins:
    needs:
      - vast
      - configure
    if: >-
      always() &&
      needs.configure.outputs.run-vast-plugins == 'true' &&
      !contains(join(needs.*.result, ','), 'failure') &&
      !contains(join(needs.*.result, ','), 'cancelled')
    runs-on: ${{ matrix.setup.os }}
    container: ${{ matrix.setup.container }}
    strategy:
      matrix:
        setup:
          - os: ubuntu-20.04
            name: Debian
            container: python:3.10-slim-bullseye
            cc: gcc-10
            cxx: g++-10
            package-suffix: Release-GCC
          - os: macos-latest
            name: macOS
            cc: clang
            cxx: clang++
            package-suffix: Release-Clang
        plugin:
          - name: Example Analyzer
            target: example-analyzer
            path: examples/plugins/analyzer
            debian-dependencies:
          - name: Example Pipeline Operator
            target: example-pipeline-operator
            path: examples/plugins/pipeline_operator
            debian-dependencies:
          - name: Sigma
            target: sigma
            path: plugins/sigma
          - name: Parquet
            target: parquet
            path: plugins/parquet
          - name: PCAP
            target: pcap
            path: plugins/pcap
          - name: Web
            target: web
            path: plugins/web
            debian-dependencies:
              - libasio-dev
              - libhttp-parser-dev
            mac-dependencies:
              - asio
              - http-parser
          - name: Compaction
            target: compaction
            path: plugins/compaction
          # TODO: Enable once this builds without warnings
          # - name: Fleet
          #   target: fleet
          #   path: plugins/fleet
          - name: Inventory
            target: inventory
            path: plugins/inventory
          - name: Matcher
            target: matcher
            path: plugins/matcher
          - name: Netflow
            target: netflow
            path: plugins/netflow
        exclude:
          # Disable the Parquet plugin because trying
          # to use it on the macOS CI runners crashes because of an illegal
          # instruction as of Arrow 10.0.0.
          - {setup: {os: macos-latest}, plugin: {name: Parquet}}
          # Disable proprietary and example plugins on macOS to shorten CI turnaround.
          # GitHub does not run more than 5 jobs in parallel on macOS.
          - {setup: {os: macos-latest}, plugin: {name: Example Analyzer}}
          - {setup: {os: macos-latest}, plugin: {name: Example Pipeline Operator}}
          - {setup: {os: macos-latest}, plugin: {name: Compaction}}
          - {setup: {os: macos-latest}, plugin: {name: Fleet}}
          - {setup: {os: macos-latest}, plugin: {name: Inventory}}
          - {setup: {os: macos-latest}, plugin: {name: Matcher}}
          - {setup: {os: macos-latest}, plugin: {name: Netflow}}
    env:
      INSTALL_DIR: "${{ github.workspace }}/_install"
      BUILD_DIR: "${{ github.workspace }}/_build"
      PACKAGE_SUFFIX: ${{ matrix.setup.package-suffix }}
      CC: ${{ matrix.setup.cc }}
      CXX: ${{ matrix.setup.cxx }}
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      CTEST_OUTPUT_ON_FAILURE: YES
      DEBIAN_FRONTEND: noninteractive
      HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
      HOMEBREW_NO_ANALYTICS: 1
      HOMEBREW_NO_INSTALL_CLEANUP: 1
      HOMEBREW_NO_AUTO_UPDATE: 1
    name: VAST Plugins (${{ matrix.plugin.name }}, ${{ matrix.setup.name }})
    steps:
      - name: Install Git (Debian)
        if: ${{ matrix.setup.os == 'ubuntu-20.04' }}
        run: |
          apt-get update
          apt-get -y install git
      - name: Configure ssh-agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install Dependencies (macOS)
        if: ${{ matrix.setup.os == 'macos-latest' }}
        run: |
          brew install \
            ${{ join(matrix.setup.mac-dependencies, ' ') }} \
            curl
          ./scripts/macOS/install-dev-dependencies.sh
          python3 -m pip install --upgrade pip
      - name: Install Dependencies (Debian)
        if: ${{ matrix.setup.os == 'ubuntu-20.04' }}
        run: |
          apt-get -y install \
            ${{ join(matrix.plugin.debian-dependencies, ' ') }} \
            apt-transport-https \
            curl
          ./scripts/debian/install-dev-dependencies.sh
          python3 -m pip install --upgrade pip
      - name: Determine VAST Package Name
        id: configure
        run: |
          build_version=${{ needs.configure.outputs.build-version }}
          if ${{ needs.configure.outputs.run-vast == 'false' }}; then
            build_version=${{ needs.configure.outputs.before-version }}
          fi
          PACKAGE_NAME="$(echo "vast-${build_version}-$(uname -s)-${PACKAGE_SUFFIX}" | awk '{ print tolower($0) }')"
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
      - name: Download VAST artifact
        if: ${{ needs.configure.outputs.run-vast == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: "${{ env.PACKAGE_NAME }}.tar.gz"
      - name: Authenticate to Google Cloud
        if: ${{ needs.configure.outputs.run-vast == 'false' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDP }}
          service_account: ${{ env.GCP_SERVICE_ACCOUNT }}
      - name: Configure GCloud Credentials
        if: ${{ needs.configure.outputs.run-vast == 'false' }}
        uses: google-github-actions/setup-gcloud@v1
      - name: Download VAST
        if: ${{ needs.configure.outputs.run-vast == 'false' }}
        run: |
          gsutil cp "gs://${{ secrets.GCS_BUCKET }}/${{ env.PACKAGE_NAME }}.tar.gz" .
      - name: Install VAST
        run: |
          mkdir "${INSTALL_DIR}"
          tar -C "${INSTALL_DIR}" -xzvf "${PACKAGE_NAME}.tar.gz"
          echo "${INSTALL_DIR}/bin" >> $GITHUB_PATH
      - name: Setup Homebrew Clang
        if: ${{ matrix.setup.os == 'macos-latest' }}
        run: |
          llvm_root="$(brew --prefix llvm)"
          echo "${llvm_root}/bin" >> $GITHUB_PATH
          echo "LDFLAGS=-Wl,-rpath,${llvm_root}" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem ${llvm_root}/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-isystem ${llvm_root}/include/c++/v1" >> $GITHUB_ENV
      - name: Configure Build
        env:
          VAST_DIR: "${{ env.INSTALL_DIR }}"
        run: |
          python3 --version
          python3 -m pip --version
          cmake --version
          cmake -S '${{ matrix.plugin.path }}' -B "$BUILD_DIR"
      - name: Build
        run: |
          cmake --build "$BUILD_DIR" --target all --parallel
      - name: Run Unit Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        # --test-dir is not yet supported in the ctest version we're using here.
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          ctest --parallel
      - name: Run Integration Tests
        id: integration_tests
        # We intentionally run the plugin integration tests before
        # installing, because that is a use-case we want to explicitly
        # support for easier plugin development.
        run: |
          cmake --build "$BUILD_DIR" --target integration
      - name: Upload Integration Test Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: "vast-${{ matrix.plugin.target }}-integration-test"
          path: "${{ env.BUILD_DIR }}/vast-${{ matrix.plugin.target }}-integration-test"
          if-no-files-found: error
      - name: Install
        run: |
          cmake --install "$BUILD_DIR" --prefix "$INSTALL_DIR"
          echo "${INSTALL_DIR}/bin" >> $GITHUB_PATH

  python:
    needs:
      - configure
      - docker-vast
    if: ${{ needs.configure.outputs.run-python == 'true' }}
    name: Python
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest, macos-latest]
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup Poetry image
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: 1.3.0
      - name: Run poetry install
        working-directory: python
        run: |
          poetry install
      - name: Run unit tests
        working-directory: python
        run: |
          poetry run pytest
      - name: Run tests in Docker
        working-directory: python
        if: matrix.os == 'ubuntu-latest'
        run: |
          export VAST_CONTAINER_REF="${{ needs.configure.outputs.vast-container-ref }}"
          export VAST_CONTAINER_REGISTRY=ghcr.io
          ./docker-poetry-run.sh pytest
      - name: Build package
        working-directory: python
        run: |
          poetry build

  python-package:
    needs:
      - python
      - configure
    if: ${{ needs.configure.outputs.run-python-package == 'true' }}
    name: Python Package
    runs-on: ubuntu-20.04
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Setup Poetry image
        uses: abatilo/actions-poetry@v2.3.0
        with:
          poetry-version: 1.3.0
      - name: Configure PyPI
        working-directory: python
        run: |
          poetry config pypi-token.pypi "${{ secrets.PYPI_TOKEN }}"
      - name: Publish to PyPI
        working-directory: python
        run: |
          poetry publish --build --no-interaction

  pass-branch-protections:
    needs:
      - policy-enforcement
      - configure
      - changelog
      - vast-io
      - docker-vast
      # We currently have a transient error on TheHive init script (sc-39576)
      # - docker-compose
      - example-notebooks
      - python
      - python-package
      - regression-tests
      - vast
      - vast-io
      - vast-nix
      - vast-plugins
    if: always()
    runs-on: ubuntu-latest
    name: Pass Branch Protections
    steps:
      - name: Failure
        if: contains(join(needs.*.result, ','), 'failure') || contains(join(needs.*.result, ','), 'cancelled')
        run: |
          # This check runs after any other job failed.
          exit 1
      - name: Success
        run: |
          # This check runs after all other jobs are done or skipped
          exit 0
