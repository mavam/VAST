name: VAST

on:
# workflow_dispatch:
#   inputs:
#     arguments:
#       description: "Additional arguments to pass, e.g., `--with-plugin=<path/to/plugin>` or `-D<CMake Option>`"
#       required: false
#       default: ""
# push:
#   branches:
#     - master
#     - v*
  pull_request:
    types:
      - opened
      - synchronize
# release:
#   types:
#     - published

# Cancel all in-progress runs for this workflow, unless we're running on master.
# This ensures that we don't run needlessly when pushing twice, and also don't
# update the cache needlessly.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:

  # We need to first determine the version to avoid races between jobs when
  # using tags to determine artifact names, as the output of git-describe may
  # change when a tag is pushed between jobs.
  configure-workflow:
    name: Configure Workflow
    runs-on: ubuntu-20.04
    outputs:
      build-version: ${{ steps.determine-version.outputs.build-version }}
      release-version: ${{ steps.determine-version.outputs.release-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Determine Version
        id: determine-version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          build_version="$(git describe --abbrev=10 --long --dirty --match='v[0-9]*')"
          release_version="$(git describe --abbrev=0 --match='v[0-9]*')"
          echo "::set-output name=build-version::${build_version}"
          echo "::set-output name=release-version::${release_version}"

  build:
    name: Build ${{ matrix.build.id }}
    needs:
      - configure-workflow
    strategy:
      fail-fast: false
      matrix:
        build:
          - id: macOS
            os: macos-latest
            dependencies:
              - apache-arrow
              - ccache
              - flatbuffers
              - fmt
              - libunwind-headers
              - ninja
              - pandoc
              - simdjson
              - spdlog
              - xxhash
              - yaml-cpp
          - id: Linux
            os: ubuntu-latest
            dependencies:
              # FIXME: incomplete
              - libxxhash-dev
    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Prepare Homebrew Cache (macOS)
        id: prepare-homebrew-cache
        if: ${{ runner.os == 'macOS' }}
        run: |
          homebrew_cache="$(brew --cache)"
          homebrew_core_version="$(git -C "$(brew --repo homebrew/core)" rev-parse HEAD)"
          echo "::set-output name=homebrew-cache::${homebrew_cache}"
          echo "::set-output name=homebrew-core-version::${homebrew_core_version}"
          rm -rf "${homebrew_cache}"
      - name: Configure Homebrew Cache (macOS)
        if: ${{ runner.os == 'macOS' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.prepare-homebrew-cache.outputs.homebrew-cache }}
          key: homebrew-${{ github.workflow }}-${{ runner.os }}-${{ steps.prepare-homebrew-cache.outputs.homebrew-core-version }}
          restore-keys: homebrew-${{ github.workflow }}-${{ runner.os }}-
      - name: Install Dependencies (macOS)
        if: ${{ runner.os == 'macOS' }}
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_UPGRADE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew install --formulae --display-times -- \
            ${{ join(matrix.build.dependencies, ' ') }}
          llvm_root="$(brew --prefix llvm)"
          echo "${llvm_root}/bin" >> $GITHUB_PATH
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          echo "CPPFLAGS=-isystem ${llvm_root}/include" >> $GITHUB_ENV
          echo "CXXFLAGS=-isystem ${llvm_root}/include/c++/v1" >> $GITHUB_ENV
          echo "LDFLAGS=-Wl,-rpath,${llvm_root}" >> $GITHUB_ENV
      - name: Install Dependencies (Linux)
        if: ${{ runner.os == 'Linux' }}
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install --yes -- \
            ${{ join(matrix.build.dependencies, ' ') }}
      - name: Configure Build
        env:
          CCACHE_ABSSTDERR: true
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 0
          CCACHE_HASH_DIR: true
          CCACHE_SLOPPINESS: "file_macro,time_macros"
          CCACHE_UNIFY: true
          CMAKE_CXX_COMPILER_LAUNCHER: ccache
          CMAKE_C_COMPILER_LAUNCHER: ccache
          CMAKE_GENERATOR: Ninja
          CMAKE_MAKE_PROGRAM: ninja
        run: |
          cmake -B "${{ runner.temp }}/build"
      - name: Configure ccache
        uses: hendrikmuhs/ccache-action@v1.1
        with:
          key: ${{ github.workflow }}-${{ hashFiles(format('{0}/build/CMakeCache.txt', runner.temp)) }}
      - name: Build
        run: |
          cmake --build "${{ runner.temp }}/build"
      - name: Install
        run: |
          cmake --install "${{ runner.temp }}/build" \
            --prefix "${{ runner.temp }}/install"
