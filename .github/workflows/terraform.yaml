name: "Terraform"
on: workflow_dispatch

# This CI configuration has multiple dependencies:
# - You need an AWS account with a user having sufficient IAM access to run
#   the Terraform scripts. Its credentials should be set in the repository
#   secrets as AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.
# - You need to choose an AWS region and a VPC within that region. These
#   should be configured in the repository secrets as AWS_REGION and
#   PEERED_VPC_ID.
# - The VAST deployment creates a new VPC. Its CIDR should not overlap an
#   existing one in your account. Configure it in the repository secrets as
#   VAST_CIDR
# - The CI run uses Terraform Cloud to store the state. Once you have an
#   account setup, configure its organization name and the desired workspace
#   in the repository secrets as TF_ORGANIZATION and TF_WORKSPACE. You also
#   need the API key from Terraform cloud and set it in TF_API_TOKEN

# Notes:
# - If this workflow is executed multiple times at in parallel, the Terraform
#   state will be protected against inconsistencies by the lock provided by
#   Terraform Cloud but the other tests will result in undefined behavior.
# - If Terraform fails or is interrupted during deployment or destruction, the
#   state might end up locked and subsequent runs will fail. In this case the
#   state first needs to be unlocked, for instance from the Terraform Cloud UI.

# Set these secrets to configure the CI run
env:
  PEERED_VPC_ID: "${{ secrets.PEERED_VPC_ID }}"
  VAST_CIDR: "${{ secrets.VAST_CIDR }}"
  TF_ORGANIZATION: "${{ secrets.TF_ORGANIZATION }}"
  TF_WORKSPACE_PREFIX: "${{ secrets.TF_WORKSPACE_PREFIX }}"
  AWS_REGION: "${{ secrets.AWS_REGION }}"
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"

jobs:
  vast_on_aws:
    name: "VAST ON AWS"
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Substitute backend with Terraform Cloud"
        run: |
          cat<<EOF > step-1/backend.tf
          terraform {
            cloud {
              organization = "$TF_ORGANIZATION"
              workspaces {
                name = "$TF_WORKSPACE_PREFIX-step-1"
              }
            }
          }
          EOF
          cat<<EOF > step-2/backend.tf
          terraform {
            cloud {
              organization = "$TF_ORGANIZATION"
              workspaces {
                name = "$TF_WORKSPACE_PREFIX-step-2"
              }
            }
          }
          EOF

      - name: "Create config file"
        if: ${{ !env.ACT }}
        run: |
          echo "peered_vpc_id = $PEERED_VPC_ID" >> .env
          echo "vast_cidr = $VAST_CIDR" >> .env
          echo "aws_region = $AWS_REGION" >> .env

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      - name: Terraform Format
        run: terraform fmt -check

      - name: Deploy
        id: deploy
        continue-on-error: true
        run: ./vast-cloud deploy --auto-approve

      - name: Retry deploy
        if: steps.deploy.outcome=='failure'
        run: |
          echo "Deploy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 200
          ./vast-cloud deploy --auto-approve

      - name: Start and restart VAST server
        run: |
          echo "Run start-vast-server"
          ./vast-cloud start-vast-server

          echo "Run start-vast-server again"
          ./vast-cloud start-vast-server 2> /dev/null \
            && { echo "Starting server again should fail"; false; } \
            || true
          [[ $(./vast-cloud get-vast-server | wc -w) = "1" ]] \
            || { echo "Only one task should be started"; false; }

          echo "Run restart-vast-server"
          ./vast-cloud restart-vast-server
          [[ $(./vast-cloud get-vast-server | wc -w) = "1" ]] \
            || { echo "Only one task should be started"; false; }

          echo "The task needs a bit of time to boot, sleeping for a while..."
          sleep 100

      - name: Test db empty from Lambda
        run: |
          result=$(./vast-cloud run-lambda -c "vast count")
          echo "Expected vast count 0, got $result"
          [[ $result = "0" ]]

      - name: Import data
        run: |
          DATA_URL=https://raw.githubusercontent.com/tenzir/vast/master/vast/integration/data/suricata/eve.json
          make execute-command \
            -c "wget -O - -o /dev/null $DATA_URL | vast import suricata"

      - name: Test db not empty from Lambda
        run: |
          result=$(./vast-cloud run-lambda -v "vast count")
          echo "Expected vast count 7, got $result"
          [[ $result = "7" ]]

      - name: Destroy
        continue-on-error: true
        id: destroy
        if: always()
        run: ./vast-cloud destroy --auto-approve

      - name: Retry destroy
        if: steps.destroy.outcome=='failure'
        run: |
          echo "Destroy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 300
          ./vast-cloud destroy --auto-approve
