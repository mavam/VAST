name: "Terraform"
on: workflow_dispatch

# This CI configuration has multiple dependencies:
# - You need an AWS account with a user having sufficient IAM access to run the
#   Terraform scripts and other CLI commands.
# - AWS credentials should be set in the Github repository secrets as
#   AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY. They should have sufficient IAM
#   priviledges to run Fargate tasks and Lambda functions.
# - You need to choose an AWS region and a VPC within that region. These should
#   be configured in the repository secrets as AWS_REGION and PEERED_VPC_ID.
# - The VAST deployment creates a new VPC. Its ip range should not overlap an
#   existing one in your account. Configure its CIDR in the repository secrets
#   as VAST_CIDR (for example 172.30.0.0/16).
# - The CI run uses Terraform Cloud to store the state. You need to properly
#   configure workspaces for each Terragrunt step:
#   - In Github Action secrets, set TF_ORGANIZATION with your Terraform Cloud
#     organizations name, TF_API_TOKEN with a Terraform Cloud API key (for
#     instance a user token) and choose a string to set as the
#     TF_WORKSPACE_PREFIX (e.g "github-action")
#   - Create a workspace in Terraform Cloud for each step. Their name should be
#     the concatenation of the chosen prefix and the "-step-1", "-step-2"...
#     suffixes (e.g "github-action-step-1", "github-action-step-2"...).
#   - For each of these workspaces:
#     - configure AWS credentials with sufficient priviledges to deploy the
#       stack. You can use a Variable Set to make this simpler.
#     - set the "Terraform Working Directory" field in the general settings to
#       the path of the environement (cloud/aws/step-x)

# Notes:
# - If this workflow is executed multiple times at in parallel, the Terraform
#   state will be protected against inconsistencies by the lock provided by
#   Terraform Cloud but the other tests will result in undefined behavior.
# - If Terraform fails or is interrupted during deployment or destruction, the
#   state might end up locked and subsequent runs will fail. In this case the
#   state first needs to be unlocked, for instance from the Terraform Cloud UI.

# Set these secrets to configure the CI run
env:
  VAST_PEERED_VPC_ID: "${{ secrets.VAST_PEERED_VPC_ID }}"
  VAST_CIDR: "${{ secrets.VAST_CIDR }}"
  VAST_AWS_REGION: "${{ secrets.VAST_AWS_REGION }}"
  TF_ORGANIZATION: "${{ secrets.TF_ORGANIZATION }}"
  TF_WORKSPACE_PREFIX: "${{ secrets.TF_WORKSPACE_PREFIX }}"
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
  AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
  VASTCLOUD_NOTTY: 1

jobs:
  vast_on_aws:
    name: VAST on AWS
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./cloud/aws
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Secret hashes
        run: |
          echo -n $VAST_PEERED_VPC_ID | md5sum
          echo -n $VAST_CIDR | md5sum
          echo -n $VAST_AWS_REGION | md5sum
          echo -n $TF_ORGANIZATION | md5sum
          echo -n $TF_WORKSPACE_PREFIX | md5sum
          echo -n $TF_API_TOKEN | md5sum
          echo -n $AWS_ACCESS_KEY_ID | md5sum
          echo -n $AWS_SECRET_ACCESS_KEY | md5sum

      - name: Substitute backend with Terraform Cloud
        run: |
          cat<<EOF > terraform/terragrunt.hcl
          generate "backend" {
            path = "backend.generated.tf"
            if_exists = "overwrite"
            contents = <<EOC
          terraform {
            cloud {
              organization = "$TF_ORGANIZATION"
              token        = "$TF_API_TOKEN"
              workspaces {
                name = "$TF_WORKSPACE_PREFIX-\${path_relative_to_include()}"
              }
            }
          }
          EOC
          }
          locals {
            versions_file = "\${path_relative_from_include()}/versions.hcl"
            versions = read_terragrunt_config(local.versions_file)
          }
          generate = local.versions.generate
          EOF

      - name: Deploy
        id: deploy
        continue-on-error: true
        run: ./vast-cloud deploy --auto-approve

      - name: Retry deploy
        if: steps.deploy.outcome=='failure'
        run: |
          echo "Deploy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 200
          ./vast-cloud deploy --auto-approve

      - name: Run integration.all playbook
        run: |
          ./vast-cloud integration.all

      - name: Destroy
        continue-on-error: true
        id: destroy
        if: always()
        run: ./vast-cloud destroy --auto-approve

      - name: Retry destroy
        if: steps.destroy.outcome=='failure'
        run: |
          echo "Destroy sometimes fails for an unexplained reason."
          echo "Retrying after a few minutes usually works."
          sleep 300
          ./vast-cloud destroy --auto-approve
