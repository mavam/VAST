name: "VAST"
on:
  push:
    branches:
    - master
    paths-ignore:
    - '**.md'
    - '!doc/**.md'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
    - '**.md'
    - '!doc/**.md'
  release:
    types: published
env:
  DEBIAN_FRONTEND: noninteractive
jobs:
  style:
    name: Style Check
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2

    - name: Fetch Master
      run: |
        git fetch origin master

    - uses: actions/setup-python@v1
      with:
        python-version: '3.7'

    - name: Clang Format
      run: |
        set -x
        pip install --upgrade pip clang-format
        git diff -U0 --no-color $(git merge-base origin/master HEAD) |
          scripts/clang-format-diff.py -p1

    - name: CMake Format
      run: |
        set -x
        pip install --upgrade pip "cmake_format==0.6.5"
        git diff --name-only --no-color --diff-filter=ACM $(git merge-base origin/master HEAD) -- "**CMakelists.txt" "**.cmake" |
          xargs cmake-format --in-place
        git diff --exit-code

    - name: Black
      run: |
        set -x
        pip install --upgrade pip black
        # Note: black fails when it doesn't have to do anything.
        git diff --name-only --no-color --diff-filter=ACM $(git merge-base origin/master HEAD) |
          grep -v '\(\.json\|\.ipynb\|\.hpp\.in\)$' |
          2>/dev/null xargs black || true
        git diff --exit-code

  build:
    name: ${{ matrix.os.tag }} ${{ matrix.configure.tag }}
    needs: style
    strategy:
      matrix:
        os:
        - tag: macOS
          name: macos-latest
          cc: clang
          cxx: clang++
          extra-flags:
        - tag: Ubuntu
          name: ubuntu-latest
          cc: gcc-8
          cxx: g++-8
          extra-flags: --without-arrow
        configure:
        - tag: Release
          flags: --release
          ci-flags: --ci-build
    runs-on: ${{ matrix.os.name }}
    env:
      CC: ${{ matrix.os.cc }}
      CXX: ${{ matrix.os.cxx }}
      BUILD_DIR: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch Submodules and Tags
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive
          git fetch origin +refs/tags/*:refs/tags/*

      - uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - name: Configure GCloud Credentials
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '275.0.0'
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Install Ubuntu Dependencies
        if: matrix.os.tag == 'Ubuntu'
        run: |
          sudo apt-get -qq update \
            && sudo apt-get -qqy install software-properties-common \
            && sudo add-apt-repository -y ppa:team-xbmc/ppa \
            && sudo apt-get -qqy install gcc-8 g++-8 ninja-build \
               libbenchmark-dev libpcap-dev libssl-dev libatomic1 \
               flatbuffers-dev
          pip install --upgrade pip
          pip install --upgrade cmake
          which cmake
          cmake --version

      - name: Install macOS Dependencies
        if: matrix.os.tag == 'macOS'
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
          HOMEBREW_NO_ANALYTICS: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew --version
          brew install openssl cmake git ninja python libpcap jq tcpdump rsync pandoc apache-arrow pkg-config flatbuffers

      - name: Configure Environment
        id: configure_env
        run: |
          PACKAGE_NAME="$(echo "vast-$(git describe)-$(uname -s)-${{ matrix.configure.tag }}" | awk '{ print tolower($0) }')"
          BUILD_DIR="build"
          ## the upload artifact action cannot resolve environment variables
          echo "::set-output name=package_name::$PACKAGE_NAME"
          echo "::set-output name=build_dir::$BUILD_DIR"
          echo "::set-env name=PACKAGE_NAME::$PACKAGE_NAME"
          echo "::set-env name=BUILD_DIR::$BUILD_DIR"

      - name: Configure
        run: |
          python --version
          pip --version
          "$CC" --version
          "$CXX" --version
          ./configure \
            --generator=Ninja \
            --prefix="${PWD}/opt/vast" \
            --build-dir="$BUILD_DIR" \
            --package-name="$PACKAGE_NAME" \
            ${{ matrix.os.extra-flags }} \
            ${{ github.event.action == 'published' && matrix.configure.flags ||Â matrix.configure.ci-flags }}

      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all

      - name: Run Unit Tests
        run: |
          cmake --build "$BUILD_DIR" --target test

      - name: Run Integration Tests
        id: integration_test_step
        run: |
          echo "::set-output name=status::true"
          if ! cmake --build "$BUILD_DIR" --target integration; then
            echo "::set-output name=status::false"
            tar -czf "$PACKAGE_NAME.tar.gz" -C build vast-integration-test
            exit 1
          fi

      - name: Upload Integration Test Logs on Failure
        if: failure() && steps.integration_test_step.outputs.status == 'false'
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Install
        run: |
          cmake --build "$BUILD_DIR" --target install

      - name: Package
        env:
          DESTDIR: $PWD
        run: |
          cmake --build "$BUILD_DIR" --target package

      - name: Upload Artifact to Github
        uses: actions/upload-artifact@v1
        with:
          name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          path: "${{ steps.configure_env.outputs.build_dir }}/${{ steps.configure_env.outputs.package_name }}.tar.gz"

      - name: Upload Artifact to GCS
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
        run: |
          gsutil -m cp "$BUILD_DIR/$PACKAGE_NAME.tar.gz" "gs://${{ secrets.GCS_BUCKET }}"

      - name: Publish Docker Image
        if: ( github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags') ) && matrix.os.tag == 'ubuntu' && matrix.configure.tag == 'Release'
        uses: elgohr/Publish-Docker-Github-Action@2.12
        with:
          name: tenzir/vast
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          dockerfile: Dockerfile_prebuilt

      - name: Publish to GitHub Release
        if: github.event.action == 'published'
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "${{ steps.configure_env.outputs.build_dir }}/${{ steps.configure_env.outputs.package_name }}.tar.gz"
          asset_name: "${{ steps.configure_env.outputs.package_name }}.tar.gz"
          asset_content_type: application/gzip
