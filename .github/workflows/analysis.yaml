name: Analysis
on:
  push:
    branches:
      - master
      - v*
  pull_request:
    types:
      - opened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-20.04
    container: python:3.10-slim-bullseye
    strategy:
      fail-fast: false
    env:
      BUILD_DIR: build
      CC: gcc-10
      CXX: g++-10
      CMAKE_GENERATOR: Ninja
      CMAKE_MAKE_PROGRAM: ninja
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install git
        run: |
          apt-get update
          apt-get -y install git
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --recursive libvast
          git submodule update --init --recursive plugins
      - name: Install Dependencies
        run: |
          ./scripts/debian/install-dev-dependencies.sh
          apt-get -y install lcov
      - name: Configure
        run: |
          python3 --version
          python3 -m pip --version
          "$CC" --version
          "$CXX" --version
          # Setting different values for CMAKE_INSTALL_PREFIX and
          # CPACK_PACKAGING_INSTALL_PREFIX is currently not supported
          # and causes a warning. We accept this drawback because the package
          # we generate here is built specifically as input for the plugin CI
          # jobs and not suitable for general use.
          cmake -B "$BUILD_DIR" \
            -DCMAKE_BUILD_TYPE:STRING=Debug \
            -DCMAKE_INSTALL_PREFIX:STRING="${PWD}/opt/vast" \
            -DCPACK_GENERATOR:STRING=TGZ \
            -DVAST_ENABLE_BUNDLED_CAF:BOOL=ON \
            -DVAST_ENABLE_CODE_COVERAGE:BOOL=ON \
            -DVAST_ENABLE_LSVAST:BOOL=ON \
            -DVAST_PLUGINS:STRING='plugins/*' \
            -DVAST_UNIT_TEST_TIMEOUT=180
      - name: Compile All Targets
        run: |
          cmake --build "$BUILD_DIR" --target all --parallel --verbose
      - name: Generate Code Coverage
        run: |
          cmake --build "$BUILD_DIR" --target ccov > all-tests.log || exit 0
      - name: Upload Code Coverage Logs
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-logs
          path: all-tests.log
          if-no-files-found: error
      - name: Upload Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ${{ env.BUILD_DIR }}/ccov
          if-no-files-found: error
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.VAST_CODECOV_TOKEN }}
          files: ${{ env.BUILD_DIR }}/ccov/all-tests.info
