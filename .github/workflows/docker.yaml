name: Docker
on:
  workflow_call:
    inputs:
      config:
        type: string
        required: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  vast:
    name: VAST
    runs-on: ubuntu-20.04
    steps:
      - name: Prevent pushing protected editions to public repos
        run: |
          # Create 'name registry' pairs
          jq -r '.editions[] | select(.registries | length > 0) | .name as $name | .registries[]? // .registries | [ $name, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name registry; do
            # Explicitly allow open source images.
            [[ "${name}" =~ ^vast(|-dev|-deps)$ ]] && continue
            # Explicitly allow private registries.
            [[ "${registry}" == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" ]] && continue
            echo "::error Pushing ${name} to ${registry} is forbidden"
            exit 1
          done
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Checkout submodules
        run: |
          git config --global --add safe.directory '*'
          git submodule update --init --recursive libvast
          git submodule update --init --recursive plugins
      - name: Configure
        id: cfg
        run: |
          # Configure
          echo '::notice inputs = ${{ toJSON(fromJSON(inputs.config)) }}'
          echo "::notice checking registries..."
          echo "needs-docker-hub=false" >> "$GITHUB_OUTPUT"
          echo "needs-ecr=false" >> "$GITHUB_OUTPUT"
          jq -r '.editions | map( .registries[]) | unique | .[]
                 | if . == "docker.io" then
                     "needs-docker-hub=true"
                   elif . == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" then
                     "needs-ecr=true"
                   else
                     empty
                   end
                 | @sh' \
                 <<< '${{ inputs.config }}' >> "${GITHUB_OUTPUT}"
          echo "::notice checking vast-plugins..."
          echo "needs-vast-plugins=false" >> "$GITHUB_OUTPUT"
          if [[ $(comm -12 \
                 <(jq -r '[(.editions[] | .name)] | sort | .[]' <<< '${{ inputs.config }}') \
                 <(echo vast-{ce,ee,manager}| tr ' ' '\n' | sort)) \
          ]]; then
            echo "needs-vast-plugins=true" >> "$GITHUB_OUTPUT"
          fi
      - name: Configure ssh-agent
        if: steps.cfg.outputs.needs-vast-plugins == 'true'
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Update submodules
        if: steps.cfg.outputs.needs-vast-plugins == 'true'
        run: |
          git submodule update --init --recursive contrib/vast-plugins
      # Login to ghcr before the build because we use it for caching.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker Images
        env:
          BUILDX_GIT_LABELS: full
          CACHE_TAG: ghcr.io/tenzir/vast:build-cache
        run: |
          cmake_version_args="-DVAST_VERSION_TAG:STRING=${{ fromJSON(inputs.config).version }}"
          echo "::info Building the Developer Edition Image"
          cat Dockerfile.extra >> Dockerfile
          docker buildx build . \
            -t "tenzir/vast:latest" --target "production" \
            --load --platform linux/amd64 \
            --build-arg "VAST_BUILD_OPTIONS=${cmake_version_args}" \
            --cache-from "type=registry,ref=${CACHE_TAG}" \
            --cache-to "type=registry,mode=max,ref=${CACHE_TAG}"
          jq -r '.editions[] | [.name, .target] | join (" ")' <<< '${{ inputs.config }}' | while read -r name target; do
            # We always build 'vast', so we can skip over here
            [[ "${name}" == "vast" ]] && continue
            echo "::info Building ${name}"
            docker buildx build . \
              -t "tenzir/${name}:latest" --target "${target}" \
              --load --platform linux/amd64 \
              --build-arg "VAST_BUILD_OPTIONS=${cmake_version_args}"
          done
      - name: Login to Docker Hub
        if: steps.cfg.outputs.needs-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Configure AWS Credentials
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-vast-manager-github-access
          aws-region: eu-west-1
      - name: Login to AWS ECR
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Publish Docker Images
        run: |
          # Expand the registries arrays and output each entry together with
          # the corresponding edition.
          jq -r '.editions[] | .name as $name | .registries[]? // .registries | [ $name, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name registry; do
            for tag in ${{ join(fromJSON(inputs.config).tags, ' ') }}; do
              docker tag "tenzir/${name}:latest" "${registry}/tenzir/${name}:${tag}"
              docker push "${registry}/tenzir/${name}:${tag}"
            done
          done
